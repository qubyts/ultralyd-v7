
ultralydv4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b02c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800b1fc  0800b1fc  0001b1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b380  0800b380  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800b380  0800b380  0001b380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b388  0800b388  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b388  0800b388  0001b388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b38c  0800b38c  0001b38c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000afa4  20000078  0800b408  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b01c  0800b408  0002b01c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f6ef  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004675  00000000  00000000  0003f797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  00043e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001538  00000000  00000000  00045520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025982  00000000  00000000  00046a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da9c  00000000  00000000  0006c3da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc367  00000000  00000000  00089e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001661dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006444  00000000  00000000  00166230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b1e4 	.word	0x0800b1e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800b1e4 	.word	0x0800b1e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b974 	b.w	8000dac <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468e      	mov	lr, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d14d      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000aea:	428a      	cmp	r2, r1
 8000aec:	4694      	mov	ip, r2
 8000aee:	d969      	bls.n	8000bc4 <__udivmoddi4+0xe8>
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b152      	cbz	r2, 8000b0c <__udivmoddi4+0x30>
 8000af6:	fa01 f302 	lsl.w	r3, r1, r2
 8000afa:	f1c2 0120 	rsb	r1, r2, #32
 8000afe:	fa20 f101 	lsr.w	r1, r0, r1
 8000b02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b06:	ea41 0e03 	orr.w	lr, r1, r3
 8000b0a:	4094      	lsls	r4, r2
 8000b0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b10:	0c21      	lsrs	r1, r4, #16
 8000b12:	fbbe f6f8 	udiv	r6, lr, r8
 8000b16:	fa1f f78c 	uxth.w	r7, ip
 8000b1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b22:	fb06 f107 	mul.w	r1, r6, r7
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b32:	f080 811f 	bcs.w	8000d74 <__udivmoddi4+0x298>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 811c 	bls.w	8000d74 <__udivmoddi4+0x298>
 8000b3c:	3e02      	subs	r6, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a5b      	subs	r3, r3, r1
 8000b42:	b2a4      	uxth	r4, r4
 8000b44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b48:	fb08 3310 	mls	r3, r8, r0, r3
 8000b4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b50:	fb00 f707 	mul.w	r7, r0, r7
 8000b54:	42a7      	cmp	r7, r4
 8000b56:	d90a      	bls.n	8000b6e <__udivmoddi4+0x92>
 8000b58:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b60:	f080 810a 	bcs.w	8000d78 <__udivmoddi4+0x29c>
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	f240 8107 	bls.w	8000d78 <__udivmoddi4+0x29c>
 8000b6a:	4464      	add	r4, ip
 8000b6c:	3802      	subs	r0, #2
 8000b6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b72:	1be4      	subs	r4, r4, r7
 8000b74:	2600      	movs	r6, #0
 8000b76:	b11d      	cbz	r5, 8000b80 <__udivmoddi4+0xa4>
 8000b78:	40d4      	lsrs	r4, r2
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b80:	4631      	mov	r1, r6
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d909      	bls.n	8000b9e <__udivmoddi4+0xc2>
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	f000 80ef 	beq.w	8000d6e <__udivmoddi4+0x292>
 8000b90:	2600      	movs	r6, #0
 8000b92:	e9c5 0100 	strd	r0, r1, [r5]
 8000b96:	4630      	mov	r0, r6
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	fab3 f683 	clz	r6, r3
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d14a      	bne.n	8000c3c <__udivmoddi4+0x160>
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d302      	bcc.n	8000bb0 <__udivmoddi4+0xd4>
 8000baa:	4282      	cmp	r2, r0
 8000bac:	f200 80f9 	bhi.w	8000da2 <__udivmoddi4+0x2c6>
 8000bb0:	1a84      	subs	r4, r0, r2
 8000bb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	469e      	mov	lr, r3
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d0e0      	beq.n	8000b80 <__udivmoddi4+0xa4>
 8000bbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bc2:	e7dd      	b.n	8000b80 <__udivmoddi4+0xa4>
 8000bc4:	b902      	cbnz	r2, 8000bc8 <__udivmoddi4+0xec>
 8000bc6:	deff      	udf	#255	; 0xff
 8000bc8:	fab2 f282 	clz	r2, r2
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	f040 8092 	bne.w	8000cf6 <__udivmoddi4+0x21a>
 8000bd2:	eba1 010c 	sub.w	r1, r1, ip
 8000bd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bda:	fa1f fe8c 	uxth.w	lr, ip
 8000bde:	2601      	movs	r6, #1
 8000be0:	0c20      	lsrs	r0, r4, #16
 8000be2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000be6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bee:	fb0e f003 	mul.w	r0, lr, r3
 8000bf2:	4288      	cmp	r0, r1
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x12c>
 8000bf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bfa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x12a>
 8000c00:	4288      	cmp	r0, r1
 8000c02:	f200 80cb 	bhi.w	8000d9c <__udivmoddi4+0x2c0>
 8000c06:	4643      	mov	r3, r8
 8000c08:	1a09      	subs	r1, r1, r0
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c10:	fb07 1110 	mls	r1, r7, r0, r1
 8000c14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c18:	fb0e fe00 	mul.w	lr, lr, r0
 8000c1c:	45a6      	cmp	lr, r4
 8000c1e:	d908      	bls.n	8000c32 <__udivmoddi4+0x156>
 8000c20:	eb1c 0404 	adds.w	r4, ip, r4
 8000c24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c28:	d202      	bcs.n	8000c30 <__udivmoddi4+0x154>
 8000c2a:	45a6      	cmp	lr, r4
 8000c2c:	f200 80bb 	bhi.w	8000da6 <__udivmoddi4+0x2ca>
 8000c30:	4608      	mov	r0, r1
 8000c32:	eba4 040e 	sub.w	r4, r4, lr
 8000c36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c3a:	e79c      	b.n	8000b76 <__udivmoddi4+0x9a>
 8000c3c:	f1c6 0720 	rsb	r7, r6, #32
 8000c40:	40b3      	lsls	r3, r6
 8000c42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c52:	431c      	orrs	r4, r3
 8000c54:	40f9      	lsrs	r1, r7
 8000c56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c62:	0c20      	lsrs	r0, r4, #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fb09 1118 	mls	r1, r9, r8, r1
 8000c6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c70:	fb08 f00e 	mul.w	r0, r8, lr
 8000c74:	4288      	cmp	r0, r1
 8000c76:	fa02 f206 	lsl.w	r2, r2, r6
 8000c7a:	d90b      	bls.n	8000c94 <__udivmoddi4+0x1b8>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c84:	f080 8088 	bcs.w	8000d98 <__udivmoddi4+0x2bc>
 8000c88:	4288      	cmp	r0, r1
 8000c8a:	f240 8085 	bls.w	8000d98 <__udivmoddi4+0x2bc>
 8000c8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c92:	4461      	add	r1, ip
 8000c94:	1a09      	subs	r1, r1, r0
 8000c96:	b2a4      	uxth	r4, r4
 8000c98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000ca0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ca4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca8:	458e      	cmp	lr, r1
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x1e2>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cb4:	d26c      	bcs.n	8000d90 <__udivmoddi4+0x2b4>
 8000cb6:	458e      	cmp	lr, r1
 8000cb8:	d96a      	bls.n	8000d90 <__udivmoddi4+0x2b4>
 8000cba:	3802      	subs	r0, #2
 8000cbc:	4461      	add	r1, ip
 8000cbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cc6:	eba1 010e 	sub.w	r1, r1, lr
 8000cca:	42a1      	cmp	r1, r4
 8000ccc:	46c8      	mov	r8, r9
 8000cce:	46a6      	mov	lr, r4
 8000cd0:	d356      	bcc.n	8000d80 <__udivmoddi4+0x2a4>
 8000cd2:	d053      	beq.n	8000d7c <__udivmoddi4+0x2a0>
 8000cd4:	b15d      	cbz	r5, 8000cee <__udivmoddi4+0x212>
 8000cd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cda:	eb61 010e 	sbc.w	r1, r1, lr
 8000cde:	fa01 f707 	lsl.w	r7, r1, r7
 8000ce2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ce6:	40f1      	lsrs	r1, r6
 8000ce8:	431f      	orrs	r7, r3
 8000cea:	e9c5 7100 	strd	r7, r1, [r5]
 8000cee:	2600      	movs	r6, #0
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	f1c2 0320 	rsb	r3, r2, #32
 8000cfa:	40d8      	lsrs	r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	fa21 f303 	lsr.w	r3, r1, r3
 8000d04:	4091      	lsls	r1, r2
 8000d06:	4301      	orrs	r1, r0
 8000d08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0c:	fa1f fe8c 	uxth.w	lr, ip
 8000d10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d14:	fb07 3610 	mls	r6, r7, r0, r3
 8000d18:	0c0b      	lsrs	r3, r1, #16
 8000d1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d22:	429e      	cmp	r6, r3
 8000d24:	fa04 f402 	lsl.w	r4, r4, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x260>
 8000d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d32:	d22f      	bcs.n	8000d94 <__udivmoddi4+0x2b8>
 8000d34:	429e      	cmp	r6, r3
 8000d36:	d92d      	bls.n	8000d94 <__udivmoddi4+0x2b8>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	b289      	uxth	r1, r1
 8000d40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d44:	fb07 3316 	mls	r3, r7, r6, r3
 8000d48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d50:	428b      	cmp	r3, r1
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x28a>
 8000d54:	eb1c 0101 	adds.w	r1, ip, r1
 8000d58:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d5c:	d216      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d914      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d62:	3e02      	subs	r6, #2
 8000d64:	4461      	add	r1, ip
 8000d66:	1ac9      	subs	r1, r1, r3
 8000d68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d6c:	e738      	b.n	8000be0 <__udivmoddi4+0x104>
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e705      	b.n	8000b80 <__udivmoddi4+0xa4>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e3      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6f8      	b.n	8000b6e <__udivmoddi4+0x92>
 8000d7c:	454b      	cmp	r3, r9
 8000d7e:	d2a9      	bcs.n	8000cd4 <__udivmoddi4+0x1f8>
 8000d80:	ebb9 0802 	subs.w	r8, r9, r2
 8000d84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7a3      	b.n	8000cd4 <__udivmoddi4+0x1f8>
 8000d8c:	4646      	mov	r6, r8
 8000d8e:	e7ea      	b.n	8000d66 <__udivmoddi4+0x28a>
 8000d90:	4620      	mov	r0, r4
 8000d92:	e794      	b.n	8000cbe <__udivmoddi4+0x1e2>
 8000d94:	4640      	mov	r0, r8
 8000d96:	e7d1      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d98:	46d0      	mov	r8, sl
 8000d9a:	e77b      	b.n	8000c94 <__udivmoddi4+0x1b8>
 8000d9c:	3b02      	subs	r3, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	e732      	b.n	8000c08 <__udivmoddi4+0x12c>
 8000da2:	4630      	mov	r0, r6
 8000da4:	e709      	b.n	8000bba <__udivmoddi4+0xde>
 8000da6:	4464      	add	r4, ip
 8000da8:	3802      	subs	r0, #2
 8000daa:	e742      	b.n	8000c32 <__udivmoddi4+0x156>

08000dac <__aeabi_idiv0>:
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop

08000db0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_DMA_Init+0x3c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a0b      	ldr	r2, [pc, #44]	; (8000dec <MX_DMA_Init+0x3c>)
 8000dc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_DMA_Init+0x3c>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2105      	movs	r1, #5
 8000dd6:	2011      	movs	r0, #17
 8000dd8:	f001 f9a4 	bl	8002124 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ddc:	2011      	movs	r0, #17
 8000dde:	f001 f9bd 	bl	800215c <HAL_NVIC_EnableIRQ>

}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800

08000df0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	//PrintServerPrintfInit();
	//deftask_init();
	//buzzer_init();
	PrintServerPrintfInit();
 8000df4:	f001 f86e 	bl	8001ed4 <PrintServerPrintfInit>
	deftask_init();
 8000df8:	f000 ffd0 	bl	8001d9c <deftask_init>
	buzzer_init();
 8000dfc:	f000 ff78 	bl	8001cf0 <buzzer_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <MX_FREERTOS_Init+0x24>)
 8000e02:	2100      	movs	r1, #0
 8000e04:	4804      	ldr	r0, [pc, #16]	; (8000e18 <MX_FREERTOS_Init+0x28>)
 8000e06:	f005 fcab 	bl	8006760 <osThreadNew>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4a03      	ldr	r2, [pc, #12]	; (8000e1c <MX_FREERTOS_Init+0x2c>)
 8000e0e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	0800b260 	.word	0x0800b260
 8000e18:	08000e21 	.word	0x08000e21
 8000e1c:	20000094 	.word	0x20000094

08000e20 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
__weak void StartDefaultTask(void *argument)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f005 fd2c 	bl	8006886 <osDelay>
 8000e2e:	e7fb      	b.n	8000e28 <StartDefaultTask+0x8>

08000e30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	f107 030c 	add.w	r3, r7, #12
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	4b31      	ldr	r3, [pc, #196]	; (8000f10 <MX_GPIO_Init+0xe0>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a30      	ldr	r2, [pc, #192]	; (8000f10 <MX_GPIO_Init+0xe0>)
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b2e      	ldr	r3, [pc, #184]	; (8000f10 <MX_GPIO_Init+0xe0>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	4b2a      	ldr	r3, [pc, #168]	; (8000f10 <MX_GPIO_Init+0xe0>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a29      	ldr	r2, [pc, #164]	; (8000f10 <MX_GPIO_Init+0xe0>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <MX_GPIO_Init+0xe0>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <MX_GPIO_Init+0xe0>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a22      	ldr	r2, [pc, #136]	; (8000f10 <MX_GPIO_Init+0xe0>)
 8000e88:	f043 0302 	orr.w	r3, r3, #2
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <MX_GPIO_Init+0xe0>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2120      	movs	r1, #32
 8000e9e:	481d      	ldr	r0, [pc, #116]	; (8000f14 <MX_GPIO_Init+0xe4>)
 8000ea0:	f001 ff00 	bl	8002ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eaa:	481b      	ldr	r0, [pc, #108]	; (8000f18 <MX_GPIO_Init+0xe8>)
 8000eac:	f001 fefa 	bl	8002ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000eb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eb6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000eba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4814      	ldr	r0, [pc, #80]	; (8000f18 <MX_GPIO_Init+0xe8>)
 8000ec8:	f001 fd58 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ecc:	2320      	movs	r3, #32
 8000ece:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480c      	ldr	r0, [pc, #48]	; (8000f14 <MX_GPIO_Init+0xe4>)
 8000ee4:	f001 fd4a 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ee8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efa:	f107 030c 	add.w	r3, r7, #12
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_GPIO_Init+0xe8>)
 8000f02:	f001 fd3b 	bl	800297c <HAL_GPIO_Init>

}
 8000f06:	bf00      	nop
 8000f08:	3720      	adds	r7, #32
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020000 	.word	0x40020000
 8000f18:	40020800 	.word	0x40020800

08000f1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f20:	f001 f806 	bl	8001f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f24:	f000 f816 	bl	8000f54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f28:	f7ff ff82 	bl	8000e30 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f2c:	f7ff ff40 	bl	8000db0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f30:	f000 fd14 	bl	800195c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f34:	f000 fa3c 	bl	80013b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f38:	f000 fada 	bl	80014f0 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000f3c:	f000 fb2e 	bl	800159c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000f40:	f000 fb9c 	bl	800167c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000f44:	f005 fbc2 	bl	80066cc <osKernelInitialize>
  MX_FREERTOS_Init();
 8000f48:	f7ff ff52 	bl	8000df0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f4c:	f005 fbe2 	bl	8006714 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <main+0x34>
	...

08000f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b094      	sub	sp, #80	; 0x50
 8000f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	2234      	movs	r2, #52	; 0x34
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f009 fc54 	bl	800a810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f78:	2300      	movs	r3, #0
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	4b2c      	ldr	r3, [pc, #176]	; (8001030 <SystemClock_Config+0xdc>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	4a2b      	ldr	r2, [pc, #172]	; (8001030 <SystemClock_Config+0xdc>)
 8000f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f86:	6413      	str	r3, [r2, #64]	; 0x40
 8000f88:	4b29      	ldr	r3, [pc, #164]	; (8001030 <SystemClock_Config+0xdc>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f94:	2300      	movs	r3, #0
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	4b26      	ldr	r3, [pc, #152]	; (8001034 <SystemClock_Config+0xe0>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a25      	ldr	r2, [pc, #148]	; (8001034 <SystemClock_Config+0xe0>)
 8000f9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	4b23      	ldr	r3, [pc, #140]	; (8001034 <SystemClock_Config+0xe0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fac:	603b      	str	r3, [r7, #0]
 8000fae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb8:	2310      	movs	r3, #16
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fc4:	2308      	movs	r3, #8
 8000fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000fc8:	23b4      	movs	r3, #180	; 0xb4
 8000fca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f002 fa61 	bl	80034a4 <HAL_RCC_OscConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fe8:	f000 f8a4 	bl	8001134 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fec:	f001 fe8e 	bl	8002d0c <HAL_PWREx_EnableOverDrive>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ff6:	f000 f89d 	bl	8001134 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ffe:	2302      	movs	r3, #2
 8001000:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001006:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800100a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800100c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001010:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001012:	f107 0308 	add.w	r3, r7, #8
 8001016:	2105      	movs	r1, #5
 8001018:	4618      	mov	r0, r3
 800101a:	f001 fec7 	bl	8002dac <HAL_RCC_ClockConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001024:	f000 f886 	bl	8001134 <Error_Handler>
  }
}
 8001028:	bf00      	nop
 800102a:	3750      	adds	r7, #80	; 0x50
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40023800 	.word	0x40023800
 8001034:	40007000 	.word	0x40007000

08001038 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{//printf("Callback \n \r");
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0c      	ldr	r2, [pc, #48]	; (8001078 <HAL_TIM_IC_CaptureCallback+0x40>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d10f      	bne.n	800106a <HAL_TIM_IC_CaptureCallback+0x32>
	{
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
		//printf("CCR1 is %i \n", TIM4->CCR1);
		if (TIM4->CCR1 >= 2000){
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <HAL_TIM_IC_CaptureCallback+0x40>)
 800104c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800104e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001052:	d30a      	bcc.n	800106a <HAL_TIM_IC_CaptureCallback+0x32>
			captured_value1 = TIM4->CCR1;
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <HAL_TIM_IC_CaptureCallback+0x40>)
 8001056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001058:	461a      	mov	r2, r3
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <HAL_TIM_IC_CaptureCallback+0x44>)
 800105c:	601a      	str	r2, [r3, #0]
			TIM4->DIER &= ~(1<<1);
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_TIM_IC_CaptureCallback+0x40>)
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <HAL_TIM_IC_CaptureCallback+0x40>)
 8001064:	f023 0302 	bic.w	r3, r3, #2
 8001068:	60d3      	str	r3, [r2, #12]
		}

	}
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40000800 	.word	0x40000800
 800107c:	20000098 	.word	0x20000098

08001080 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM2) {
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001090:	d136      	bne.n	8001100 <HAL_TIM_PeriodElapsedCallback+0x80>
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
		if(hardwareDelayFlag == 1)
 8001092:	4b21      	ldr	r3, [pc, #132]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d11b      	bne.n	80010d2 <HAL_TIM_PeriodElapsedCallback+0x52>
		{
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800109a:	2100      	movs	r1, #0
 800109c:	481f      	ldr	r0, [pc, #124]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800109e:	f002 fe81 	bl	8003da4 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80010a2:	2100      	movs	r1, #0
 80010a4:	481d      	ldr	r0, [pc, #116]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80010a6:	f004 f909 	bl	80052bc <HAL_TIMEx_PWMN_Stop>
			TIM1->CNT = 0;
 80010aa:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24
			TIM2->ARR = 54000;
 80010b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010b4:	f24d 22f0 	movw	r2, #54000	; 0xd2f0
 80010b8:	62da      	str	r2, [r3, #44]	; 0x2c
			__HAL_TIM_ENABLE(&htim2);
 80010ba:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b18      	ldr	r3, [pc, #96]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f042 0201 	orr.w	r2, r2, #1
 80010c8:	601a      	str	r2, [r3, #0]
			//HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_1);

						hardwareDelayFlag = 0;
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	e016      	b.n	8001100 <HAL_TIM_PeriodElapsedCallback+0x80>

		}		else
		{
			__HAL_TIM_ENABLE(&htim4);
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f042 0201 	orr.w	r2, r2, #1
 80010e0:	601a      	str	r2, [r3, #0]
			TIM4->DIER |= (1<<1);
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	4a11      	ldr	r2, [pc, #68]	; (800112c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	60d3      	str	r3, [r2, #12]
								TIM4->SR &= ~(1<<1);
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	4a0e      	ldr	r2, [pc, #56]	; (800112c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80010f4:	f023 0302 	bic.w	r3, r3, #2
 80010f8:	6113      	str	r3, [r2, #16]
								TIM4->CNT = 0;
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	625a      	str	r2, [r3, #36]	; 0x24
		}

	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0a      	ldr	r2, [pc, #40]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d101      	bne.n	800110e <HAL_TIM_PeriodElapsedCallback+0x8e>
    HAL_IncTick();
 800110a:	f000 ff33 	bl	8001f74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2000009c 	.word	0x2000009c
 800111c:	200000ec 	.word	0x200000ec
 8001120:	40010000 	.word	0x40010000
 8001124:	20000134 	.word	0x20000134
 8001128:	2000017c 	.word	0x2000017c
 800112c:	40000800 	.word	0x40000800
 8001130:	40001400 	.word	0x40001400

08001134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001138:	b672      	cpsid	i
}
 800113a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800113c:	e7fe      	b.n	800113c <Error_Handler+0x8>
	...

08001140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_MspInit+0x54>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	4a11      	ldr	r2, [pc, #68]	; (8001194 <HAL_MspInit+0x54>)
 8001150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001154:	6453      	str	r3, [r2, #68]	; 0x44
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <HAL_MspInit+0x54>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <HAL_MspInit+0x54>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <HAL_MspInit+0x54>)
 800116c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001170:	6413      	str	r3, [r2, #64]	; 0x40
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <HAL_MspInit+0x54>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	210f      	movs	r1, #15
 8001182:	f06f 0001 	mvn.w	r0, #1
 8001186:	f000 ffcd 	bl	8002124 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800

08001198 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08e      	sub	sp, #56	; 0x38
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	4b33      	ldr	r3, [pc, #204]	; (800127c <HAL_InitTick+0xe4>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	4a32      	ldr	r2, [pc, #200]	; (800127c <HAL_InitTick+0xe4>)
 80011b2:	f043 0320 	orr.w	r3, r3, #32
 80011b6:	6413      	str	r3, [r2, #64]	; 0x40
 80011b8:	4b30      	ldr	r3, [pc, #192]	; (800127c <HAL_InitTick+0xe4>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	f003 0320 	and.w	r3, r3, #32
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011c4:	f107 0210 	add.w	r2, r7, #16
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4611      	mov	r1, r2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f001 ff06 	bl	8002fe0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011d4:	6a3b      	ldr	r3, [r7, #32]
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d103      	bne.n	80011e6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011de:	f001 fed7 	bl	8002f90 <HAL_RCC_GetPCLK1Freq>
 80011e2:	6378      	str	r0, [r7, #52]	; 0x34
 80011e4:	e004      	b.n	80011f0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011e6:	f001 fed3 	bl	8002f90 <HAL_RCC_GetPCLK1Freq>
 80011ea:	4603      	mov	r3, r0
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011f2:	4a23      	ldr	r2, [pc, #140]	; (8001280 <HAL_InitTick+0xe8>)
 80011f4:	fba2 2303 	umull	r2, r3, r2, r3
 80011f8:	0c9b      	lsrs	r3, r3, #18
 80011fa:	3b01      	subs	r3, #1
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80011fe:	4b21      	ldr	r3, [pc, #132]	; (8001284 <HAL_InitTick+0xec>)
 8001200:	4a21      	ldr	r2, [pc, #132]	; (8001288 <HAL_InitTick+0xf0>)
 8001202:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001204:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <HAL_InitTick+0xec>)
 8001206:	f240 32e7 	movw	r2, #999	; 0x3e7
 800120a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800120c:	4a1d      	ldr	r2, [pc, #116]	; (8001284 <HAL_InitTick+0xec>)
 800120e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001210:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001212:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <HAL_InitTick+0xec>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001218:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <HAL_InitTick+0xec>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121e:	4b19      	ldr	r3, [pc, #100]	; (8001284 <HAL_InitTick+0xec>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001224:	4817      	ldr	r0, [pc, #92]	; (8001284 <HAL_InitTick+0xec>)
 8001226:	f002 fbdb 	bl	80039e0 <HAL_TIM_Base_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001230:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001234:	2b00      	cmp	r3, #0
 8001236:	d11b      	bne.n	8001270 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001238:	4812      	ldr	r0, [pc, #72]	; (8001284 <HAL_InitTick+0xec>)
 800123a:	f002 fc21 	bl	8003a80 <HAL_TIM_Base_Start_IT>
 800123e:	4603      	mov	r3, r0
 8001240:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001244:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001248:	2b00      	cmp	r3, #0
 800124a:	d111      	bne.n	8001270 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800124c:	2037      	movs	r0, #55	; 0x37
 800124e:	f000 ff85 	bl	800215c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b0f      	cmp	r3, #15
 8001256:	d808      	bhi.n	800126a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001258:	2200      	movs	r2, #0
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	2037      	movs	r0, #55	; 0x37
 800125e:	f000 ff61 	bl	8002124 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001262:	4a0a      	ldr	r2, [pc, #40]	; (800128c <HAL_InitTick+0xf4>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	e002      	b.n	8001270 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001270:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001274:	4618      	mov	r0, r3
 8001276:	3738      	adds	r7, #56	; 0x38
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40023800 	.word	0x40023800
 8001280:	431bde83 	.word	0x431bde83
 8001284:	200000a0 	.word	0x200000a0
 8001288:	40001400 	.word	0x40001400
 800128c:	20000008 	.word	0x20000008

08001290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <NMI_Handler+0x4>

08001296 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129a:	e7fe      	b.n	800129a <HardFault_Handler+0x4>

0800129c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <MemManage_Handler+0x4>

080012a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <BusFault_Handler+0x4>

080012a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <UsageFault_Handler+0x4>

080012ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <DMA1_Stream6_IRQHandler+0x10>)
 80012c2:	f001 f8f1 	bl	80024a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000250 	.word	0x20000250

080012d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <TIM2_IRQHandler+0x10>)
 80012d6:	f002 ffb1 	bl	800423c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000134 	.word	0x20000134

080012e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <TIM4_IRQHandler+0x10>)
 80012ea:	f002 ffa7 	bl	800423c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	2000017c 	.word	0x2000017c

080012f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <USART2_IRQHandler+0x10>)
 80012fe:	f004 fa0d 	bl	800571c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2000020c 	.word	0x2000020c

0800130c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <TIM7_IRQHandler+0x10>)
 8001312:	f002 ff93 	bl	800423c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200000a0 	.word	0x200000a0

08001320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001328:	4a14      	ldr	r2, [pc, #80]	; (800137c <_sbrk+0x5c>)
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <_sbrk+0x60>)
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <_sbrk+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d102      	bne.n	8001342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <_sbrk+0x64>)
 800133e:	4a12      	ldr	r2, [pc, #72]	; (8001388 <_sbrk+0x68>)
 8001340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	429a      	cmp	r2, r3
 800134e:	d207      	bcs.n	8001360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001350:	f009 fa24 	bl	800a79c <__errno>
 8001354:	4603      	mov	r3, r0
 8001356:	220c      	movs	r2, #12
 8001358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135a:	f04f 33ff 	mov.w	r3, #4294967295
 800135e:	e009      	b.n	8001374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001366:	4b07      	ldr	r3, [pc, #28]	; (8001384 <_sbrk+0x64>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	4a05      	ldr	r2, [pc, #20]	; (8001384 <_sbrk+0x64>)
 8001370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001372:	68fb      	ldr	r3, [r7, #12]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20020000 	.word	0x20020000
 8001380:	00000400 	.word	0x00000400
 8001384:	200000e8 	.word	0x200000e8
 8001388:	2000b020 	.word	0x2000b020

0800138c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <SystemInit+0x20>)
 8001392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001396:	4a05      	ldr	r2, [pc, #20]	; (80013ac <SystemInit+0x20>)
 8001398:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800139c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b096      	sub	sp, #88	; 0x58
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]
 80013de:	615a      	str	r2, [r3, #20]
 80013e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	2220      	movs	r2, #32
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f009 fa11 	bl	800a810 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013ee:	4b3e      	ldr	r3, [pc, #248]	; (80014e8 <MX_TIM1_Init+0x138>)
 80013f0:	4a3e      	ldr	r2, [pc, #248]	; (80014ec <MX_TIM1_Init+0x13c>)
 80013f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013f4:	4b3c      	ldr	r3, [pc, #240]	; (80014e8 <MX_TIM1_Init+0x138>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fa:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <MX_TIM1_Init+0x138>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4500;
 8001400:	4b39      	ldr	r3, [pc, #228]	; (80014e8 <MX_TIM1_Init+0x138>)
 8001402:	f241 1294 	movw	r2, #4500	; 0x1194
 8001406:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001408:	4b37      	ldr	r3, [pc, #220]	; (80014e8 <MX_TIM1_Init+0x138>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800140e:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <MX_TIM1_Init+0x138>)
 8001410:	2200      	movs	r2, #0
 8001412:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001414:	4b34      	ldr	r3, [pc, #208]	; (80014e8 <MX_TIM1_Init+0x138>)
 8001416:	2280      	movs	r2, #128	; 0x80
 8001418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800141a:	4833      	ldr	r0, [pc, #204]	; (80014e8 <MX_TIM1_Init+0x138>)
 800141c:	f002 fae0 	bl	80039e0 <HAL_TIM_Base_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001426:	f7ff fe85 	bl	8001134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800142a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800142e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001430:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001434:	4619      	mov	r1, r3
 8001436:	482c      	ldr	r0, [pc, #176]	; (80014e8 <MX_TIM1_Init+0x138>)
 8001438:	f003 f966 	bl	8004708 <HAL_TIM_ConfigClockSource>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001442:	f7ff fe77 	bl	8001134 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001446:	4828      	ldr	r0, [pc, #160]	; (80014e8 <MX_TIM1_Init+0x138>)
 8001448:	f002 fb8a 	bl	8003b60 <HAL_TIM_PWM_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001452:	f7ff fe6f 	bl	8001134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001456:	2300      	movs	r3, #0
 8001458:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800145e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001462:	4619      	mov	r1, r3
 8001464:	4820      	ldr	r0, [pc, #128]	; (80014e8 <MX_TIM1_Init+0x138>)
 8001466:	f003 ff87 	bl	8005378 <HAL_TIMEx_MasterConfigSynchronization>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001470:	f7ff fe60 	bl	8001134 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001474:	2360      	movs	r3, #96	; 0x60
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 40;
 8001478:	2328      	movs	r3, #40	; 0x28
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800147c:	2300      	movs	r3, #0
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001480:	2300      	movs	r3, #0
 8001482:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001488:	2300      	movs	r3, #0
 800148a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001494:	2200      	movs	r2, #0
 8001496:	4619      	mov	r1, r3
 8001498:	4813      	ldr	r0, [pc, #76]	; (80014e8 <MX_TIM1_Init+0x138>)
 800149a:	f003 f873 	bl	8004584 <HAL_TIM_PWM_ConfigChannel>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80014a4:	f7ff fe46 	bl	8001134 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 150;
 80014b4:	2396      	movs	r3, #150	; 0x96
 80014b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	4619      	mov	r1, r3
 80014ca:	4807      	ldr	r0, [pc, #28]	; (80014e8 <MX_TIM1_Init+0x138>)
 80014cc:	f003 ffd0 	bl	8005470 <HAL_TIMEx_ConfigBreakDeadTime>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80014d6:	f7ff fe2d 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014da:	4803      	ldr	r0, [pc, #12]	; (80014e8 <MX_TIM1_Init+0x138>)
 80014dc:	f000 f9de 	bl	800189c <HAL_TIM_MspPostInit>

}
 80014e0:	bf00      	nop
 80014e2:	3758      	adds	r7, #88	; 0x58
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	200000ec 	.word	0x200000ec
 80014ec:	40010000 	.word	0x40010000

080014f0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001504:	463b      	mov	r3, r7
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <MX_TIM2_Init+0xa8>)
 800150e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001512:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001514:	4b20      	ldr	r3, [pc, #128]	; (8001598 <MX_TIM2_Init+0xa8>)
 8001516:	2200      	movs	r2, #0
 8001518:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151a:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <MX_TIM2_Init+0xa8>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 22500;
 8001520:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <MX_TIM2_Init+0xa8>)
 8001522:	f245 72e4 	movw	r2, #22500	; 0x57e4
 8001526:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001528:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <MX_TIM2_Init+0xa8>)
 800152a:	2200      	movs	r2, #0
 800152c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152e:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <MX_TIM2_Init+0xa8>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001534:	4818      	ldr	r0, [pc, #96]	; (8001598 <MX_TIM2_Init+0xa8>)
 8001536:	f002 fa53 	bl	80039e0 <HAL_TIM_Base_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001540:	f7ff fdf8 	bl	8001134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001548:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800154a:	f107 0308 	add.w	r3, r7, #8
 800154e:	4619      	mov	r1, r3
 8001550:	4811      	ldr	r0, [pc, #68]	; (8001598 <MX_TIM2_Init+0xa8>)
 8001552:	f003 f8d9 	bl	8004708 <HAL_TIM_ConfigClockSource>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800155c:	f7ff fdea 	bl	8001134 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8001560:	2108      	movs	r1, #8
 8001562:	480d      	ldr	r0, [pc, #52]	; (8001598 <MX_TIM2_Init+0xa8>)
 8001564:	f002 fe10 	bl	8004188 <HAL_TIM_OnePulse_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800156e:	f7ff fde1 	bl	8001134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800157a:	463b      	mov	r3, r7
 800157c:	4619      	mov	r1, r3
 800157e:	4806      	ldr	r0, [pc, #24]	; (8001598 <MX_TIM2_Init+0xa8>)
 8001580:	f003 fefa 	bl	8005378 <HAL_TIMEx_MasterConfigSynchronization>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800158a:	f7ff fdd3 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000134 	.word	0x20000134

0800159c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015a2:	f107 0318 	add.w	r3, r7, #24
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015ba:	463b      	mov	r3, r7
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015c6:	4b2b      	ldr	r3, [pc, #172]	; (8001674 <MX_TIM4_Init+0xd8>)
 80015c8:	4a2b      	ldr	r2, [pc, #172]	; (8001678 <MX_TIM4_Init+0xdc>)
 80015ca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 14;
 80015cc:	4b29      	ldr	r3, [pc, #164]	; (8001674 <MX_TIM4_Init+0xd8>)
 80015ce:	220e      	movs	r2, #14
 80015d0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d2:	4b28      	ldr	r3, [pc, #160]	; (8001674 <MX_TIM4_Init+0xd8>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80015d8:	4b26      	ldr	r3, [pc, #152]	; (8001674 <MX_TIM4_Init+0xd8>)
 80015da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015de:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e0:	4b24      	ldr	r3, [pc, #144]	; (8001674 <MX_TIM4_Init+0xd8>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e6:	4b23      	ldr	r3, [pc, #140]	; (8001674 <MX_TIM4_Init+0xd8>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015ec:	4821      	ldr	r0, [pc, #132]	; (8001674 <MX_TIM4_Init+0xd8>)
 80015ee:	f002 f9f7 	bl	80039e0 <HAL_TIM_Base_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 80015f8:	f7ff fd9c 	bl	8001134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001600:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001602:	f107 0318 	add.w	r3, r7, #24
 8001606:	4619      	mov	r1, r3
 8001608:	481a      	ldr	r0, [pc, #104]	; (8001674 <MX_TIM4_Init+0xd8>)
 800160a:	f003 f87d 	bl	8004708 <HAL_TIM_ConfigClockSource>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001614:	f7ff fd8e 	bl	8001134 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001618:	4816      	ldr	r0, [pc, #88]	; (8001674 <MX_TIM4_Init+0xd8>)
 800161a:	f002 fc33 	bl	8003e84 <HAL_TIM_IC_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001624:	f7ff fd86 	bl	8001134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001628:	2320      	movs	r3, #32
 800162a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	4619      	mov	r1, r3
 8001636:	480f      	ldr	r0, [pc, #60]	; (8001674 <MX_TIM4_Init+0xd8>)
 8001638:	f003 fe9e 	bl	8005378 <HAL_TIMEx_MasterConfigSynchronization>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001642:	f7ff fd77 	bl	8001134 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001646:	2300      	movs	r3, #0
 8001648:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800164a:	2301      	movs	r3, #1
 800164c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001656:	463b      	mov	r3, r7
 8001658:	2200      	movs	r2, #0
 800165a:	4619      	mov	r1, r3
 800165c:	4805      	ldr	r0, [pc, #20]	; (8001674 <MX_TIM4_Init+0xd8>)
 800165e:	f002 fef5 	bl	800444c <HAL_TIM_IC_ConfigChannel>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001668:	f7ff fd64 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	3728      	adds	r7, #40	; 0x28
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	2000017c 	.word	0x2000017c
 8001678:	40000800 	.word	0x40000800

0800167c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08e      	sub	sp, #56	; 0x38
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001682:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001690:	f107 0320 	add.w	r3, r7, #32
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
 80016a8:	615a      	str	r2, [r3, #20]
 80016aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80016ac:	4b2d      	ldr	r3, [pc, #180]	; (8001764 <MX_TIM5_Init+0xe8>)
 80016ae:	4a2e      	ldr	r2, [pc, #184]	; (8001768 <MX_TIM5_Init+0xec>)
 80016b0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 45;
 80016b2:	4b2c      	ldr	r3, [pc, #176]	; (8001764 <MX_TIM5_Init+0xe8>)
 80016b4:	222d      	movs	r2, #45	; 0x2d
 80016b6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b8:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <MX_TIM5_Init+0xe8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000;
 80016be:	4b29      	ldr	r3, [pc, #164]	; (8001764 <MX_TIM5_Init+0xe8>)
 80016c0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80016c4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c6:	4b27      	ldr	r3, [pc, #156]	; (8001764 <MX_TIM5_Init+0xe8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016cc:	4b25      	ldr	r3, [pc, #148]	; (8001764 <MX_TIM5_Init+0xe8>)
 80016ce:	2280      	movs	r2, #128	; 0x80
 80016d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80016d2:	4824      	ldr	r0, [pc, #144]	; (8001764 <MX_TIM5_Init+0xe8>)
 80016d4:	f002 f984 	bl	80039e0 <HAL_TIM_Base_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80016de:	f7ff fd29 	bl	8001134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80016e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ec:	4619      	mov	r1, r3
 80016ee:	481d      	ldr	r0, [pc, #116]	; (8001764 <MX_TIM5_Init+0xe8>)
 80016f0:	f003 f80a 	bl	8004708 <HAL_TIM_ConfigClockSource>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80016fa:	f7ff fd1b 	bl	8001134 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80016fe:	4819      	ldr	r0, [pc, #100]	; (8001764 <MX_TIM5_Init+0xe8>)
 8001700:	f002 fa2e 	bl	8003b60 <HAL_TIM_PWM_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800170a:	f7ff fd13 	bl	8001134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001712:	2300      	movs	r3, #0
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001716:	f107 0320 	add.w	r3, r7, #32
 800171a:	4619      	mov	r1, r3
 800171c:	4811      	ldr	r0, [pc, #68]	; (8001764 <MX_TIM5_Init+0xe8>)
 800171e:	f003 fe2b 	bl	8005378 <HAL_TIMEx_MasterConfigSynchronization>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001728:	f7ff fd04 	bl	8001134 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800172c:	2360      	movs	r3, #96	; 0x60
 800172e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001730:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001734:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	2200      	movs	r2, #0
 8001742:	4619      	mov	r1, r3
 8001744:	4807      	ldr	r0, [pc, #28]	; (8001764 <MX_TIM5_Init+0xe8>)
 8001746:	f002 ff1d 	bl	8004584 <HAL_TIM_PWM_ConfigChannel>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001750:	f7ff fcf0 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001754:	4803      	ldr	r0, [pc, #12]	; (8001764 <MX_TIM5_Init+0xe8>)
 8001756:	f000 f8a1 	bl	800189c <HAL_TIM_MspPostInit>

}
 800175a:	bf00      	nop
 800175c:	3738      	adds	r7, #56	; 0x38
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200001c4 	.word	0x200001c4
 8001768:	40000c00 	.word	0x40000c00

0800176c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a3f      	ldr	r2, [pc, #252]	; (8001888 <HAL_TIM_Base_MspInit+0x11c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d10e      	bne.n	80017ac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]
 8001792:	4b3e      	ldr	r3, [pc, #248]	; (800188c <HAL_TIM_Base_MspInit+0x120>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	4a3d      	ldr	r2, [pc, #244]	; (800188c <HAL_TIM_Base_MspInit+0x120>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6453      	str	r3, [r2, #68]	; 0x44
 800179e:	4b3b      	ldr	r3, [pc, #236]	; (800188c <HAL_TIM_Base_MspInit+0x120>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	61bb      	str	r3, [r7, #24]
 80017a8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80017aa:	e068      	b.n	800187e <HAL_TIM_Base_MspInit+0x112>
  else if(tim_baseHandle->Instance==TIM2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b4:	d116      	bne.n	80017e4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	4b34      	ldr	r3, [pc, #208]	; (800188c <HAL_TIM_Base_MspInit+0x120>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a33      	ldr	r2, [pc, #204]	; (800188c <HAL_TIM_Base_MspInit+0x120>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b31      	ldr	r3, [pc, #196]	; (800188c <HAL_TIM_Base_MspInit+0x120>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2105      	movs	r1, #5
 80017d6:	201c      	movs	r0, #28
 80017d8:	f000 fca4 	bl	8002124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017dc:	201c      	movs	r0, #28
 80017de:	f000 fcbd 	bl	800215c <HAL_NVIC_EnableIRQ>
}
 80017e2:	e04c      	b.n	800187e <HAL_TIM_Base_MspInit+0x112>
  else if(tim_baseHandle->Instance==TIM4)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a29      	ldr	r2, [pc, #164]	; (8001890 <HAL_TIM_Base_MspInit+0x124>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d134      	bne.n	8001858 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	4b26      	ldr	r3, [pc, #152]	; (800188c <HAL_TIM_Base_MspInit+0x120>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	4a25      	ldr	r2, [pc, #148]	; (800188c <HAL_TIM_Base_MspInit+0x120>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6413      	str	r3, [r2, #64]	; 0x40
 80017fe:	4b23      	ldr	r3, [pc, #140]	; (800188c <HAL_TIM_Base_MspInit+0x120>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b1f      	ldr	r3, [pc, #124]	; (800188c <HAL_TIM_Base_MspInit+0x120>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a1e      	ldr	r2, [pc, #120]	; (800188c <HAL_TIM_Base_MspInit+0x120>)
 8001814:	f043 0302 	orr.w	r3, r3, #2
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b1c      	ldr	r3, [pc, #112]	; (800188c <HAL_TIM_Base_MspInit+0x120>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001826:	2340      	movs	r3, #64	; 0x40
 8001828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001836:	2302      	movs	r3, #2
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183a:	f107 031c 	add.w	r3, r7, #28
 800183e:	4619      	mov	r1, r3
 8001840:	4814      	ldr	r0, [pc, #80]	; (8001894 <HAL_TIM_Base_MspInit+0x128>)
 8001842:	f001 f89b 	bl	800297c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2105      	movs	r1, #5
 800184a:	201e      	movs	r0, #30
 800184c:	f000 fc6a 	bl	8002124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001850:	201e      	movs	r0, #30
 8001852:	f000 fc83 	bl	800215c <HAL_NVIC_EnableIRQ>
}
 8001856:	e012      	b.n	800187e <HAL_TIM_Base_MspInit+0x112>
  else if(tim_baseHandle->Instance==TIM5)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a0e      	ldr	r2, [pc, #56]	; (8001898 <HAL_TIM_Base_MspInit+0x12c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d10d      	bne.n	800187e <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_TIM_Base_MspInit+0x120>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	4a08      	ldr	r2, [pc, #32]	; (800188c <HAL_TIM_Base_MspInit+0x120>)
 800186c:	f043 0308 	orr.w	r3, r3, #8
 8001870:	6413      	str	r3, [r2, #64]	; 0x40
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_TIM_Base_MspInit+0x120>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
}
 800187e:	bf00      	nop
 8001880:	3730      	adds	r7, #48	; 0x30
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40010000 	.word	0x40010000
 800188c:	40023800 	.word	0x40023800
 8001890:	40000800 	.word	0x40000800
 8001894:	40020400 	.word	0x40020400
 8001898:	40000c00 	.word	0x40000c00

0800189c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08a      	sub	sp, #40	; 0x28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a24      	ldr	r2, [pc, #144]	; (800194c <HAL_TIM_MspPostInit+0xb0>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d11f      	bne.n	80018fe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	4b23      	ldr	r3, [pc, #140]	; (8001950 <HAL_TIM_MspPostInit+0xb4>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a22      	ldr	r2, [pc, #136]	; (8001950 <HAL_TIM_MspPostInit+0xb4>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b20      	ldr	r3, [pc, #128]	; (8001950 <HAL_TIM_MspPostInit+0xb4>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80018da:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80018de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e8:	2300      	movs	r3, #0
 80018ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018ec:	2301      	movs	r3, #1
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4619      	mov	r1, r3
 80018f6:	4817      	ldr	r0, [pc, #92]	; (8001954 <HAL_TIM_MspPostInit+0xb8>)
 80018f8:	f001 f840 	bl	800297c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80018fc:	e022      	b.n	8001944 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM5)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a15      	ldr	r2, [pc, #84]	; (8001958 <HAL_TIM_MspPostInit+0xbc>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d11d      	bne.n	8001944 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	4b10      	ldr	r3, [pc, #64]	; (8001950 <HAL_TIM_MspPostInit+0xb4>)
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	4a0f      	ldr	r2, [pc, #60]	; (8001950 <HAL_TIM_MspPostInit+0xb4>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6313      	str	r3, [r2, #48]	; 0x30
 8001918:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <HAL_TIM_MspPostInit+0xb4>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001924:	2301      	movs	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001930:	2300      	movs	r3, #0
 8001932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001934:	2302      	movs	r3, #2
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4619      	mov	r1, r3
 800193e:	4805      	ldr	r0, [pc, #20]	; (8001954 <HAL_TIM_MspPostInit+0xb8>)
 8001940:	f001 f81c 	bl	800297c <HAL_GPIO_Init>
}
 8001944:	bf00      	nop
 8001946:	3728      	adds	r7, #40	; 0x28
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40010000 	.word	0x40010000
 8001950:	40023800 	.word	0x40023800
 8001954:	40020000 	.word	0x40020000
 8001958:	40000c00 	.word	0x40000c00

0800195c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <MX_USART2_UART_Init+0x4c>)
 8001962:	4a12      	ldr	r2, [pc, #72]	; (80019ac <MX_USART2_UART_Init+0x50>)
 8001964:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <MX_USART2_UART_Init+0x4c>)
 8001968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800196c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <MX_USART2_UART_Init+0x4c>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <MX_USART2_UART_Init+0x4c>)
 8001976:	2200      	movs	r2, #0
 8001978:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <MX_USART2_UART_Init+0x4c>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <MX_USART2_UART_Init+0x4c>)
 8001982:	220c      	movs	r2, #12
 8001984:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <MX_USART2_UART_Init+0x4c>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <MX_USART2_UART_Init+0x4c>)
 800198e:	2200      	movs	r2, #0
 8001990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <MX_USART2_UART_Init+0x4c>)
 8001994:	f003 fdf7 	bl	8005586 <HAL_UART_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800199e:	f7ff fbc9 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	2000020c 	.word	0x2000020c
 80019ac:	40004400 	.word	0x40004400

080019b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a34      	ldr	r2, [pc, #208]	; (8001aa0 <HAL_UART_MspInit+0xf0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d161      	bne.n	8001a96 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	4b33      	ldr	r3, [pc, #204]	; (8001aa4 <HAL_UART_MspInit+0xf4>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	4a32      	ldr	r2, [pc, #200]	; (8001aa4 <HAL_UART_MspInit+0xf4>)
 80019dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e0:	6413      	str	r3, [r2, #64]	; 0x40
 80019e2:	4b30      	ldr	r3, [pc, #192]	; (8001aa4 <HAL_UART_MspInit+0xf4>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b2c      	ldr	r3, [pc, #176]	; (8001aa4 <HAL_UART_MspInit+0xf4>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a2b      	ldr	r2, [pc, #172]	; (8001aa4 <HAL_UART_MspInit+0xf4>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b29      	ldr	r3, [pc, #164]	; (8001aa4 <HAL_UART_MspInit+0xf4>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a0a:	230c      	movs	r3, #12
 8001a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a16:	2303      	movs	r3, #3
 8001a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a1a:	2307      	movs	r3, #7
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1e:	f107 0314 	add.w	r3, r7, #20
 8001a22:	4619      	mov	r1, r3
 8001a24:	4820      	ldr	r0, [pc, #128]	; (8001aa8 <HAL_UART_MspInit+0xf8>)
 8001a26:	f000 ffa9 	bl	800297c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <HAL_UART_MspInit+0xfc>)
 8001a2c:	4a20      	ldr	r2, [pc, #128]	; (8001ab0 <HAL_UART_MspInit+0x100>)
 8001a2e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001a30:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <HAL_UART_MspInit+0xfc>)
 8001a32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a36:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a38:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <HAL_UART_MspInit+0xfc>)
 8001a3a:	2240      	movs	r2, #64	; 0x40
 8001a3c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <HAL_UART_MspInit+0xfc>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a44:	4b19      	ldr	r3, [pc, #100]	; (8001aac <HAL_UART_MspInit+0xfc>)
 8001a46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a4a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a4c:	4b17      	ldr	r3, [pc, #92]	; (8001aac <HAL_UART_MspInit+0xfc>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a52:	4b16      	ldr	r3, [pc, #88]	; (8001aac <HAL_UART_MspInit+0xfc>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HAL_UART_MspInit+0xfc>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <HAL_UART_MspInit+0xfc>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <HAL_UART_MspInit+0xfc>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001a6a:	4810      	ldr	r0, [pc, #64]	; (8001aac <HAL_UART_MspInit+0xfc>)
 8001a6c:	f000 fb84 	bl	8002178 <HAL_DMA_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001a76:	f7ff fb5d 	bl	8001134 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a0b      	ldr	r2, [pc, #44]	; (8001aac <HAL_UART_MspInit+0xfc>)
 8001a7e:	635a      	str	r2, [r3, #52]	; 0x34
 8001a80:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <HAL_UART_MspInit+0xfc>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2105      	movs	r1, #5
 8001a8a:	2026      	movs	r0, #38	; 0x26
 8001a8c:	f000 fb4a 	bl	8002124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a90:	2026      	movs	r0, #38	; 0x26
 8001a92:	f000 fb63 	bl	800215c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a96:	bf00      	nop
 8001a98:	3728      	adds	r7, #40	; 0x28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40004400 	.word	0x40004400
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	20000250 	.word	0x20000250
 8001ab0:	400260a0 	.word	0x400260a0

08001ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ab8:	480d      	ldr	r0, [pc, #52]	; (8001af0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aba:	490e      	ldr	r1, [pc, #56]	; (8001af4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001abc:	4a0e      	ldr	r2, [pc, #56]	; (8001af8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac0:	e002      	b.n	8001ac8 <LoopCopyDataInit>

08001ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac6:	3304      	adds	r3, #4

08001ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001acc:	d3f9      	bcc.n	8001ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ace:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ad0:	4c0b      	ldr	r4, [pc, #44]	; (8001b00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad4:	e001      	b.n	8001ada <LoopFillZerobss>

08001ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad8:	3204      	adds	r2, #4

08001ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001adc:	d3fb      	bcc.n	8001ad6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ade:	f7ff fc55 	bl	800138c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ae2:	f008 fe61 	bl	800a7a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ae6:	f7ff fa19 	bl	8000f1c <main>
  bx  lr    
 8001aea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001aec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001af8:	0800b390 	.word	0x0800b390
  ldr r2, =_sbss
 8001afc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001b00:	2000b01c 	.word	0x2000b01c

08001b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b04:	e7fe      	b.n	8001b04 <ADC_IRQHandler>
	...

08001b08 <Start_BuzzerTask>:



char txbuff1[50];
void Start_BuzzerTask(void *argument)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBuzzer */
	  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001b10:	2100      	movs	r1, #0
 8001b12:	4871      	ldr	r0, [pc, #452]	; (8001cd8 <Start_BuzzerTask+0x1d0>)
 8001b14:	f002 f87e 	bl	8003c14 <HAL_TIM_PWM_Start>
	  TIM5->CCR1 = 1000;
 8001b18:	4b70      	ldr	r3, [pc, #448]	; (8001cdc <Start_BuzzerTask+0x1d4>)
 8001b1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b1e:	635a      	str	r2, [r3, #52]	; 0x34
	  int buzzer_toggle = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
	  int buzzer_toggle_cont = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	613b      	str	r3, [r7, #16]
	  int buzzer_toggle_delay = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
	  int distance = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60bb      	str	r3, [r7, #8]
	 ;

  /* Infinite loop */
  for(;;)
  {
	  distance = (captured_value1);
 8001b30:	4b6b      	ldr	r3, [pc, #428]	; (8001ce0 <Start_BuzzerTask+0x1d8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60bb      	str	r3, [r7, #8]

	  distance = (captured_value1/6.15)*0.0342;
 8001b36:	4b6a      	ldr	r3, [pc, #424]	; (8001ce0 <Start_BuzzerTask+0x1d8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fd12 	bl	8000564 <__aeabi_i2d>
 8001b40:	a361      	add	r3, pc, #388	; (adr r3, 8001cc8 <Start_BuzzerTask+0x1c0>)
 8001b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b46:	f7fe fea1 	bl	800088c <__aeabi_ddiv>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4610      	mov	r0, r2
 8001b50:	4619      	mov	r1, r3
 8001b52:	a35f      	add	r3, pc, #380	; (adr r3, 8001cd0 <Start_BuzzerTask+0x1c8>)
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	f7fe fd6e 	bl	8000638 <__aeabi_dmul>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	f7fe ff7a 	bl	8000a5c <__aeabi_d2iz>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	60bb      	str	r3, [r7, #8]
	  printf("CCR1-2 is %i \n", captured_value1);
 8001b6c:	4b5c      	ldr	r3, [pc, #368]	; (8001ce0 <Start_BuzzerTask+0x1d8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4619      	mov	r1, r3
 8001b72:	485c      	ldr	r0, [pc, #368]	; (8001ce4 <Start_BuzzerTask+0x1dc>)
 8001b74:	f000 f924 	bl	8001dc0 <PrintServerPrintf>
	  printf("distance is: %i cm \n \r", distance);
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	485b      	ldr	r0, [pc, #364]	; (8001ce8 <Start_BuzzerTask+0x1e0>)
 8001b7c:	f000 f920 	bl	8001dc0 <PrintServerPrintf>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001b80:	2120      	movs	r1, #32
 8001b82:	485a      	ldr	r0, [pc, #360]	; (8001cec <Start_BuzzerTask+0x1e4>)
 8001b84:	f001 f8a7 	bl	8002cd6 <HAL_GPIO_TogglePin>
	  if((distance > 0)&&(distance <30))
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	dd08      	ble.n	8001ba0 <Start_BuzzerTask+0x98>
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	2b1d      	cmp	r3, #29
 8001b92:	dc05      	bgt.n	8001ba0 <Start_BuzzerTask+0x98>
		  {
			  buzzer_toggle_delay = 1000;
 8001b94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b98:	60fb      	str	r3, [r7, #12]
			  buzzer_toggle_cont = 1;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	e05c      	b.n	8001c5a <Start_BuzzerTask+0x152>
		  }
	  else if((distance >= 30)&&(distance <60))
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	2b1d      	cmp	r3, #29
 8001ba4:	dd07      	ble.n	8001bb6 <Start_BuzzerTask+0xae>
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	2b3b      	cmp	r3, #59	; 0x3b
 8001baa:	dc04      	bgt.n	8001bb6 <Start_BuzzerTask+0xae>
		  {
			  buzzer_toggle_delay = 125;
 8001bac:	237d      	movs	r3, #125	; 0x7d
 8001bae:	60fb      	str	r3, [r7, #12]
			  buzzer_toggle_cont = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	e051      	b.n	8001c5a <Start_BuzzerTask+0x152>
		  }
	  else if((distance >= 60)&&(distance <90))
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2b3b      	cmp	r3, #59	; 0x3b
 8001bba:	dd07      	ble.n	8001bcc <Start_BuzzerTask+0xc4>
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2b59      	cmp	r3, #89	; 0x59
 8001bc0:	dc04      	bgt.n	8001bcc <Start_BuzzerTask+0xc4>
	  	  {
			  buzzer_toggle_delay = 142;
 8001bc2:	238e      	movs	r3, #142	; 0x8e
 8001bc4:	60fb      	str	r3, [r7, #12]
			  buzzer_toggle_cont = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	e046      	b.n	8001c5a <Start_BuzzerTask+0x152>
	  	  }
	  else if((distance >= 90)&&(distance <120))
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b59      	cmp	r3, #89	; 0x59
 8001bd0:	dd07      	ble.n	8001be2 <Start_BuzzerTask+0xda>
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2b77      	cmp	r3, #119	; 0x77
 8001bd6:	dc04      	bgt.n	8001be2 <Start_BuzzerTask+0xda>
	  	  {
			  buzzer_toggle_delay = 167;
 8001bd8:	23a7      	movs	r3, #167	; 0xa7
 8001bda:	60fb      	str	r3, [r7, #12]
			  buzzer_toggle_cont = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	e03b      	b.n	8001c5a <Start_BuzzerTask+0x152>
	  	  }
	  else if((distance >= 120)&&(distance <150))
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2b77      	cmp	r3, #119	; 0x77
 8001be6:	dd07      	ble.n	8001bf8 <Start_BuzzerTask+0xf0>
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2b95      	cmp	r3, #149	; 0x95
 8001bec:	dc04      	bgt.n	8001bf8 <Start_BuzzerTask+0xf0>
	  	  {
			  buzzer_toggle_delay = 200;
 8001bee:	23c8      	movs	r3, #200	; 0xc8
 8001bf0:	60fb      	str	r3, [r7, #12]
			  buzzer_toggle_cont = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	e030      	b.n	8001c5a <Start_BuzzerTask+0x152>
	  	  }
	  else if((distance >= 150)&&(distance <180))
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2b95      	cmp	r3, #149	; 0x95
 8001bfc:	dd07      	ble.n	8001c0e <Start_BuzzerTask+0x106>
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	2bb3      	cmp	r3, #179	; 0xb3
 8001c02:	dc04      	bgt.n	8001c0e <Start_BuzzerTask+0x106>
	  	  {
			  buzzer_toggle_delay = 250;
 8001c04:	23fa      	movs	r3, #250	; 0xfa
 8001c06:	60fb      	str	r3, [r7, #12]
			  buzzer_toggle_cont = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	e025      	b.n	8001c5a <Start_BuzzerTask+0x152>
	  	  }
	  else if((distance >= 180)&&(distance <210))
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2bb3      	cmp	r3, #179	; 0xb3
 8001c12:	dd08      	ble.n	8001c26 <Start_BuzzerTask+0x11e>
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2bd1      	cmp	r3, #209	; 0xd1
 8001c18:	dc05      	bgt.n	8001c26 <Start_BuzzerTask+0x11e>
	  	  {
			  buzzer_toggle_delay = 333;
 8001c1a:	f240 134d 	movw	r3, #333	; 0x14d
 8001c1e:	60fb      	str	r3, [r7, #12]
			  buzzer_toggle_cont = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	e019      	b.n	8001c5a <Start_BuzzerTask+0x152>
	  	  }
	  else if((distance >= 210)&&(distance <270))
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2bd1      	cmp	r3, #209	; 0xd1
 8001c2a:	dd09      	ble.n	8001c40 <Start_BuzzerTask+0x138>
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001c32:	da05      	bge.n	8001c40 <Start_BuzzerTask+0x138>
	  	  {
			  buzzer_toggle_delay = 500;
 8001c34:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c38:	60fb      	str	r3, [r7, #12]
			  buzzer_toggle_cont = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	e00c      	b.n	8001c5a <Start_BuzzerTask+0x152>
	  	  }

	  else if((distance >= 270)&&(distance <=300))
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001c46:	db08      	blt.n	8001c5a <Start_BuzzerTask+0x152>
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001c4e:	dc04      	bgt.n	8001c5a <Start_BuzzerTask+0x152>
	  	  {
			  buzzer_toggle_delay = 1000;
 8001c50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c54:	60fb      	str	r3, [r7, #12]
			  buzzer_toggle_cont = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
	  	  }

	  //sprintf(txbuff1,"distance: %d\n\r",distance);
	  //HAL_UART_Transmit(&huart2, &txbuff1, 20, 100);
	  if(buzzer_toggle == 1)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d106      	bne.n	8001c6e <Start_BuzzerTask+0x166>
	  {
		  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001c60:	2100      	movs	r1, #0
 8001c62:	481d      	ldr	r0, [pc, #116]	; (8001cd8 <Start_BuzzerTask+0x1d0>)
 8001c64:	f001 ffd6 	bl	8003c14 <HAL_TIM_PWM_Start>
		  buzzer_toggle = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	e012      	b.n	8001c94 <Start_BuzzerTask+0x18c>

	  }
	  else if((buzzer_toggle == 0)&&(buzzer_toggle_cont == 0))
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d109      	bne.n	8001c88 <Start_BuzzerTask+0x180>
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d106      	bne.n	8001c88 <Start_BuzzerTask+0x180>
	  {
		  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4816      	ldr	r0, [pc, #88]	; (8001cd8 <Start_BuzzerTask+0x1d0>)
 8001c7e:	f002 f891 	bl	8003da4 <HAL_TIM_PWM_Stop>
		  buzzer_toggle = 1;
 8001c82:	2301      	movs	r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	e005      	b.n	8001c94 <Start_BuzzerTask+0x18c>
	  }
	  else
	  {
		  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4813      	ldr	r0, [pc, #76]	; (8001cd8 <Start_BuzzerTask+0x1d0>)
 8001c8c:	f001 ffc2 	bl	8003c14 <HAL_TIM_PWM_Start>
		  buzzer_toggle = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
	  }
	  if(distance < 1)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	dc06      	bgt.n	8001ca8 <Start_BuzzerTask+0x1a0>
	  {
		  buzzer_toggle_delay = 2000;
 8001c9a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c9e:	60fb      	str	r3, [r7, #12]
		  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	480d      	ldr	r0, [pc, #52]	; (8001cd8 <Start_BuzzerTask+0x1d0>)
 8001ca4:	f002 f87e 	bl	8003da4 <HAL_TIM_PWM_Stop>
	  }
	  if(distance >300)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001cae:	dd06      	ble.n	8001cbe <Start_BuzzerTask+0x1b6>
	  {
		  buzzer_toggle_delay = 2000;
 8001cb0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001cb4:	60fb      	str	r3, [r7, #12]
		  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4807      	ldr	r0, [pc, #28]	; (8001cd8 <Start_BuzzerTask+0x1d0>)
 8001cba:	f002 f873 	bl	8003da4 <HAL_TIM_PWM_Stop>
	  }

    osDelay(buzzer_toggle_delay);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f004 fde0 	bl	8006886 <osDelay>
	  distance = (captured_value1);
 8001cc6:	e733      	b.n	8001b30 <Start_BuzzerTask+0x28>
 8001cc8:	9999999a 	.word	0x9999999a
 8001ccc:	40189999 	.word	0x40189999
 8001cd0:	930be0df 	.word	0x930be0df
 8001cd4:	3fa182a9 	.word	0x3fa182a9
 8001cd8:	200001c4 	.word	0x200001c4
 8001cdc:	40000c00 	.word	0x40000c00
 8001ce0:	20000098 	.word	0x20000098
 8001ce4:	0800b214 	.word	0x0800b214
 8001ce8:	0800b224 	.word	0x0800b224
 8001cec:	40020000 	.word	0x40020000

08001cf0 <buzzer_init>:
  }

}
void buzzer_init(){
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
/* creation of Buzzer_Task */
Buzzer_TaskHandle = osThreadNew(Start_BuzzerTask, &captured_value1, &Buzzer_Task_attributes);
 8001cf4:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <buzzer_init+0x18>)
 8001cf6:	4905      	ldr	r1, [pc, #20]	; (8001d0c <buzzer_init+0x1c>)
 8001cf8:	4805      	ldr	r0, [pc, #20]	; (8001d10 <buzzer_init+0x20>)
 8001cfa:	f004 fd31 	bl	8006760 <osThreadNew>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <buzzer_init+0x24>)
 8001d02:	6013      	str	r3, [r2, #0]
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	0800b29c 	.word	0x0800b29c
 8001d0c:	20000098 	.word	0x20000098
 8001d10:	08001b09 	.word	0x08001b09
 8001d14:	200002b0 	.word	0x200002b0

08001d18 <StarttimerTask>:
  .priority = (osPriority_t) osPriorityNormal,
};
void StarttimerTask(void *argument);

void StarttimerTask(void *argument)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	HAL_TIM_Base_Start_IT(&htim2);
 8001d20:	4818      	ldr	r0, [pc, #96]	; (8001d84 <StarttimerTask+0x6c>)
 8001d22:	f001 fead 	bl	8003a80 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001d26:	2100      	movs	r1, #0
 8001d28:	4817      	ldr	r0, [pc, #92]	; (8001d88 <StarttimerTask+0x70>)
 8001d2a:	f002 f905 	bl	8003f38 <HAL_TIM_IC_Start_IT>
	//HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
  /* Infinite loop */
  for(;;)
  {
if (hardwareDelayFlag == 0){
 8001d2e:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <StarttimerTask+0x74>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d121      	bne.n	8001d7a <StarttimerTask+0x62>
	  		TIM2->ARR = 22500;
 8001d36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d3a:	f245 72e4 	movw	r2, #22500	; 0x57e4
 8001d3e:	62da      	str	r2, [r3, #44]	; 0x2c
	  		__HAL_TIM_ENABLE(&htim2);
 8001d40:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <StarttimerTask+0x6c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <StarttimerTask+0x6c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0201 	orr.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]
	  		TIM1->CCR1 = 2250;
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <StarttimerTask+0x78>)
 8001d52:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001d56:	635a      	str	r2, [r3, #52]	; 0x34

	  		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001d58:	2100      	movs	r1, #0
 8001d5a:	480e      	ldr	r0, [pc, #56]	; (8001d94 <StarttimerTask+0x7c>)
 8001d5c:	f003 f9f4 	bl	8005148 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001d60:	2100      	movs	r1, #0
 8001d62:	480c      	ldr	r0, [pc, #48]	; (8001d94 <StarttimerTask+0x7c>)
 8001d64:	f001 ff56 	bl	8003c14 <HAL_TIM_PWM_Start>
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
	  		hardwareDelayFlag = 1;
 8001d68:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <StarttimerTask+0x74>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]
	  		TIM4->DIER &= ~(1<<1);
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <StarttimerTask+0x80>)
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	4a09      	ldr	r2, [pc, #36]	; (8001d98 <StarttimerTask+0x80>)
 8001d74:	f023 0302 	bic.w	r3, r3, #2
 8001d78:	60d3      	str	r3, [r2, #12]
	  		//TIM4->CCR1;
}

//	  	    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
    osDelay(1000);
 8001d7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d7e:	f004 fd82 	bl	8006886 <osDelay>
if (hardwareDelayFlag == 0){
 8001d82:	e7d4      	b.n	8001d2e <StarttimerTask+0x16>
 8001d84:	20000134 	.word	0x20000134
 8001d88:	2000017c 	.word	0x2000017c
 8001d8c:	2000009c 	.word	0x2000009c
 8001d90:	40010000 	.word	0x40010000
 8001d94:	200000ec 	.word	0x200000ec
 8001d98:	40000800 	.word	0x40000800

08001d9c <deftask_init>:
  }
  /* USER CODE END StartDefaultTask */
}

void deftask_init(){
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
	/* creation of defaultTask */
	timerTaskHandle = osThreadNew(StarttimerTask, NULL, &timerTask_attributes);
 8001da0:	4a04      	ldr	r2, [pc, #16]	; (8001db4 <deftask_init+0x18>)
 8001da2:	2100      	movs	r1, #0
 8001da4:	4804      	ldr	r0, [pc, #16]	; (8001db8 <deftask_init+0x1c>)
 8001da6:	f004 fcdb 	bl	8006760 <osThreadNew>
 8001daa:	4603      	mov	r3, r0
 8001dac:	4a03      	ldr	r2, [pc, #12]	; (8001dbc <deftask_init+0x20>)
 8001dae:	6013      	str	r3, [r2, #0]
}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	0800b2c0 	.word	0x0800b2c0
 8001db8:	08001d19 	.word	0x08001d19
 8001dbc:	200002b4 	.word	0x200002b4

08001dc0 <PrintServerPrintf>:
	uint8_t buffer[PRINT_BUFFER_SIZE];
} PrintStruct;

//oppgave e
void PrintServerPrintf(const char *fmt, ...)
{
 8001dc0:	b40f      	push	{r0, r1, r2, r3}
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0

	PrintStruct *PrintMem;

	PrintMem = (PrintStruct *) osMemoryPoolAlloc(PrintPool, 0U);
 8001dc8:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <PrintServerPrintf+0x64>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f005 f866 	bl	8006ea0 <osMemoryPoolAlloc>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	607b      	str	r3, [r7, #4]
	if(PrintMem == NULL){
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d01b      	beq.n	8001e16 <PrintServerPrintf+0x56>
		return;
	}

	va_list args;

	va_start(args, fmt);
 8001dde:	f107 0314 	add.w	r3, r7, #20
 8001de2:	603b      	str	r3, [r7, #0]

	vsnprintf((char *)PrintMem -> buffer, PRINT_BUFFER_SIZE, fmt, args);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4618      	mov	r0, r3
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	2140      	movs	r1, #64	; 0x40
 8001dee:	f008 fe51 	bl	800aa94 <vsniprintf>

	va_end(args);

	if(osMessageQueuePut(PrintMsgQ, &PrintMem, 0U, 0U) != osOK){
 8001df2:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <PrintServerPrintf+0x68>)
 8001df4:	6818      	ldr	r0, [r3, #0]
 8001df6:	1d39      	adds	r1, r7, #4
 8001df8:	2300      	movs	r3, #0
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f004 febc 	bl	8006b78 <osMessageQueuePut>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d008      	beq.n	8001e18 <PrintServerPrintf+0x58>
		osMemoryPoolFree(PrintPool, PrintMem);
 8001e06:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <PrintServerPrintf+0x64>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f005 f8bc 	bl	8006f8c <osMemoryPoolFree>
 8001e14:	e000      	b.n	8001e18 <PrintServerPrintf+0x58>
		return;
 8001e16:	bf00      	nop
	}
}
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e20:	b004      	add	sp, #16
 8001e22:	4770      	bx	lr
 8001e24:	200002c0 	.word	0x200002c0
 8001e28:	200002b8 	.word	0x200002b8

08001e2c <HAL_UART_TxCpltCallback>:

void callbacks (UART_HandleTypeDef *huart){
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	if(huart == uart_handle_p){
 8001e34:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <HAL_UART_TxCpltCallback+0x28>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d105      	bne.n	8001e4a <HAL_UART_TxCpltCallback+0x1e>
		osEventFlagsSet(Printflag, 0x1U);
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_UART_TxCpltCallback+0x2c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2101      	movs	r1, #1
 8001e44:	4618      	mov	r0, r3
 8001e46:	f004 fd79 	bl	800693c <osEventFlagsSet>
	}
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000004 	.word	0x20000004
 8001e58:	200002c4 	.word	0x200002c4

08001e5c <PrintServer>:


//oppgave f

void PrintServer(void *arg){
 8001e5c:	b5b0      	push	{r4, r5, r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	PrintStruct *PrintMem;
	osStatus_t status;
	while(1){
		status = osMessageQueueGet(PrintMsgQ, (PrintStruct*)&PrintMem, NULL, osWaitForever);
 8001e64:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <PrintServer+0x68>)
 8001e66:	6818      	ldr	r0, [r3, #0]
 8001e68:	f107 0108 	add.w	r1, r7, #8
 8001e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e70:	2200      	movs	r2, #0
 8001e72:	f004 fee1 	bl	8006c38 <osMessageQueueGet>
 8001e76:	60f8      	str	r0, [r7, #12]
		if(status  == osOK){
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d119      	bne.n	8001eb2 <PrintServer+0x56>
			if(HAL_UART_Transmit_DMA(uart_handle_p, (uint8_t*)PrintMem->buffer, strlen((char*)PrintMem->buffer)) == HAL_OK)
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <PrintServer+0x6c>)
 8001e80:	681c      	ldr	r4, [r3, #0]
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	461d      	mov	r5, r3
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe f9c1 	bl	8000210 <strlen>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	4629      	mov	r1, r5
 8001e96:	4620      	mov	r0, r4
 8001e98:	f003 fbc2 	bl	8005620 <HAL_UART_Transmit_DMA>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d107      	bne.n	8001eb2 <PrintServer+0x56>
			{
				osEventFlagsWait(Printflag, 0x1U, osFlagsWaitAny, osWaitForever);
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <PrintServer+0x70>)
 8001ea4:	6818      	ldr	r0, [r3, #0]
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2101      	movs	r1, #1
 8001eae:	f004 fd89 	bl	80069c4 <osEventFlagsWait>

			}
		}

		osMemoryPoolFree(PrintPool, PrintMem);
 8001eb2:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <PrintServer+0x74>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	4611      	mov	r1, r2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f005 f866 	bl	8006f8c <osMemoryPoolFree>
		status = osMessageQueueGet(PrintMsgQ, (PrintStruct*)&PrintMem, NULL, osWaitForever);
 8001ec0:	e7d0      	b.n	8001e64 <PrintServer+0x8>
 8001ec2:	bf00      	nop
 8001ec4:	200002b8 	.word	0x200002b8
 8001ec8:	20000004 	.word	0x20000004
 8001ecc:	200002c4 	.word	0x200002c4
 8001ed0:	200002c0 	.word	0x200002c0

08001ed4 <PrintServerPrintfInit>:
}


// oppgave c og d

_Bool PrintServerPrintfInit(void){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	PrintMsgQ = osMessageQueueNew(print_Pool, 4, NULL);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2104      	movs	r1, #4
 8001edc:	2020      	movs	r0, #32
 8001ede:	f004 fdd7 	bl	8006a90 <osMessageQueueNew>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	4a0d      	ldr	r2, [pc, #52]	; (8001f1c <PrintServerPrintfInit+0x48>)
 8001ee6:	6013      	str	r3, [r2, #0]
	PrintThread = osThreadNew(PrintServer, NULL, NULL);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2100      	movs	r1, #0
 8001eec:	480c      	ldr	r0, [pc, #48]	; (8001f20 <PrintServerPrintfInit+0x4c>)
 8001eee:	f004 fc37 	bl	8006760 <osThreadNew>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4a0b      	ldr	r2, [pc, #44]	; (8001f24 <PrintServerPrintfInit+0x50>)
 8001ef6:	6013      	str	r3, [r2, #0]
	PrintPool = osMemoryPoolNew(print_Pool, sizeof(PrintStruct), NULL);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2140      	movs	r1, #64	; 0x40
 8001efc:	2020      	movs	r0, #32
 8001efe:	f004 fef9 	bl	8006cf4 <osMemoryPoolNew>
 8001f02:	4603      	mov	r3, r0
 8001f04:	4a08      	ldr	r2, [pc, #32]	; (8001f28 <PrintServerPrintfInit+0x54>)
 8001f06:	6013      	str	r3, [r2, #0]
	Printflag = osEventFlagsNew(NULL);
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f004 fcd7 	bl	80068bc <osEventFlagsNew>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	4a06      	ldr	r2, [pc, #24]	; (8001f2c <PrintServerPrintfInit+0x58>)
 8001f12:	6013      	str	r3, [r2, #0]

	return true;
 8001f14:	2301      	movs	r3, #1
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	200002b8 	.word	0x200002b8
 8001f20:	08001e5d 	.word	0x08001e5d
 8001f24:	200002bc 	.word	0x200002bc
 8001f28:	200002c0 	.word	0x200002c0
 8001f2c:	200002c4 	.word	0x200002c4

08001f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f34:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <HAL_Init+0x40>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0d      	ldr	r2, [pc, #52]	; (8001f70 <HAL_Init+0x40>)
 8001f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f40:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <HAL_Init+0x40>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0a      	ldr	r2, [pc, #40]	; (8001f70 <HAL_Init+0x40>)
 8001f46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <HAL_Init+0x40>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a07      	ldr	r2, [pc, #28]	; (8001f70 <HAL_Init+0x40>)
 8001f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f58:	2003      	movs	r0, #3
 8001f5a:	f000 f8d8 	bl	800210e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f5e:	200f      	movs	r0, #15
 8001f60:	f7ff f91a 	bl	8001198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f64:	f7ff f8ec 	bl	8001140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40023c00 	.word	0x40023c00

08001f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_IncTick+0x20>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <HAL_IncTick+0x24>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4413      	add	r3, r2
 8001f84:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <HAL_IncTick+0x24>)
 8001f86:	6013      	str	r3, [r2, #0]
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	2000000c 	.word	0x2000000c
 8001f98:	200002c8 	.word	0x200002c8

08001f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <HAL_GetTick+0x14>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	200002c8 	.word	0x200002c8

08001fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fe6:	4a04      	ldr	r2, [pc, #16]	; (8001ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	60d3      	str	r3, [r2, #12]
}
 8001fec:	bf00      	nop
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002000:	4b04      	ldr	r3, [pc, #16]	; (8002014 <__NVIC_GetPriorityGrouping+0x18>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	0a1b      	lsrs	r3, r3, #8
 8002006:	f003 0307 	and.w	r3, r3, #7
}
 800200a:	4618      	mov	r0, r3
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	2b00      	cmp	r3, #0
 8002028:	db0b      	blt.n	8002042 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	f003 021f 	and.w	r2, r3, #31
 8002030:	4907      	ldr	r1, [pc, #28]	; (8002050 <__NVIC_EnableIRQ+0x38>)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	095b      	lsrs	r3, r3, #5
 8002038:	2001      	movs	r0, #1
 800203a:	fa00 f202 	lsl.w	r2, r0, r2
 800203e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	e000e100 	.word	0xe000e100

08002054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	6039      	str	r1, [r7, #0]
 800205e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002064:	2b00      	cmp	r3, #0
 8002066:	db0a      	blt.n	800207e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	b2da      	uxtb	r2, r3
 800206c:	490c      	ldr	r1, [pc, #48]	; (80020a0 <__NVIC_SetPriority+0x4c>)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	0112      	lsls	r2, r2, #4
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	440b      	add	r3, r1
 8002078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800207c:	e00a      	b.n	8002094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	b2da      	uxtb	r2, r3
 8002082:	4908      	ldr	r1, [pc, #32]	; (80020a4 <__NVIC_SetPriority+0x50>)
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	3b04      	subs	r3, #4
 800208c:	0112      	lsls	r2, r2, #4
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	440b      	add	r3, r1
 8002092:	761a      	strb	r2, [r3, #24]
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000e100 	.word	0xe000e100
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b089      	sub	sp, #36	; 0x24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f1c3 0307 	rsb	r3, r3, #7
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	bf28      	it	cs
 80020c6:	2304      	movcs	r3, #4
 80020c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	3304      	adds	r3, #4
 80020ce:	2b06      	cmp	r3, #6
 80020d0:	d902      	bls.n	80020d8 <NVIC_EncodePriority+0x30>
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3b03      	subs	r3, #3
 80020d6:	e000      	b.n	80020da <NVIC_EncodePriority+0x32>
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020dc:	f04f 32ff 	mov.w	r2, #4294967295
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43da      	mvns	r2, r3
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	401a      	ands	r2, r3
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f0:	f04f 31ff 	mov.w	r1, #4294967295
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	fa01 f303 	lsl.w	r3, r1, r3
 80020fa:	43d9      	mvns	r1, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002100:	4313      	orrs	r3, r2
         );
}
 8002102:	4618      	mov	r0, r3
 8002104:	3724      	adds	r7, #36	; 0x24
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff ff4c 	bl	8001fb4 <__NVIC_SetPriorityGrouping>
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
 8002130:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002136:	f7ff ff61 	bl	8001ffc <__NVIC_GetPriorityGrouping>
 800213a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	68b9      	ldr	r1, [r7, #8]
 8002140:	6978      	ldr	r0, [r7, #20]
 8002142:	f7ff ffb1 	bl	80020a8 <NVIC_EncodePriority>
 8002146:	4602      	mov	r2, r0
 8002148:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800214c:	4611      	mov	r1, r2
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ff80 	bl	8002054 <__NVIC_SetPriority>
}
 8002154:	bf00      	nop
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff ff54 	bl	8002018 <__NVIC_EnableIRQ>
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002184:	f7ff ff0a 	bl	8001f9c <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e099      	b.n	80022c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2202      	movs	r2, #2
 8002198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0201 	bic.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021b4:	e00f      	b.n	80021d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021b6:	f7ff fef1 	bl	8001f9c <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b05      	cmp	r3, #5
 80021c2:	d908      	bls.n	80021d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2220      	movs	r2, #32
 80021c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2203      	movs	r2, #3
 80021ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e078      	b.n	80022c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1e8      	bne.n	80021b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	4b38      	ldr	r3, [pc, #224]	; (80022d0 <HAL_DMA_Init+0x158>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002202:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800220e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800221a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4313      	orrs	r3, r2
 8002226:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	2b04      	cmp	r3, #4
 800222e:	d107      	bne.n	8002240 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	4313      	orrs	r3, r2
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	4313      	orrs	r3, r2
 800223e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f023 0307 	bic.w	r3, r3, #7
 8002256:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	4313      	orrs	r3, r2
 8002260:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	2b04      	cmp	r3, #4
 8002268:	d117      	bne.n	800229a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	4313      	orrs	r3, r2
 8002272:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00e      	beq.n	800229a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 fb01 	bl	8002884 <DMA_CheckFifoParam>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2240      	movs	r2, #64	; 0x40
 800228c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002296:	2301      	movs	r3, #1
 8002298:	e016      	b.n	80022c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 fab8 	bl	8002818 <DMA_CalcBaseAndBitshift>
 80022a8:	4603      	mov	r3, r0
 80022aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b0:	223f      	movs	r2, #63	; 0x3f
 80022b2:	409a      	lsls	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	f010803f 	.word	0xf010803f

080022d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_DMA_Start_IT+0x26>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e040      	b.n	800237c <HAL_DMA_Start_IT+0xa8>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b01      	cmp	r3, #1
 800230c:	d12f      	bne.n	800236e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2202      	movs	r2, #2
 8002312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 fa4a 	bl	80027bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232c:	223f      	movs	r2, #63	; 0x3f
 800232e:	409a      	lsls	r2, r3
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0216 	orr.w	r2, r2, #22
 8002342:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	2b00      	cmp	r3, #0
 800234a:	d007      	beq.n	800235c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0208 	orr.w	r2, r2, #8
 800235a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	e005      	b.n	800237a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002376:	2302      	movs	r3, #2
 8002378:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800237a:	7dfb      	ldrb	r3, [r7, #23]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002390:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002392:	f7ff fe03 	bl	8001f9c <HAL_GetTick>
 8002396:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d008      	beq.n	80023b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2280      	movs	r2, #128	; 0x80
 80023a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e052      	b.n	800245c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0216 	bic.w	r2, r2, #22
 80023c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	695a      	ldr	r2, [r3, #20]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d103      	bne.n	80023e6 <HAL_DMA_Abort+0x62>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d007      	beq.n	80023f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0208 	bic.w	r2, r2, #8
 80023f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0201 	bic.w	r2, r2, #1
 8002404:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002406:	e013      	b.n	8002430 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002408:	f7ff fdc8 	bl	8001f9c <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b05      	cmp	r3, #5
 8002414:	d90c      	bls.n	8002430 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2220      	movs	r2, #32
 800241a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2203      	movs	r2, #3
 8002420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e015      	b.n	800245c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1e4      	bne.n	8002408 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002442:	223f      	movs	r2, #63	; 0x3f
 8002444:	409a      	lsls	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d004      	beq.n	8002482 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2280      	movs	r2, #128	; 0x80
 800247c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e00c      	b.n	800249c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2205      	movs	r2, #5
 8002486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0201 	bic.w	r2, r2, #1
 8002498:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024b4:	4b8e      	ldr	r3, [pc, #568]	; (80026f0 <HAL_DMA_IRQHandler+0x248>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a8e      	ldr	r2, [pc, #568]	; (80026f4 <HAL_DMA_IRQHandler+0x24c>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	0a9b      	lsrs	r3, r3, #10
 80024c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d2:	2208      	movs	r2, #8
 80024d4:	409a      	lsls	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4013      	ands	r3, r2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d01a      	beq.n	8002514 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d013      	beq.n	8002514 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0204 	bic.w	r2, r2, #4
 80024fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002500:	2208      	movs	r2, #8
 8002502:	409a      	lsls	r2, r3
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250c:	f043 0201 	orr.w	r2, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002518:	2201      	movs	r2, #1
 800251a:	409a      	lsls	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4013      	ands	r3, r2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d012      	beq.n	800254a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00b      	beq.n	800254a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002536:	2201      	movs	r2, #1
 8002538:	409a      	lsls	r2, r3
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002542:	f043 0202 	orr.w	r2, r3, #2
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254e:	2204      	movs	r2, #4
 8002550:	409a      	lsls	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4013      	ands	r3, r2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d012      	beq.n	8002580 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00b      	beq.n	8002580 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256c:	2204      	movs	r2, #4
 800256e:	409a      	lsls	r2, r3
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002578:	f043 0204 	orr.w	r2, r3, #4
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002584:	2210      	movs	r2, #16
 8002586:	409a      	lsls	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4013      	ands	r3, r2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d043      	beq.n	8002618 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d03c      	beq.n	8002618 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a2:	2210      	movs	r2, #16
 80025a4:	409a      	lsls	r2, r3
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d018      	beq.n	80025ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d108      	bne.n	80025d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d024      	beq.n	8002618 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	4798      	blx	r3
 80025d6:	e01f      	b.n	8002618 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01b      	beq.n	8002618 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	4798      	blx	r3
 80025e8:	e016      	b.n	8002618 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d107      	bne.n	8002608 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0208 	bic.w	r2, r2, #8
 8002606:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261c:	2220      	movs	r2, #32
 800261e:	409a      	lsls	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4013      	ands	r3, r2
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 808f 	beq.w	8002748 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0310 	and.w	r3, r3, #16
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 8087 	beq.w	8002748 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263e:	2220      	movs	r2, #32
 8002640:	409a      	lsls	r2, r3
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b05      	cmp	r3, #5
 8002650:	d136      	bne.n	80026c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0216 	bic.w	r2, r2, #22
 8002660:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695a      	ldr	r2, [r3, #20]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002670:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	2b00      	cmp	r3, #0
 8002678:	d103      	bne.n	8002682 <HAL_DMA_IRQHandler+0x1da>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800267e:	2b00      	cmp	r3, #0
 8002680:	d007      	beq.n	8002692 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0208 	bic.w	r2, r2, #8
 8002690:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002696:	223f      	movs	r2, #63	; 0x3f
 8002698:	409a      	lsls	r2, r3
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d07e      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	4798      	blx	r3
        }
        return;
 80026be:	e079      	b.n	80027b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d01d      	beq.n	800270a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10d      	bne.n	80026f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d031      	beq.n	8002748 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	4798      	blx	r3
 80026ec:	e02c      	b.n	8002748 <HAL_DMA_IRQHandler+0x2a0>
 80026ee:	bf00      	nop
 80026f0:	20000000 	.word	0x20000000
 80026f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d023      	beq.n	8002748 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	4798      	blx	r3
 8002708:	e01e      	b.n	8002748 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10f      	bne.n	8002738 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0210 	bic.w	r2, r2, #16
 8002726:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274c:	2b00      	cmp	r3, #0
 800274e:	d032      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d022      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2205      	movs	r2, #5
 8002760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0201 	bic.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	3301      	adds	r3, #1
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	429a      	cmp	r2, r3
 800277e:	d307      	bcc.n	8002790 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f2      	bne.n	8002774 <HAL_DMA_IRQHandler+0x2cc>
 800278e:	e000      	b.n	8002792 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002790:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d005      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	4798      	blx	r3
 80027b2:	e000      	b.n	80027b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80027b4:	bf00      	nop
    }
  }
}
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
 80027c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2b40      	cmp	r3, #64	; 0x40
 80027e8:	d108      	bne.n	80027fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027fa:	e007      	b.n	800280c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	60da      	str	r2, [r3, #12]
}
 800280c:	bf00      	nop
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	3b10      	subs	r3, #16
 8002828:	4a14      	ldr	r2, [pc, #80]	; (800287c <DMA_CalcBaseAndBitshift+0x64>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	091b      	lsrs	r3, r3, #4
 8002830:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002832:	4a13      	ldr	r2, [pc, #76]	; (8002880 <DMA_CalcBaseAndBitshift+0x68>)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4413      	add	r3, r2
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2b03      	cmp	r3, #3
 8002844:	d909      	bls.n	800285a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800284e:	f023 0303 	bic.w	r3, r3, #3
 8002852:	1d1a      	adds	r2, r3, #4
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	659a      	str	r2, [r3, #88]	; 0x58
 8002858:	e007      	b.n	800286a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002862:	f023 0303 	bic.w	r3, r3, #3
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	aaaaaaab 	.word	0xaaaaaaab
 8002880:	0800b2e4 	.word	0x0800b2e4

08002884 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d11f      	bne.n	80028de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d856      	bhi.n	8002952 <DMA_CheckFifoParam+0xce>
 80028a4:	a201      	add	r2, pc, #4	; (adr r2, 80028ac <DMA_CheckFifoParam+0x28>)
 80028a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028aa:	bf00      	nop
 80028ac:	080028bd 	.word	0x080028bd
 80028b0:	080028cf 	.word	0x080028cf
 80028b4:	080028bd 	.word	0x080028bd
 80028b8:	08002953 	.word	0x08002953
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d046      	beq.n	8002956 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028cc:	e043      	b.n	8002956 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028d6:	d140      	bne.n	800295a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028dc:	e03d      	b.n	800295a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028e6:	d121      	bne.n	800292c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d837      	bhi.n	800295e <DMA_CheckFifoParam+0xda>
 80028ee:	a201      	add	r2, pc, #4	; (adr r2, 80028f4 <DMA_CheckFifoParam+0x70>)
 80028f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f4:	08002905 	.word	0x08002905
 80028f8:	0800290b 	.word	0x0800290b
 80028fc:	08002905 	.word	0x08002905
 8002900:	0800291d 	.word	0x0800291d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	73fb      	strb	r3, [r7, #15]
      break;
 8002908:	e030      	b.n	800296c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d025      	beq.n	8002962 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800291a:	e022      	b.n	8002962 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002924:	d11f      	bne.n	8002966 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800292a:	e01c      	b.n	8002966 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d903      	bls.n	800293a <DMA_CheckFifoParam+0xb6>
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2b03      	cmp	r3, #3
 8002936:	d003      	beq.n	8002940 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002938:	e018      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	73fb      	strb	r3, [r7, #15]
      break;
 800293e:	e015      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00e      	beq.n	800296a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	73fb      	strb	r3, [r7, #15]
      break;
 8002950:	e00b      	b.n	800296a <DMA_CheckFifoParam+0xe6>
      break;
 8002952:	bf00      	nop
 8002954:	e00a      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      break;
 8002956:	bf00      	nop
 8002958:	e008      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      break;
 800295a:	bf00      	nop
 800295c:	e006      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      break;
 800295e:	bf00      	nop
 8002960:	e004      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      break;
 8002962:	bf00      	nop
 8002964:	e002      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      break;   
 8002966:	bf00      	nop
 8002968:	e000      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      break;
 800296a:	bf00      	nop
    }
  } 
  
  return status; 
 800296c:	7bfb      	ldrb	r3, [r7, #15]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop

0800297c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800297c:	b480      	push	{r7}
 800297e:	b089      	sub	sp, #36	; 0x24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800298e:	2300      	movs	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
 8002996:	e165      	b.n	8002c64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002998:	2201      	movs	r2, #1
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	4013      	ands	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	f040 8154 	bne.w	8002c5e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d005      	beq.n	80029ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d130      	bne.n	8002a30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	2203      	movs	r2, #3
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a04:	2201      	movs	r2, #1
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	091b      	lsrs	r3, r3, #4
 8002a1a:	f003 0201 	and.w	r2, r3, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d017      	beq.n	8002a6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	2203      	movs	r2, #3
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d123      	bne.n	8002ac0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	08da      	lsrs	r2, r3, #3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3208      	adds	r2, #8
 8002a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	220f      	movs	r2, #15
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	08da      	lsrs	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3208      	adds	r2, #8
 8002aba:	69b9      	ldr	r1, [r7, #24]
 8002abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	2203      	movs	r2, #3
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0203 	and.w	r2, r3, #3
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80ae 	beq.w	8002c5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	4b5d      	ldr	r3, [pc, #372]	; (8002c7c <HAL_GPIO_Init+0x300>)
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	4a5c      	ldr	r2, [pc, #368]	; (8002c7c <HAL_GPIO_Init+0x300>)
 8002b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b10:	6453      	str	r3, [r2, #68]	; 0x44
 8002b12:	4b5a      	ldr	r3, [pc, #360]	; (8002c7c <HAL_GPIO_Init+0x300>)
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b1e:	4a58      	ldr	r2, [pc, #352]	; (8002c80 <HAL_GPIO_Init+0x304>)
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	089b      	lsrs	r3, r3, #2
 8002b24:	3302      	adds	r3, #2
 8002b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	220f      	movs	r2, #15
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a4f      	ldr	r2, [pc, #316]	; (8002c84 <HAL_GPIO_Init+0x308>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d025      	beq.n	8002b96 <HAL_GPIO_Init+0x21a>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a4e      	ldr	r2, [pc, #312]	; (8002c88 <HAL_GPIO_Init+0x30c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d01f      	beq.n	8002b92 <HAL_GPIO_Init+0x216>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a4d      	ldr	r2, [pc, #308]	; (8002c8c <HAL_GPIO_Init+0x310>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d019      	beq.n	8002b8e <HAL_GPIO_Init+0x212>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a4c      	ldr	r2, [pc, #304]	; (8002c90 <HAL_GPIO_Init+0x314>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d013      	beq.n	8002b8a <HAL_GPIO_Init+0x20e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a4b      	ldr	r2, [pc, #300]	; (8002c94 <HAL_GPIO_Init+0x318>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d00d      	beq.n	8002b86 <HAL_GPIO_Init+0x20a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4a      	ldr	r2, [pc, #296]	; (8002c98 <HAL_GPIO_Init+0x31c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d007      	beq.n	8002b82 <HAL_GPIO_Init+0x206>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a49      	ldr	r2, [pc, #292]	; (8002c9c <HAL_GPIO_Init+0x320>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d101      	bne.n	8002b7e <HAL_GPIO_Init+0x202>
 8002b7a:	2306      	movs	r3, #6
 8002b7c:	e00c      	b.n	8002b98 <HAL_GPIO_Init+0x21c>
 8002b7e:	2307      	movs	r3, #7
 8002b80:	e00a      	b.n	8002b98 <HAL_GPIO_Init+0x21c>
 8002b82:	2305      	movs	r3, #5
 8002b84:	e008      	b.n	8002b98 <HAL_GPIO_Init+0x21c>
 8002b86:	2304      	movs	r3, #4
 8002b88:	e006      	b.n	8002b98 <HAL_GPIO_Init+0x21c>
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e004      	b.n	8002b98 <HAL_GPIO_Init+0x21c>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e002      	b.n	8002b98 <HAL_GPIO_Init+0x21c>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_GPIO_Init+0x21c>
 8002b96:	2300      	movs	r3, #0
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	f002 0203 	and.w	r2, r2, #3
 8002b9e:	0092      	lsls	r2, r2, #2
 8002ba0:	4093      	lsls	r3, r2
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ba8:	4935      	ldr	r1, [pc, #212]	; (8002c80 <HAL_GPIO_Init+0x304>)
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	089b      	lsrs	r3, r3, #2
 8002bae:	3302      	adds	r3, #2
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bb6:	4b3a      	ldr	r3, [pc, #232]	; (8002ca0 <HAL_GPIO_Init+0x324>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bda:	4a31      	ldr	r2, [pc, #196]	; (8002ca0 <HAL_GPIO_Init+0x324>)
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002be0:	4b2f      	ldr	r3, [pc, #188]	; (8002ca0 <HAL_GPIO_Init+0x324>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c04:	4a26      	ldr	r2, [pc, #152]	; (8002ca0 <HAL_GPIO_Init+0x324>)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c0a:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <HAL_GPIO_Init+0x324>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	43db      	mvns	r3, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4013      	ands	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c2e:	4a1c      	ldr	r2, [pc, #112]	; (8002ca0 <HAL_GPIO_Init+0x324>)
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c34:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <HAL_GPIO_Init+0x324>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c58:	4a11      	ldr	r2, [pc, #68]	; (8002ca0 <HAL_GPIO_Init+0x324>)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	3301      	adds	r3, #1
 8002c62:	61fb      	str	r3, [r7, #28]
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	2b0f      	cmp	r3, #15
 8002c68:	f67f ae96 	bls.w	8002998 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	bf00      	nop
 8002c70:	3724      	adds	r7, #36	; 0x24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	40013800 	.word	0x40013800
 8002c84:	40020000 	.word	0x40020000
 8002c88:	40020400 	.word	0x40020400
 8002c8c:	40020800 	.word	0x40020800
 8002c90:	40020c00 	.word	0x40020c00
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40021400 	.word	0x40021400
 8002c9c:	40021800 	.word	0x40021800
 8002ca0:	40013c00 	.word	0x40013c00

08002ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	807b      	strh	r3, [r7, #2]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cb4:	787b      	ldrb	r3, [r7, #1]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cba:	887a      	ldrh	r2, [r7, #2]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cc0:	e003      	b.n	8002cca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cc2:	887b      	ldrh	r3, [r7, #2]
 8002cc4:	041a      	lsls	r2, r3, #16
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	619a      	str	r2, [r3, #24]
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b085      	sub	sp, #20
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	460b      	mov	r3, r1
 8002ce0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ce8:	887a      	ldrh	r2, [r7, #2]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4013      	ands	r3, r2
 8002cee:	041a      	lsls	r2, r3, #16
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	43d9      	mvns	r1, r3
 8002cf4:	887b      	ldrh	r3, [r7, #2]
 8002cf6:	400b      	ands	r3, r1
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	619a      	str	r2, [r3, #24]
}
 8002cfe:	bf00      	nop
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
	...

08002d0c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	603b      	str	r3, [r7, #0]
 8002d1a:	4b20      	ldr	r3, [pc, #128]	; (8002d9c <HAL_PWREx_EnableOverDrive+0x90>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	4a1f      	ldr	r2, [pc, #124]	; (8002d9c <HAL_PWREx_EnableOverDrive+0x90>)
 8002d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d24:	6413      	str	r3, [r2, #64]	; 0x40
 8002d26:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <HAL_PWREx_EnableOverDrive+0x90>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002d32:	4b1b      	ldr	r3, [pc, #108]	; (8002da0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002d34:	2201      	movs	r2, #1
 8002d36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d38:	f7ff f930 	bl	8001f9c <HAL_GetTick>
 8002d3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d3e:	e009      	b.n	8002d54 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d40:	f7ff f92c 	bl	8001f9c <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d4e:	d901      	bls.n	8002d54 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e01f      	b.n	8002d94 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d54:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d60:	d1ee      	bne.n	8002d40 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d62:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d68:	f7ff f918 	bl	8001f9c <HAL_GetTick>
 8002d6c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d6e:	e009      	b.n	8002d84 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d70:	f7ff f914 	bl	8001f9c <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d7e:	d901      	bls.n	8002d84 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e007      	b.n	8002d94 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d84:	4b07      	ldr	r3, [pc, #28]	; (8002da4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d90:	d1ee      	bne.n	8002d70 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	420e0040 	.word	0x420e0040
 8002da4:	40007000 	.word	0x40007000
 8002da8:	420e0044 	.word	0x420e0044

08002dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0cc      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc0:	4b68      	ldr	r3, [pc, #416]	; (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d90c      	bls.n	8002de8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dce:	4b65      	ldr	r3, [pc, #404]	; (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd6:	4b63      	ldr	r3, [pc, #396]	; (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0b8      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d020      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e00:	4b59      	ldr	r3, [pc, #356]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	4a58      	ldr	r2, [pc, #352]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e18:	4b53      	ldr	r3, [pc, #332]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	4a52      	ldr	r2, [pc, #328]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e24:	4b50      	ldr	r3, [pc, #320]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	494d      	ldr	r1, [pc, #308]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d044      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d107      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4a:	4b47      	ldr	r3, [pc, #284]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d119      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e07f      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d003      	beq.n	8002e6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d107      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6a:	4b3f      	ldr	r3, [pc, #252]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d109      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e06f      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7a:	4b3b      	ldr	r3, [pc, #236]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e067      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e8a:	4b37      	ldr	r3, [pc, #220]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f023 0203 	bic.w	r2, r3, #3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	4934      	ldr	r1, [pc, #208]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e9c:	f7ff f87e 	bl	8001f9c <HAL_GetTick>
 8002ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea2:	e00a      	b.n	8002eba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea4:	f7ff f87a 	bl	8001f9c <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e04f      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eba:	4b2b      	ldr	r3, [pc, #172]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 020c 	and.w	r2, r3, #12
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d1eb      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ecc:	4b25      	ldr	r3, [pc, #148]	; (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d20c      	bcs.n	8002ef4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eda:	4b22      	ldr	r3, [pc, #136]	; (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee2:	4b20      	ldr	r3, [pc, #128]	; (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e032      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d008      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f00:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	4916      	ldr	r1, [pc, #88]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d009      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f1e:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	490e      	ldr	r1, [pc, #56]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f32:	f000 f887 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 8002f36:	4602      	mov	r2, r0
 8002f38:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	490a      	ldr	r1, [pc, #40]	; (8002f6c <HAL_RCC_ClockConfig+0x1c0>)
 8002f44:	5ccb      	ldrb	r3, [r1, r3]
 8002f46:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4a:	4a09      	ldr	r2, [pc, #36]	; (8002f70 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f4e:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <HAL_RCC_ClockConfig+0x1c8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fe f920 	bl	8001198 <HAL_InitTick>

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40023c00 	.word	0x40023c00
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	0800b284 	.word	0x0800b284
 8002f70:	20000000 	.word	0x20000000
 8002f74:	20000008 	.word	0x20000008

08002f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f7c:	4b03      	ldr	r3, [pc, #12]	; (8002f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	20000000 	.word	0x20000000

08002f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f94:	f7ff fff0 	bl	8002f78 <HAL_RCC_GetHCLKFreq>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	0a9b      	lsrs	r3, r3, #10
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	4903      	ldr	r1, [pc, #12]	; (8002fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fa6:	5ccb      	ldrb	r3, [r1, r3]
 8002fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	0800b294 	.word	0x0800b294

08002fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fbc:	f7ff ffdc 	bl	8002f78 <HAL_RCC_GetHCLKFreq>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	0b5b      	lsrs	r3, r3, #13
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	4903      	ldr	r1, [pc, #12]	; (8002fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fce:	5ccb      	ldrb	r3, [r1, r3]
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	0800b294 	.word	0x0800b294

08002fe0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	220f      	movs	r2, #15
 8002fee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ff0:	4b12      	ldr	r3, [pc, #72]	; (800303c <HAL_RCC_GetClockConfig+0x5c>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 0203 	and.w	r2, r3, #3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	; (800303c <HAL_RCC_GetClockConfig+0x5c>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <HAL_RCC_GetClockConfig+0x5c>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003014:	4b09      	ldr	r3, [pc, #36]	; (800303c <HAL_RCC_GetClockConfig+0x5c>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	08db      	lsrs	r3, r3, #3
 800301a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003022:	4b07      	ldr	r3, [pc, #28]	; (8003040 <HAL_RCC_GetClockConfig+0x60>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 020f 	and.w	r2, r3, #15
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	601a      	str	r2, [r3, #0]
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40023800 	.word	0x40023800
 8003040:	40023c00 	.word	0x40023c00

08003044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003048:	b0ae      	sub	sp, #184	; 0xb8
 800304a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003052:	2300      	movs	r3, #0
 8003054:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800305e:	2300      	movs	r3, #0
 8003060:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800306a:	4bcb      	ldr	r3, [pc, #812]	; (8003398 <HAL_RCC_GetSysClockFreq+0x354>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
 8003072:	2b0c      	cmp	r3, #12
 8003074:	f200 8206 	bhi.w	8003484 <HAL_RCC_GetSysClockFreq+0x440>
 8003078:	a201      	add	r2, pc, #4	; (adr r2, 8003080 <HAL_RCC_GetSysClockFreq+0x3c>)
 800307a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307e:	bf00      	nop
 8003080:	080030b5 	.word	0x080030b5
 8003084:	08003485 	.word	0x08003485
 8003088:	08003485 	.word	0x08003485
 800308c:	08003485 	.word	0x08003485
 8003090:	080030bd 	.word	0x080030bd
 8003094:	08003485 	.word	0x08003485
 8003098:	08003485 	.word	0x08003485
 800309c:	08003485 	.word	0x08003485
 80030a0:	080030c5 	.word	0x080030c5
 80030a4:	08003485 	.word	0x08003485
 80030a8:	08003485 	.word	0x08003485
 80030ac:	08003485 	.word	0x08003485
 80030b0:	080032b5 	.word	0x080032b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030b4:	4bb9      	ldr	r3, [pc, #740]	; (800339c <HAL_RCC_GetSysClockFreq+0x358>)
 80030b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80030ba:	e1e7      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030bc:	4bb8      	ldr	r3, [pc, #736]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80030be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030c2:	e1e3      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030c4:	4bb4      	ldr	r3, [pc, #720]	; (8003398 <HAL_RCC_GetSysClockFreq+0x354>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030d0:	4bb1      	ldr	r3, [pc, #708]	; (8003398 <HAL_RCC_GetSysClockFreq+0x354>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d071      	beq.n	80031c0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030dc:	4bae      	ldr	r3, [pc, #696]	; (8003398 <HAL_RCC_GetSysClockFreq+0x354>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	099b      	lsrs	r3, r3, #6
 80030e2:	2200      	movs	r2, #0
 80030e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030e8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80030ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030f8:	2300      	movs	r3, #0
 80030fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003102:	4622      	mov	r2, r4
 8003104:	462b      	mov	r3, r5
 8003106:	f04f 0000 	mov.w	r0, #0
 800310a:	f04f 0100 	mov.w	r1, #0
 800310e:	0159      	lsls	r1, r3, #5
 8003110:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003114:	0150      	lsls	r0, r2, #5
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4621      	mov	r1, r4
 800311c:	1a51      	subs	r1, r2, r1
 800311e:	6439      	str	r1, [r7, #64]	; 0x40
 8003120:	4629      	mov	r1, r5
 8003122:	eb63 0301 	sbc.w	r3, r3, r1
 8003126:	647b      	str	r3, [r7, #68]	; 0x44
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003134:	4649      	mov	r1, r9
 8003136:	018b      	lsls	r3, r1, #6
 8003138:	4641      	mov	r1, r8
 800313a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800313e:	4641      	mov	r1, r8
 8003140:	018a      	lsls	r2, r1, #6
 8003142:	4641      	mov	r1, r8
 8003144:	1a51      	subs	r1, r2, r1
 8003146:	63b9      	str	r1, [r7, #56]	; 0x38
 8003148:	4649      	mov	r1, r9
 800314a:	eb63 0301 	sbc.w	r3, r3, r1
 800314e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800315c:	4649      	mov	r1, r9
 800315e:	00cb      	lsls	r3, r1, #3
 8003160:	4641      	mov	r1, r8
 8003162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003166:	4641      	mov	r1, r8
 8003168:	00ca      	lsls	r2, r1, #3
 800316a:	4610      	mov	r0, r2
 800316c:	4619      	mov	r1, r3
 800316e:	4603      	mov	r3, r0
 8003170:	4622      	mov	r2, r4
 8003172:	189b      	adds	r3, r3, r2
 8003174:	633b      	str	r3, [r7, #48]	; 0x30
 8003176:	462b      	mov	r3, r5
 8003178:	460a      	mov	r2, r1
 800317a:	eb42 0303 	adc.w	r3, r2, r3
 800317e:	637b      	str	r3, [r7, #52]	; 0x34
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800318c:	4629      	mov	r1, r5
 800318e:	024b      	lsls	r3, r1, #9
 8003190:	4621      	mov	r1, r4
 8003192:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003196:	4621      	mov	r1, r4
 8003198:	024a      	lsls	r2, r1, #9
 800319a:	4610      	mov	r0, r2
 800319c:	4619      	mov	r1, r3
 800319e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031a2:	2200      	movs	r2, #0
 80031a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031ac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80031b0:	f7fd fc7c 	bl	8000aac <__aeabi_uldivmod>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4613      	mov	r3, r2
 80031ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031be:	e067      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c0:	4b75      	ldr	r3, [pc, #468]	; (8003398 <HAL_RCC_GetSysClockFreq+0x354>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	099b      	lsrs	r3, r3, #6
 80031c6:	2200      	movs	r2, #0
 80031c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031cc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80031d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80031da:	2300      	movs	r3, #0
 80031dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80031de:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80031e2:	4622      	mov	r2, r4
 80031e4:	462b      	mov	r3, r5
 80031e6:	f04f 0000 	mov.w	r0, #0
 80031ea:	f04f 0100 	mov.w	r1, #0
 80031ee:	0159      	lsls	r1, r3, #5
 80031f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031f4:	0150      	lsls	r0, r2, #5
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4621      	mov	r1, r4
 80031fc:	1a51      	subs	r1, r2, r1
 80031fe:	62b9      	str	r1, [r7, #40]	; 0x28
 8003200:	4629      	mov	r1, r5
 8003202:	eb63 0301 	sbc.w	r3, r3, r1
 8003206:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003214:	4649      	mov	r1, r9
 8003216:	018b      	lsls	r3, r1, #6
 8003218:	4641      	mov	r1, r8
 800321a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800321e:	4641      	mov	r1, r8
 8003220:	018a      	lsls	r2, r1, #6
 8003222:	4641      	mov	r1, r8
 8003224:	ebb2 0a01 	subs.w	sl, r2, r1
 8003228:	4649      	mov	r1, r9
 800322a:	eb63 0b01 	sbc.w	fp, r3, r1
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800323a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800323e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003242:	4692      	mov	sl, r2
 8003244:	469b      	mov	fp, r3
 8003246:	4623      	mov	r3, r4
 8003248:	eb1a 0303 	adds.w	r3, sl, r3
 800324c:	623b      	str	r3, [r7, #32]
 800324e:	462b      	mov	r3, r5
 8003250:	eb4b 0303 	adc.w	r3, fp, r3
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003262:	4629      	mov	r1, r5
 8003264:	028b      	lsls	r3, r1, #10
 8003266:	4621      	mov	r1, r4
 8003268:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800326c:	4621      	mov	r1, r4
 800326e:	028a      	lsls	r2, r1, #10
 8003270:	4610      	mov	r0, r2
 8003272:	4619      	mov	r1, r3
 8003274:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003278:	2200      	movs	r2, #0
 800327a:	673b      	str	r3, [r7, #112]	; 0x70
 800327c:	677a      	str	r2, [r7, #116]	; 0x74
 800327e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003282:	f7fd fc13 	bl	8000aac <__aeabi_uldivmod>
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	4613      	mov	r3, r2
 800328c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003290:	4b41      	ldr	r3, [pc, #260]	; (8003398 <HAL_RCC_GetSysClockFreq+0x354>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	0c1b      	lsrs	r3, r3, #16
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	3301      	adds	r3, #1
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80032a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032b2:	e0eb      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032b4:	4b38      	ldr	r3, [pc, #224]	; (8003398 <HAL_RCC_GetSysClockFreq+0x354>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032c0:	4b35      	ldr	r3, [pc, #212]	; (8003398 <HAL_RCC_GetSysClockFreq+0x354>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d06b      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032cc:	4b32      	ldr	r3, [pc, #200]	; (8003398 <HAL_RCC_GetSysClockFreq+0x354>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	099b      	lsrs	r3, r3, #6
 80032d2:	2200      	movs	r2, #0
 80032d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80032d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032de:	663b      	str	r3, [r7, #96]	; 0x60
 80032e0:	2300      	movs	r3, #0
 80032e2:	667b      	str	r3, [r7, #100]	; 0x64
 80032e4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80032e8:	4622      	mov	r2, r4
 80032ea:	462b      	mov	r3, r5
 80032ec:	f04f 0000 	mov.w	r0, #0
 80032f0:	f04f 0100 	mov.w	r1, #0
 80032f4:	0159      	lsls	r1, r3, #5
 80032f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032fa:	0150      	lsls	r0, r2, #5
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4621      	mov	r1, r4
 8003302:	1a51      	subs	r1, r2, r1
 8003304:	61b9      	str	r1, [r7, #24]
 8003306:	4629      	mov	r1, r5
 8003308:	eb63 0301 	sbc.w	r3, r3, r1
 800330c:	61fb      	str	r3, [r7, #28]
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800331a:	4659      	mov	r1, fp
 800331c:	018b      	lsls	r3, r1, #6
 800331e:	4651      	mov	r1, sl
 8003320:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003324:	4651      	mov	r1, sl
 8003326:	018a      	lsls	r2, r1, #6
 8003328:	4651      	mov	r1, sl
 800332a:	ebb2 0801 	subs.w	r8, r2, r1
 800332e:	4659      	mov	r1, fp
 8003330:	eb63 0901 	sbc.w	r9, r3, r1
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003340:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003344:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003348:	4690      	mov	r8, r2
 800334a:	4699      	mov	r9, r3
 800334c:	4623      	mov	r3, r4
 800334e:	eb18 0303 	adds.w	r3, r8, r3
 8003352:	613b      	str	r3, [r7, #16]
 8003354:	462b      	mov	r3, r5
 8003356:	eb49 0303 	adc.w	r3, r9, r3
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003368:	4629      	mov	r1, r5
 800336a:	024b      	lsls	r3, r1, #9
 800336c:	4621      	mov	r1, r4
 800336e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003372:	4621      	mov	r1, r4
 8003374:	024a      	lsls	r2, r1, #9
 8003376:	4610      	mov	r0, r2
 8003378:	4619      	mov	r1, r3
 800337a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800337e:	2200      	movs	r2, #0
 8003380:	65bb      	str	r3, [r7, #88]	; 0x58
 8003382:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003384:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003388:	f7fd fb90 	bl	8000aac <__aeabi_uldivmod>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4613      	mov	r3, r2
 8003392:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003396:	e065      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x420>
 8003398:	40023800 	.word	0x40023800
 800339c:	00f42400 	.word	0x00f42400
 80033a0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a4:	4b3d      	ldr	r3, [pc, #244]	; (800349c <HAL_RCC_GetSysClockFreq+0x458>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	099b      	lsrs	r3, r3, #6
 80033aa:	2200      	movs	r2, #0
 80033ac:	4618      	mov	r0, r3
 80033ae:	4611      	mov	r1, r2
 80033b0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033b4:	653b      	str	r3, [r7, #80]	; 0x50
 80033b6:	2300      	movs	r3, #0
 80033b8:	657b      	str	r3, [r7, #84]	; 0x54
 80033ba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80033be:	4642      	mov	r2, r8
 80033c0:	464b      	mov	r3, r9
 80033c2:	f04f 0000 	mov.w	r0, #0
 80033c6:	f04f 0100 	mov.w	r1, #0
 80033ca:	0159      	lsls	r1, r3, #5
 80033cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033d0:	0150      	lsls	r0, r2, #5
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	4641      	mov	r1, r8
 80033d8:	1a51      	subs	r1, r2, r1
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	4649      	mov	r1, r9
 80033de:	eb63 0301 	sbc.w	r3, r3, r1
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80033f0:	4659      	mov	r1, fp
 80033f2:	018b      	lsls	r3, r1, #6
 80033f4:	4651      	mov	r1, sl
 80033f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033fa:	4651      	mov	r1, sl
 80033fc:	018a      	lsls	r2, r1, #6
 80033fe:	4651      	mov	r1, sl
 8003400:	1a54      	subs	r4, r2, r1
 8003402:	4659      	mov	r1, fp
 8003404:	eb63 0501 	sbc.w	r5, r3, r1
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	00eb      	lsls	r3, r5, #3
 8003412:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003416:	00e2      	lsls	r2, r4, #3
 8003418:	4614      	mov	r4, r2
 800341a:	461d      	mov	r5, r3
 800341c:	4643      	mov	r3, r8
 800341e:	18e3      	adds	r3, r4, r3
 8003420:	603b      	str	r3, [r7, #0]
 8003422:	464b      	mov	r3, r9
 8003424:	eb45 0303 	adc.w	r3, r5, r3
 8003428:	607b      	str	r3, [r7, #4]
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	f04f 0300 	mov.w	r3, #0
 8003432:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003436:	4629      	mov	r1, r5
 8003438:	028b      	lsls	r3, r1, #10
 800343a:	4621      	mov	r1, r4
 800343c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003440:	4621      	mov	r1, r4
 8003442:	028a      	lsls	r2, r1, #10
 8003444:	4610      	mov	r0, r2
 8003446:	4619      	mov	r1, r3
 8003448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800344c:	2200      	movs	r2, #0
 800344e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003450:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003452:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003456:	f7fd fb29 	bl	8000aac <__aeabi_uldivmod>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	4613      	mov	r3, r2
 8003460:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003464:	4b0d      	ldr	r3, [pc, #52]	; (800349c <HAL_RCC_GetSysClockFreq+0x458>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	0f1b      	lsrs	r3, r3, #28
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003472:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003476:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800347a:	fbb2 f3f3 	udiv	r3, r2, r3
 800347e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003482:	e003      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003486:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800348a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800348c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003490:	4618      	mov	r0, r3
 8003492:	37b8      	adds	r7, #184	; 0xb8
 8003494:	46bd      	mov	sp, r7
 8003496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800349a:	bf00      	nop
 800349c:	40023800 	.word	0x40023800
 80034a0:	00f42400 	.word	0x00f42400

080034a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e28d      	b.n	80039d2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 8083 	beq.w	80035ca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80034c4:	4b94      	ldr	r3, [pc, #592]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 030c 	and.w	r3, r3, #12
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d019      	beq.n	8003504 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034d0:	4b91      	ldr	r3, [pc, #580]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d106      	bne.n	80034ea <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034dc:	4b8e      	ldr	r3, [pc, #568]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034e8:	d00c      	beq.n	8003504 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ea:	4b8b      	ldr	r3, [pc, #556]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034f2:	2b0c      	cmp	r3, #12
 80034f4:	d112      	bne.n	800351c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034f6:	4b88      	ldr	r3, [pc, #544]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003502:	d10b      	bne.n	800351c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003504:	4b84      	ldr	r3, [pc, #528]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d05b      	beq.n	80035c8 <HAL_RCC_OscConfig+0x124>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d157      	bne.n	80035c8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e25a      	b.n	80039d2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003524:	d106      	bne.n	8003534 <HAL_RCC_OscConfig+0x90>
 8003526:	4b7c      	ldr	r3, [pc, #496]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a7b      	ldr	r2, [pc, #492]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 800352c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	e01d      	b.n	8003570 <HAL_RCC_OscConfig+0xcc>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800353c:	d10c      	bne.n	8003558 <HAL_RCC_OscConfig+0xb4>
 800353e:	4b76      	ldr	r3, [pc, #472]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a75      	ldr	r2, [pc, #468]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 8003544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	4b73      	ldr	r3, [pc, #460]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a72      	ldr	r2, [pc, #456]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 8003550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	e00b      	b.n	8003570 <HAL_RCC_OscConfig+0xcc>
 8003558:	4b6f      	ldr	r3, [pc, #444]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a6e      	ldr	r2, [pc, #440]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 800355e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	4b6c      	ldr	r3, [pc, #432]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a6b      	ldr	r2, [pc, #428]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 800356a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800356e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d013      	beq.n	80035a0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003578:	f7fe fd10 	bl	8001f9c <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003580:	f7fe fd0c 	bl	8001f9c <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b64      	cmp	r3, #100	; 0x64
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e21f      	b.n	80039d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003592:	4b61      	ldr	r3, [pc, #388]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0xdc>
 800359e:	e014      	b.n	80035ca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fe fcfc 	bl	8001f9c <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035a8:	f7fe fcf8 	bl	8001f9c <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	; 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e20b      	b.n	80039d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ba:	4b57      	ldr	r3, [pc, #348]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0x104>
 80035c6:	e000      	b.n	80035ca <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d06f      	beq.n	80036b6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80035d6:	4b50      	ldr	r3, [pc, #320]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 030c 	and.w	r3, r3, #12
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d017      	beq.n	8003612 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035e2:	4b4d      	ldr	r3, [pc, #308]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d105      	bne.n	80035fa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035ee:	4b4a      	ldr	r3, [pc, #296]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00b      	beq.n	8003612 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035fa:	4b47      	ldr	r3, [pc, #284]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003602:	2b0c      	cmp	r3, #12
 8003604:	d11c      	bne.n	8003640 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003606:	4b44      	ldr	r3, [pc, #272]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d116      	bne.n	8003640 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003612:	4b41      	ldr	r3, [pc, #260]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d005      	beq.n	800362a <HAL_RCC_OscConfig+0x186>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d001      	beq.n	800362a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e1d3      	b.n	80039d2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362a:	4b3b      	ldr	r3, [pc, #236]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4937      	ldr	r1, [pc, #220]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 800363a:	4313      	orrs	r3, r2
 800363c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363e:	e03a      	b.n	80036b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d020      	beq.n	800368a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003648:	4b34      	ldr	r3, [pc, #208]	; (800371c <HAL_RCC_OscConfig+0x278>)
 800364a:	2201      	movs	r2, #1
 800364c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364e:	f7fe fca5 	bl	8001f9c <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003656:	f7fe fca1 	bl	8001f9c <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e1b4      	b.n	80039d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003668:	4b2b      	ldr	r3, [pc, #172]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003674:	4b28      	ldr	r3, [pc, #160]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	4925      	ldr	r1, [pc, #148]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 8003684:	4313      	orrs	r3, r2
 8003686:	600b      	str	r3, [r1, #0]
 8003688:	e015      	b.n	80036b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800368a:	4b24      	ldr	r3, [pc, #144]	; (800371c <HAL_RCC_OscConfig+0x278>)
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003690:	f7fe fc84 	bl	8001f9c <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003698:	f7fe fc80 	bl	8001f9c <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e193      	b.n	80039d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036aa:	4b1b      	ldr	r3, [pc, #108]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d036      	beq.n	8003730 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d016      	beq.n	80036f8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ca:	4b15      	ldr	r3, [pc, #84]	; (8003720 <HAL_RCC_OscConfig+0x27c>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d0:	f7fe fc64 	bl	8001f9c <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036d8:	f7fe fc60 	bl	8001f9c <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e173      	b.n	80039d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ea:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <HAL_RCC_OscConfig+0x274>)
 80036ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCC_OscConfig+0x234>
 80036f6:	e01b      	b.n	8003730 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036f8:	4b09      	ldr	r3, [pc, #36]	; (8003720 <HAL_RCC_OscConfig+0x27c>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fe:	f7fe fc4d 	bl	8001f9c <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003704:	e00e      	b.n	8003724 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003706:	f7fe fc49 	bl	8001f9c <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d907      	bls.n	8003724 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e15c      	b.n	80039d2 <HAL_RCC_OscConfig+0x52e>
 8003718:	40023800 	.word	0x40023800
 800371c:	42470000 	.word	0x42470000
 8003720:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003724:	4b8a      	ldr	r3, [pc, #552]	; (8003950 <HAL_RCC_OscConfig+0x4ac>)
 8003726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1ea      	bne.n	8003706 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 8097 	beq.w	800386c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800373e:	2300      	movs	r3, #0
 8003740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003742:	4b83      	ldr	r3, [pc, #524]	; (8003950 <HAL_RCC_OscConfig+0x4ac>)
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10f      	bne.n	800376e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	4b7f      	ldr	r3, [pc, #508]	; (8003950 <HAL_RCC_OscConfig+0x4ac>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	4a7e      	ldr	r2, [pc, #504]	; (8003950 <HAL_RCC_OscConfig+0x4ac>)
 8003758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375c:	6413      	str	r3, [r2, #64]	; 0x40
 800375e:	4b7c      	ldr	r3, [pc, #496]	; (8003950 <HAL_RCC_OscConfig+0x4ac>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800376a:	2301      	movs	r3, #1
 800376c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376e:	4b79      	ldr	r3, [pc, #484]	; (8003954 <HAL_RCC_OscConfig+0x4b0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003776:	2b00      	cmp	r3, #0
 8003778:	d118      	bne.n	80037ac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800377a:	4b76      	ldr	r3, [pc, #472]	; (8003954 <HAL_RCC_OscConfig+0x4b0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a75      	ldr	r2, [pc, #468]	; (8003954 <HAL_RCC_OscConfig+0x4b0>)
 8003780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003786:	f7fe fc09 	bl	8001f9c <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800378e:	f7fe fc05 	bl	8001f9c <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e118      	b.n	80039d2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a0:	4b6c      	ldr	r3, [pc, #432]	; (8003954 <HAL_RCC_OscConfig+0x4b0>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0f0      	beq.n	800378e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d106      	bne.n	80037c2 <HAL_RCC_OscConfig+0x31e>
 80037b4:	4b66      	ldr	r3, [pc, #408]	; (8003950 <HAL_RCC_OscConfig+0x4ac>)
 80037b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b8:	4a65      	ldr	r2, [pc, #404]	; (8003950 <HAL_RCC_OscConfig+0x4ac>)
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	6713      	str	r3, [r2, #112]	; 0x70
 80037c0:	e01c      	b.n	80037fc <HAL_RCC_OscConfig+0x358>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b05      	cmp	r3, #5
 80037c8:	d10c      	bne.n	80037e4 <HAL_RCC_OscConfig+0x340>
 80037ca:	4b61      	ldr	r3, [pc, #388]	; (8003950 <HAL_RCC_OscConfig+0x4ac>)
 80037cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ce:	4a60      	ldr	r2, [pc, #384]	; (8003950 <HAL_RCC_OscConfig+0x4ac>)
 80037d0:	f043 0304 	orr.w	r3, r3, #4
 80037d4:	6713      	str	r3, [r2, #112]	; 0x70
 80037d6:	4b5e      	ldr	r3, [pc, #376]	; (8003950 <HAL_RCC_OscConfig+0x4ac>)
 80037d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037da:	4a5d      	ldr	r2, [pc, #372]	; (8003950 <HAL_RCC_OscConfig+0x4ac>)
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	6713      	str	r3, [r2, #112]	; 0x70
 80037e2:	e00b      	b.n	80037fc <HAL_RCC_OscConfig+0x358>
 80037e4:	4b5a      	ldr	r3, [pc, #360]	; (8003950 <HAL_RCC_OscConfig+0x4ac>)
 80037e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e8:	4a59      	ldr	r2, [pc, #356]	; (8003950 <HAL_RCC_OscConfig+0x4ac>)
 80037ea:	f023 0301 	bic.w	r3, r3, #1
 80037ee:	6713      	str	r3, [r2, #112]	; 0x70
 80037f0:	4b57      	ldr	r3, [pc, #348]	; (8003950 <HAL_RCC_OscConfig+0x4ac>)
 80037f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f4:	4a56      	ldr	r2, [pc, #344]	; (8003950 <HAL_RCC_OscConfig+0x4ac>)
 80037f6:	f023 0304 	bic.w	r3, r3, #4
 80037fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d015      	beq.n	8003830 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003804:	f7fe fbca 	bl	8001f9c <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380a:	e00a      	b.n	8003822 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800380c:	f7fe fbc6 	bl	8001f9c <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f241 3288 	movw	r2, #5000	; 0x1388
 800381a:	4293      	cmp	r3, r2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e0d7      	b.n	80039d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003822:	4b4b      	ldr	r3, [pc, #300]	; (8003950 <HAL_RCC_OscConfig+0x4ac>)
 8003824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0ee      	beq.n	800380c <HAL_RCC_OscConfig+0x368>
 800382e:	e014      	b.n	800385a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003830:	f7fe fbb4 	bl	8001f9c <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003836:	e00a      	b.n	800384e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003838:	f7fe fbb0 	bl	8001f9c <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	f241 3288 	movw	r2, #5000	; 0x1388
 8003846:	4293      	cmp	r3, r2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e0c1      	b.n	80039d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384e:	4b40      	ldr	r3, [pc, #256]	; (8003950 <HAL_RCC_OscConfig+0x4ac>)
 8003850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1ee      	bne.n	8003838 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800385a:	7dfb      	ldrb	r3, [r7, #23]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d105      	bne.n	800386c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003860:	4b3b      	ldr	r3, [pc, #236]	; (8003950 <HAL_RCC_OscConfig+0x4ac>)
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	4a3a      	ldr	r2, [pc, #232]	; (8003950 <HAL_RCC_OscConfig+0x4ac>)
 8003866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800386a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 80ad 	beq.w	80039d0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003876:	4b36      	ldr	r3, [pc, #216]	; (8003950 <HAL_RCC_OscConfig+0x4ac>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 030c 	and.w	r3, r3, #12
 800387e:	2b08      	cmp	r3, #8
 8003880:	d060      	beq.n	8003944 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d145      	bne.n	8003916 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800388a:	4b33      	ldr	r3, [pc, #204]	; (8003958 <HAL_RCC_OscConfig+0x4b4>)
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003890:	f7fe fb84 	bl	8001f9c <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003898:	f7fe fb80 	bl	8001f9c <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e093      	b.n	80039d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038aa:	4b29      	ldr	r3, [pc, #164]	; (8003950 <HAL_RCC_OscConfig+0x4ac>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f0      	bne.n	8003898 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69da      	ldr	r2, [r3, #28]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	019b      	lsls	r3, r3, #6
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038cc:	085b      	lsrs	r3, r3, #1
 80038ce:	3b01      	subs	r3, #1
 80038d0:	041b      	lsls	r3, r3, #16
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	061b      	lsls	r3, r3, #24
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e0:	071b      	lsls	r3, r3, #28
 80038e2:	491b      	ldr	r1, [pc, #108]	; (8003950 <HAL_RCC_OscConfig+0x4ac>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e8:	4b1b      	ldr	r3, [pc, #108]	; (8003958 <HAL_RCC_OscConfig+0x4b4>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ee:	f7fe fb55 	bl	8001f9c <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f6:	f7fe fb51 	bl	8001f9c <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e064      	b.n	80039d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003908:	4b11      	ldr	r3, [pc, #68]	; (8003950 <HAL_RCC_OscConfig+0x4ac>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0f0      	beq.n	80038f6 <HAL_RCC_OscConfig+0x452>
 8003914:	e05c      	b.n	80039d0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003916:	4b10      	ldr	r3, [pc, #64]	; (8003958 <HAL_RCC_OscConfig+0x4b4>)
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391c:	f7fe fb3e 	bl	8001f9c <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003924:	f7fe fb3a 	bl	8001f9c <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e04d      	b.n	80039d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003936:	4b06      	ldr	r3, [pc, #24]	; (8003950 <HAL_RCC_OscConfig+0x4ac>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_OscConfig+0x480>
 8003942:	e045      	b.n	80039d0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d107      	bne.n	800395c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e040      	b.n	80039d2 <HAL_RCC_OscConfig+0x52e>
 8003950:	40023800 	.word	0x40023800
 8003954:	40007000 	.word	0x40007000
 8003958:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800395c:	4b1f      	ldr	r3, [pc, #124]	; (80039dc <HAL_RCC_OscConfig+0x538>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d030      	beq.n	80039cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003974:	429a      	cmp	r2, r3
 8003976:	d129      	bne.n	80039cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003982:	429a      	cmp	r2, r3
 8003984:	d122      	bne.n	80039cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800398c:	4013      	ands	r3, r2
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003992:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003994:	4293      	cmp	r3, r2
 8003996:	d119      	bne.n	80039cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a2:	085b      	lsrs	r3, r3, #1
 80039a4:	3b01      	subs	r3, #1
 80039a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d10f      	bne.n	80039cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d107      	bne.n	80039cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d001      	beq.n	80039d0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40023800 	.word	0x40023800

080039e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e041      	b.n	8003a76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7fd feb0 	bl	800176c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4610      	mov	r0, r2
 8003a20:	f000 ff58 	bl	80048d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d001      	beq.n	8003a98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e04e      	b.n	8003b36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a23      	ldr	r2, [pc, #140]	; (8003b44 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d022      	beq.n	8003b00 <HAL_TIM_Base_Start_IT+0x80>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac2:	d01d      	beq.n	8003b00 <HAL_TIM_Base_Start_IT+0x80>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1f      	ldr	r2, [pc, #124]	; (8003b48 <HAL_TIM_Base_Start_IT+0xc8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d018      	beq.n	8003b00 <HAL_TIM_Base_Start_IT+0x80>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1e      	ldr	r2, [pc, #120]	; (8003b4c <HAL_TIM_Base_Start_IT+0xcc>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d013      	beq.n	8003b00 <HAL_TIM_Base_Start_IT+0x80>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a1c      	ldr	r2, [pc, #112]	; (8003b50 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00e      	beq.n	8003b00 <HAL_TIM_Base_Start_IT+0x80>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a1b      	ldr	r2, [pc, #108]	; (8003b54 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d009      	beq.n	8003b00 <HAL_TIM_Base_Start_IT+0x80>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a19      	ldr	r2, [pc, #100]	; (8003b58 <HAL_TIM_Base_Start_IT+0xd8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d004      	beq.n	8003b00 <HAL_TIM_Base_Start_IT+0x80>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a18      	ldr	r2, [pc, #96]	; (8003b5c <HAL_TIM_Base_Start_IT+0xdc>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d111      	bne.n	8003b24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2b06      	cmp	r3, #6
 8003b10:	d010      	beq.n	8003b34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f042 0201 	orr.w	r2, r2, #1
 8003b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b22:	e007      	b.n	8003b34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	40010000 	.word	0x40010000
 8003b48:	40000400 	.word	0x40000400
 8003b4c:	40000800 	.word	0x40000800
 8003b50:	40000c00 	.word	0x40000c00
 8003b54:	40010400 	.word	0x40010400
 8003b58:	40014000 	.word	0x40014000
 8003b5c:	40001800 	.word	0x40001800

08003b60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e041      	b.n	8003bf6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d106      	bne.n	8003b8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f839 	bl	8003bfe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4610      	mov	r0, r2
 8003ba0:	f000 fe98 	bl	80048d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d109      	bne.n	8003c38 <HAL_TIM_PWM_Start+0x24>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	bf14      	ite	ne
 8003c30:	2301      	movne	r3, #1
 8003c32:	2300      	moveq	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	e022      	b.n	8003c7e <HAL_TIM_PWM_Start+0x6a>
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d109      	bne.n	8003c52 <HAL_TIM_PWM_Start+0x3e>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	bf14      	ite	ne
 8003c4a:	2301      	movne	r3, #1
 8003c4c:	2300      	moveq	r3, #0
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	e015      	b.n	8003c7e <HAL_TIM_PWM_Start+0x6a>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d109      	bne.n	8003c6c <HAL_TIM_PWM_Start+0x58>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	bf14      	ite	ne
 8003c64:	2301      	movne	r3, #1
 8003c66:	2300      	moveq	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	e008      	b.n	8003c7e <HAL_TIM_PWM_Start+0x6a>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	bf14      	ite	ne
 8003c78:	2301      	movne	r3, #1
 8003c7a:	2300      	moveq	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e07c      	b.n	8003d80 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d104      	bne.n	8003c96 <HAL_TIM_PWM_Start+0x82>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c94:	e013      	b.n	8003cbe <HAL_TIM_PWM_Start+0xaa>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d104      	bne.n	8003ca6 <HAL_TIM_PWM_Start+0x92>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ca4:	e00b      	b.n	8003cbe <HAL_TIM_PWM_Start+0xaa>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d104      	bne.n	8003cb6 <HAL_TIM_PWM_Start+0xa2>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cb4:	e003      	b.n	8003cbe <HAL_TIM_PWM_Start+0xaa>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2202      	movs	r2, #2
 8003cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	6839      	ldr	r1, [r7, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f001 fa18 	bl	80050fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a2d      	ldr	r2, [pc, #180]	; (8003d88 <HAL_TIM_PWM_Start+0x174>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d004      	beq.n	8003ce0 <HAL_TIM_PWM_Start+0xcc>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a2c      	ldr	r2, [pc, #176]	; (8003d8c <HAL_TIM_PWM_Start+0x178>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d101      	bne.n	8003ce4 <HAL_TIM_PWM_Start+0xd0>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e000      	b.n	8003ce6 <HAL_TIM_PWM_Start+0xd2>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d007      	beq.n	8003cfa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cf8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a22      	ldr	r2, [pc, #136]	; (8003d88 <HAL_TIM_PWM_Start+0x174>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d022      	beq.n	8003d4a <HAL_TIM_PWM_Start+0x136>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0c:	d01d      	beq.n	8003d4a <HAL_TIM_PWM_Start+0x136>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a1f      	ldr	r2, [pc, #124]	; (8003d90 <HAL_TIM_PWM_Start+0x17c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d018      	beq.n	8003d4a <HAL_TIM_PWM_Start+0x136>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a1d      	ldr	r2, [pc, #116]	; (8003d94 <HAL_TIM_PWM_Start+0x180>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d013      	beq.n	8003d4a <HAL_TIM_PWM_Start+0x136>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a1c      	ldr	r2, [pc, #112]	; (8003d98 <HAL_TIM_PWM_Start+0x184>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00e      	beq.n	8003d4a <HAL_TIM_PWM_Start+0x136>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a16      	ldr	r2, [pc, #88]	; (8003d8c <HAL_TIM_PWM_Start+0x178>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d009      	beq.n	8003d4a <HAL_TIM_PWM_Start+0x136>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a18      	ldr	r2, [pc, #96]	; (8003d9c <HAL_TIM_PWM_Start+0x188>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d004      	beq.n	8003d4a <HAL_TIM_PWM_Start+0x136>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a16      	ldr	r2, [pc, #88]	; (8003da0 <HAL_TIM_PWM_Start+0x18c>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d111      	bne.n	8003d6e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2b06      	cmp	r3, #6
 8003d5a:	d010      	beq.n	8003d7e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d6c:	e007      	b.n	8003d7e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f042 0201 	orr.w	r2, r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40010000 	.word	0x40010000
 8003d8c:	40010400 	.word	0x40010400
 8003d90:	40000400 	.word	0x40000400
 8003d94:	40000800 	.word	0x40000800
 8003d98:	40000c00 	.word	0x40000c00
 8003d9c:	40014000 	.word	0x40014000
 8003da0:	40001800 	.word	0x40001800

08003da4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2200      	movs	r2, #0
 8003db4:	6839      	ldr	r1, [r7, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f001 f9a0 	bl	80050fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a2e      	ldr	r2, [pc, #184]	; (8003e7c <HAL_TIM_PWM_Stop+0xd8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d004      	beq.n	8003dd0 <HAL_TIM_PWM_Stop+0x2c>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a2d      	ldr	r2, [pc, #180]	; (8003e80 <HAL_TIM_PWM_Stop+0xdc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d101      	bne.n	8003dd4 <HAL_TIM_PWM_Stop+0x30>
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e000      	b.n	8003dd6 <HAL_TIM_PWM_Stop+0x32>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d017      	beq.n	8003e0a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6a1a      	ldr	r2, [r3, #32]
 8003de0:	f241 1311 	movw	r3, #4369	; 0x1111
 8003de4:	4013      	ands	r3, r2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10f      	bne.n	8003e0a <HAL_TIM_PWM_Stop+0x66>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6a1a      	ldr	r2, [r3, #32]
 8003df0:	f240 4344 	movw	r3, #1092	; 0x444
 8003df4:	4013      	ands	r3, r2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d107      	bne.n	8003e0a <HAL_TIM_PWM_Stop+0x66>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6a1a      	ldr	r2, [r3, #32]
 8003e10:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e14:	4013      	ands	r3, r2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10f      	bne.n	8003e3a <HAL_TIM_PWM_Stop+0x96>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6a1a      	ldr	r2, [r3, #32]
 8003e20:	f240 4344 	movw	r3, #1092	; 0x444
 8003e24:	4013      	ands	r3, r2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d107      	bne.n	8003e3a <HAL_TIM_PWM_Stop+0x96>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0201 	bic.w	r2, r2, #1
 8003e38:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d104      	bne.n	8003e4a <HAL_TIM_PWM_Stop+0xa6>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e48:	e013      	b.n	8003e72 <HAL_TIM_PWM_Stop+0xce>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d104      	bne.n	8003e5a <HAL_TIM_PWM_Stop+0xb6>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e58:	e00b      	b.n	8003e72 <HAL_TIM_PWM_Stop+0xce>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d104      	bne.n	8003e6a <HAL_TIM_PWM_Stop+0xc6>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e68:	e003      	b.n	8003e72 <HAL_TIM_PWM_Stop+0xce>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40010000 	.word	0x40010000
 8003e80:	40010400 	.word	0x40010400

08003e84 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e041      	b.n	8003f1a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d106      	bne.n	8003eb0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f839 	bl	8003f22 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	f000 fd06 	bl	80048d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
	...

08003f38 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d104      	bne.n	8003f56 <HAL_TIM_IC_Start_IT+0x1e>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	e013      	b.n	8003f7e <HAL_TIM_IC_Start_IT+0x46>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d104      	bne.n	8003f66 <HAL_TIM_IC_Start_IT+0x2e>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	e00b      	b.n	8003f7e <HAL_TIM_IC_Start_IT+0x46>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d104      	bne.n	8003f76 <HAL_TIM_IC_Start_IT+0x3e>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	e003      	b.n	8003f7e <HAL_TIM_IC_Start_IT+0x46>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d104      	bne.n	8003f90 <HAL_TIM_IC_Start_IT+0x58>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	e013      	b.n	8003fb8 <HAL_TIM_IC_Start_IT+0x80>
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d104      	bne.n	8003fa0 <HAL_TIM_IC_Start_IT+0x68>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	e00b      	b.n	8003fb8 <HAL_TIM_IC_Start_IT+0x80>
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d104      	bne.n	8003fb0 <HAL_TIM_IC_Start_IT+0x78>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	e003      	b.n	8003fb8 <HAL_TIM_IC_Start_IT+0x80>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fba:	7bbb      	ldrb	r3, [r7, #14]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d102      	bne.n	8003fc6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fc0:	7b7b      	ldrb	r3, [r7, #13]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d001      	beq.n	8003fca <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e0cc      	b.n	8004164 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d104      	bne.n	8003fda <HAL_TIM_IC_Start_IT+0xa2>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fd8:	e013      	b.n	8004002 <HAL_TIM_IC_Start_IT+0xca>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	d104      	bne.n	8003fea <HAL_TIM_IC_Start_IT+0xb2>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fe8:	e00b      	b.n	8004002 <HAL_TIM_IC_Start_IT+0xca>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d104      	bne.n	8003ffa <HAL_TIM_IC_Start_IT+0xc2>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ff8:	e003      	b.n	8004002 <HAL_TIM_IC_Start_IT+0xca>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d104      	bne.n	8004012 <HAL_TIM_IC_Start_IT+0xda>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004010:	e013      	b.n	800403a <HAL_TIM_IC_Start_IT+0x102>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b04      	cmp	r3, #4
 8004016:	d104      	bne.n	8004022 <HAL_TIM_IC_Start_IT+0xea>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004020:	e00b      	b.n	800403a <HAL_TIM_IC_Start_IT+0x102>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b08      	cmp	r3, #8
 8004026:	d104      	bne.n	8004032 <HAL_TIM_IC_Start_IT+0xfa>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004030:	e003      	b.n	800403a <HAL_TIM_IC_Start_IT+0x102>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2202      	movs	r2, #2
 8004036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b0c      	cmp	r3, #12
 800403e:	d841      	bhi.n	80040c4 <HAL_TIM_IC_Start_IT+0x18c>
 8004040:	a201      	add	r2, pc, #4	; (adr r2, 8004048 <HAL_TIM_IC_Start_IT+0x110>)
 8004042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004046:	bf00      	nop
 8004048:	0800407d 	.word	0x0800407d
 800404c:	080040c5 	.word	0x080040c5
 8004050:	080040c5 	.word	0x080040c5
 8004054:	080040c5 	.word	0x080040c5
 8004058:	0800408f 	.word	0x0800408f
 800405c:	080040c5 	.word	0x080040c5
 8004060:	080040c5 	.word	0x080040c5
 8004064:	080040c5 	.word	0x080040c5
 8004068:	080040a1 	.word	0x080040a1
 800406c:	080040c5 	.word	0x080040c5
 8004070:	080040c5 	.word	0x080040c5
 8004074:	080040c5 	.word	0x080040c5
 8004078:	080040b3 	.word	0x080040b3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0202 	orr.w	r2, r2, #2
 800408a:	60da      	str	r2, [r3, #12]
      break;
 800408c:	e01d      	b.n	80040ca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0204 	orr.w	r2, r2, #4
 800409c:	60da      	str	r2, [r3, #12]
      break;
 800409e:	e014      	b.n	80040ca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0208 	orr.w	r2, r2, #8
 80040ae:	60da      	str	r2, [r3, #12]
      break;
 80040b0:	e00b      	b.n	80040ca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f042 0210 	orr.w	r2, r2, #16
 80040c0:	60da      	str	r2, [r3, #12]
      break;
 80040c2:	e002      	b.n	80040ca <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	73fb      	strb	r3, [r7, #15]
      break;
 80040c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d148      	bne.n	8004162 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2201      	movs	r2, #1
 80040d6:	6839      	ldr	r1, [r7, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f001 f80f 	bl	80050fc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a22      	ldr	r2, [pc, #136]	; (800416c <HAL_TIM_IC_Start_IT+0x234>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d022      	beq.n	800412e <HAL_TIM_IC_Start_IT+0x1f6>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f0:	d01d      	beq.n	800412e <HAL_TIM_IC_Start_IT+0x1f6>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a1e      	ldr	r2, [pc, #120]	; (8004170 <HAL_TIM_IC_Start_IT+0x238>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d018      	beq.n	800412e <HAL_TIM_IC_Start_IT+0x1f6>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a1c      	ldr	r2, [pc, #112]	; (8004174 <HAL_TIM_IC_Start_IT+0x23c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d013      	beq.n	800412e <HAL_TIM_IC_Start_IT+0x1f6>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a1b      	ldr	r2, [pc, #108]	; (8004178 <HAL_TIM_IC_Start_IT+0x240>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d00e      	beq.n	800412e <HAL_TIM_IC_Start_IT+0x1f6>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a19      	ldr	r2, [pc, #100]	; (800417c <HAL_TIM_IC_Start_IT+0x244>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d009      	beq.n	800412e <HAL_TIM_IC_Start_IT+0x1f6>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a18      	ldr	r2, [pc, #96]	; (8004180 <HAL_TIM_IC_Start_IT+0x248>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d004      	beq.n	800412e <HAL_TIM_IC_Start_IT+0x1f6>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a16      	ldr	r2, [pc, #88]	; (8004184 <HAL_TIM_IC_Start_IT+0x24c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d111      	bne.n	8004152 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2b06      	cmp	r3, #6
 800413e:	d010      	beq.n	8004162 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004150:	e007      	b.n	8004162 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 0201 	orr.w	r2, r2, #1
 8004160:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004162:	7bfb      	ldrb	r3, [r7, #15]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40010000 	.word	0x40010000
 8004170:	40000400 	.word	0x40000400
 8004174:	40000800 	.word	0x40000800
 8004178:	40000c00 	.word	0x40000c00
 800417c:	40010400 	.word	0x40010400
 8004180:	40014000 	.word	0x40014000
 8004184:	40001800 	.word	0x40001800

08004188 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e041      	b.n	8004220 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d106      	bne.n	80041b6 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f839 	bl	8004228 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2202      	movs	r2, #2
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3304      	adds	r3, #4
 80041c6:	4619      	mov	r1, r3
 80041c8:	4610      	mov	r0, r2
 80041ca:	f000 fb83 	bl	80048d4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0208 	bic.w	r2, r2, #8
 80041dc:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6819      	ldr	r1, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b02      	cmp	r3, #2
 8004250:	d122      	bne.n	8004298 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b02      	cmp	r3, #2
 800425e:	d11b      	bne.n	8004298 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f06f 0202 	mvn.w	r2, #2
 8004268:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7fc feda 	bl	8001038 <HAL_TIM_IC_CaptureCallback>
 8004284:	e005      	b.n	8004292 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 fb05 	bl	8004896 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 fb0c 	bl	80048aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	f003 0304 	and.w	r3, r3, #4
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d122      	bne.n	80042ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	d11b      	bne.n	80042ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f06f 0204 	mvn.w	r2, #4
 80042bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2202      	movs	r2, #2
 80042c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7fc feb0 	bl	8001038 <HAL_TIM_IC_CaptureCallback>
 80042d8:	e005      	b.n	80042e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 fadb 	bl	8004896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 fae2 	bl	80048aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d122      	bne.n	8004340 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f003 0308 	and.w	r3, r3, #8
 8004304:	2b08      	cmp	r3, #8
 8004306:	d11b      	bne.n	8004340 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f06f 0208 	mvn.w	r2, #8
 8004310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2204      	movs	r2, #4
 8004316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fc fe86 	bl	8001038 <HAL_TIM_IC_CaptureCallback>
 800432c:	e005      	b.n	800433a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 fab1 	bl	8004896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 fab8 	bl	80048aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f003 0310 	and.w	r3, r3, #16
 800434a:	2b10      	cmp	r3, #16
 800434c:	d122      	bne.n	8004394 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 0310 	and.w	r3, r3, #16
 8004358:	2b10      	cmp	r3, #16
 800435a:	d11b      	bne.n	8004394 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f06f 0210 	mvn.w	r2, #16
 8004364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2208      	movs	r2, #8
 800436a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7fc fe5c 	bl	8001038 <HAL_TIM_IC_CaptureCallback>
 8004380:	e005      	b.n	800438e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fa87 	bl	8004896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 fa8e 	bl	80048aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d10e      	bne.n	80043c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d107      	bne.n	80043c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f06f 0201 	mvn.w	r2, #1
 80043b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7fc fe60 	bl	8001080 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ca:	2b80      	cmp	r3, #128	; 0x80
 80043cc:	d10e      	bne.n	80043ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d8:	2b80      	cmp	r3, #128	; 0x80
 80043da:	d107      	bne.n	80043ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f001 f89e 	bl	8005528 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f6:	2b40      	cmp	r3, #64	; 0x40
 80043f8:	d10e      	bne.n	8004418 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004404:	2b40      	cmp	r3, #64	; 0x40
 8004406:	d107      	bne.n	8004418 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fa53 	bl	80048be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f003 0320 	and.w	r3, r3, #32
 8004422:	2b20      	cmp	r3, #32
 8004424:	d10e      	bne.n	8004444 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f003 0320 	and.w	r3, r3, #32
 8004430:	2b20      	cmp	r3, #32
 8004432:	d107      	bne.n	8004444 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f06f 0220 	mvn.w	r2, #32
 800443c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f001 f868 	bl	8005514 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004444:	bf00      	nop
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004458:	2300      	movs	r3, #0
 800445a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004462:	2b01      	cmp	r3, #1
 8004464:	d101      	bne.n	800446a <HAL_TIM_IC_ConfigChannel+0x1e>
 8004466:	2302      	movs	r3, #2
 8004468:	e088      	b.n	800457c <HAL_TIM_IC_ConfigChannel+0x130>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d11b      	bne.n	80044b0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6818      	ldr	r0, [r3, #0]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	6819      	ldr	r1, [r3, #0]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f000 fc74 	bl	8004d74 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699a      	ldr	r2, [r3, #24]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 020c 	bic.w	r2, r2, #12
 800449a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6999      	ldr	r1, [r3, #24]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	689a      	ldr	r2, [r3, #8]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	619a      	str	r2, [r3, #24]
 80044ae:	e060      	b.n	8004572 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d11c      	bne.n	80044f0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6818      	ldr	r0, [r3, #0]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	6819      	ldr	r1, [r3, #0]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f000 fcf8 	bl	8004eba <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699a      	ldr	r2, [r3, #24]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80044d8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6999      	ldr	r1, [r3, #24]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	021a      	lsls	r2, r3, #8
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	619a      	str	r2, [r3, #24]
 80044ee:	e040      	b.n	8004572 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b08      	cmp	r3, #8
 80044f4:	d11b      	bne.n	800452e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	6819      	ldr	r1, [r3, #0]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f000 fd45 	bl	8004f94 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69da      	ldr	r2, [r3, #28]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 020c 	bic.w	r2, r2, #12
 8004518:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69d9      	ldr	r1, [r3, #28]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	61da      	str	r2, [r3, #28]
 800452c:	e021      	b.n	8004572 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b0c      	cmp	r3, #12
 8004532:	d11c      	bne.n	800456e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6818      	ldr	r0, [r3, #0]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	6819      	ldr	r1, [r3, #0]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f000 fd62 	bl	800500c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	69da      	ldr	r2, [r3, #28]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004556:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	69d9      	ldr	r1, [r3, #28]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	021a      	lsls	r2, r3, #8
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	61da      	str	r2, [r3, #28]
 800456c:	e001      	b.n	8004572 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800457a:	7dfb      	ldrb	r3, [r7, #23]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004590:	2300      	movs	r3, #0
 8004592:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800459e:	2302      	movs	r3, #2
 80045a0:	e0ae      	b.n	8004700 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b0c      	cmp	r3, #12
 80045ae:	f200 809f 	bhi.w	80046f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80045b2:	a201      	add	r2, pc, #4	; (adr r2, 80045b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b8:	080045ed 	.word	0x080045ed
 80045bc:	080046f1 	.word	0x080046f1
 80045c0:	080046f1 	.word	0x080046f1
 80045c4:	080046f1 	.word	0x080046f1
 80045c8:	0800462d 	.word	0x0800462d
 80045cc:	080046f1 	.word	0x080046f1
 80045d0:	080046f1 	.word	0x080046f1
 80045d4:	080046f1 	.word	0x080046f1
 80045d8:	0800466f 	.word	0x0800466f
 80045dc:	080046f1 	.word	0x080046f1
 80045e0:	080046f1 	.word	0x080046f1
 80045e4:	080046f1 	.word	0x080046f1
 80045e8:	080046af 	.word	0x080046af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68b9      	ldr	r1, [r7, #8]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fa0e 	bl	8004a14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699a      	ldr	r2, [r3, #24]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0208 	orr.w	r2, r2, #8
 8004606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699a      	ldr	r2, [r3, #24]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0204 	bic.w	r2, r2, #4
 8004616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6999      	ldr	r1, [r3, #24]
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	691a      	ldr	r2, [r3, #16]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	619a      	str	r2, [r3, #24]
      break;
 800462a:	e064      	b.n	80046f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fa5e 	bl	8004af4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699a      	ldr	r2, [r3, #24]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004646:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	699a      	ldr	r2, [r3, #24]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6999      	ldr	r1, [r3, #24]
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	021a      	lsls	r2, r3, #8
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	619a      	str	r2, [r3, #24]
      break;
 800466c:	e043      	b.n	80046f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68b9      	ldr	r1, [r7, #8]
 8004674:	4618      	mov	r0, r3
 8004676:	f000 fab3 	bl	8004be0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	69da      	ldr	r2, [r3, #28]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0208 	orr.w	r2, r2, #8
 8004688:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69da      	ldr	r2, [r3, #28]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0204 	bic.w	r2, r2, #4
 8004698:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	69d9      	ldr	r1, [r3, #28]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	691a      	ldr	r2, [r3, #16]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	61da      	str	r2, [r3, #28]
      break;
 80046ac:	e023      	b.n	80046f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68b9      	ldr	r1, [r7, #8]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fb07 	bl	8004cc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	69da      	ldr	r2, [r3, #28]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69da      	ldr	r2, [r3, #28]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69d9      	ldr	r1, [r3, #28]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	021a      	lsls	r2, r3, #8
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	61da      	str	r2, [r3, #28]
      break;
 80046ee:	e002      	b.n	80046f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	75fb      	strb	r3, [r7, #23]
      break;
 80046f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_TIM_ConfigClockSource+0x1c>
 8004720:	2302      	movs	r3, #2
 8004722:	e0b4      	b.n	800488e <HAL_TIM_ConfigClockSource+0x186>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800474a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800475c:	d03e      	beq.n	80047dc <HAL_TIM_ConfigClockSource+0xd4>
 800475e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004762:	f200 8087 	bhi.w	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 8004766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476a:	f000 8086 	beq.w	800487a <HAL_TIM_ConfigClockSource+0x172>
 800476e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004772:	d87f      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 8004774:	2b70      	cmp	r3, #112	; 0x70
 8004776:	d01a      	beq.n	80047ae <HAL_TIM_ConfigClockSource+0xa6>
 8004778:	2b70      	cmp	r3, #112	; 0x70
 800477a:	d87b      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 800477c:	2b60      	cmp	r3, #96	; 0x60
 800477e:	d050      	beq.n	8004822 <HAL_TIM_ConfigClockSource+0x11a>
 8004780:	2b60      	cmp	r3, #96	; 0x60
 8004782:	d877      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 8004784:	2b50      	cmp	r3, #80	; 0x50
 8004786:	d03c      	beq.n	8004802 <HAL_TIM_ConfigClockSource+0xfa>
 8004788:	2b50      	cmp	r3, #80	; 0x50
 800478a:	d873      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 800478c:	2b40      	cmp	r3, #64	; 0x40
 800478e:	d058      	beq.n	8004842 <HAL_TIM_ConfigClockSource+0x13a>
 8004790:	2b40      	cmp	r3, #64	; 0x40
 8004792:	d86f      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 8004794:	2b30      	cmp	r3, #48	; 0x30
 8004796:	d064      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0x15a>
 8004798:	2b30      	cmp	r3, #48	; 0x30
 800479a:	d86b      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 800479c:	2b20      	cmp	r3, #32
 800479e:	d060      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0x15a>
 80047a0:	2b20      	cmp	r3, #32
 80047a2:	d867      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d05c      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0x15a>
 80047a8:	2b10      	cmp	r3, #16
 80047aa:	d05a      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0x15a>
 80047ac:	e062      	b.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	6899      	ldr	r1, [r3, #8]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f000 fc7d 	bl	80050bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	609a      	str	r2, [r3, #8]
      break;
 80047da:	e04f      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6818      	ldr	r0, [r3, #0]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	6899      	ldr	r1, [r3, #8]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f000 fc66 	bl	80050bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047fe:	609a      	str	r2, [r3, #8]
      break;
 8004800:	e03c      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6818      	ldr	r0, [r3, #0]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	6859      	ldr	r1, [r3, #4]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	461a      	mov	r2, r3
 8004810:	f000 fb24 	bl	8004e5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2150      	movs	r1, #80	; 0x50
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fc33 	bl	8005086 <TIM_ITRx_SetConfig>
      break;
 8004820:	e02c      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6859      	ldr	r1, [r3, #4]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	461a      	mov	r2, r3
 8004830:	f000 fb80 	bl	8004f34 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2160      	movs	r1, #96	; 0x60
 800483a:	4618      	mov	r0, r3
 800483c:	f000 fc23 	bl	8005086 <TIM_ITRx_SetConfig>
      break;
 8004840:	e01c      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6818      	ldr	r0, [r3, #0]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	6859      	ldr	r1, [r3, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	461a      	mov	r2, r3
 8004850:	f000 fb04 	bl	8004e5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2140      	movs	r1, #64	; 0x40
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fc13 	bl	8005086 <TIM_ITRx_SetConfig>
      break;
 8004860:	e00c      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4619      	mov	r1, r3
 800486c:	4610      	mov	r0, r2
 800486e:	f000 fc0a 	bl	8005086 <TIM_ITRx_SetConfig>
      break;
 8004872:	e003      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	73fb      	strb	r3, [r7, #15]
      break;
 8004878:	e000      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800487a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800488c:	7bfb      	ldrb	r3, [r7, #15]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
	...

080048d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a40      	ldr	r2, [pc, #256]	; (80049e8 <TIM_Base_SetConfig+0x114>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d013      	beq.n	8004914 <TIM_Base_SetConfig+0x40>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f2:	d00f      	beq.n	8004914 <TIM_Base_SetConfig+0x40>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a3d      	ldr	r2, [pc, #244]	; (80049ec <TIM_Base_SetConfig+0x118>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d00b      	beq.n	8004914 <TIM_Base_SetConfig+0x40>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a3c      	ldr	r2, [pc, #240]	; (80049f0 <TIM_Base_SetConfig+0x11c>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d007      	beq.n	8004914 <TIM_Base_SetConfig+0x40>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a3b      	ldr	r2, [pc, #236]	; (80049f4 <TIM_Base_SetConfig+0x120>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d003      	beq.n	8004914 <TIM_Base_SetConfig+0x40>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a3a      	ldr	r2, [pc, #232]	; (80049f8 <TIM_Base_SetConfig+0x124>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d108      	bne.n	8004926 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a2f      	ldr	r2, [pc, #188]	; (80049e8 <TIM_Base_SetConfig+0x114>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d02b      	beq.n	8004986 <TIM_Base_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004934:	d027      	beq.n	8004986 <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a2c      	ldr	r2, [pc, #176]	; (80049ec <TIM_Base_SetConfig+0x118>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d023      	beq.n	8004986 <TIM_Base_SetConfig+0xb2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a2b      	ldr	r2, [pc, #172]	; (80049f0 <TIM_Base_SetConfig+0x11c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d01f      	beq.n	8004986 <TIM_Base_SetConfig+0xb2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a2a      	ldr	r2, [pc, #168]	; (80049f4 <TIM_Base_SetConfig+0x120>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d01b      	beq.n	8004986 <TIM_Base_SetConfig+0xb2>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a29      	ldr	r2, [pc, #164]	; (80049f8 <TIM_Base_SetConfig+0x124>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d017      	beq.n	8004986 <TIM_Base_SetConfig+0xb2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a28      	ldr	r2, [pc, #160]	; (80049fc <TIM_Base_SetConfig+0x128>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d013      	beq.n	8004986 <TIM_Base_SetConfig+0xb2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a27      	ldr	r2, [pc, #156]	; (8004a00 <TIM_Base_SetConfig+0x12c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d00f      	beq.n	8004986 <TIM_Base_SetConfig+0xb2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a26      	ldr	r2, [pc, #152]	; (8004a04 <TIM_Base_SetConfig+0x130>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d00b      	beq.n	8004986 <TIM_Base_SetConfig+0xb2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a25      	ldr	r2, [pc, #148]	; (8004a08 <TIM_Base_SetConfig+0x134>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d007      	beq.n	8004986 <TIM_Base_SetConfig+0xb2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a24      	ldr	r2, [pc, #144]	; (8004a0c <TIM_Base_SetConfig+0x138>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d003      	beq.n	8004986 <TIM_Base_SetConfig+0xb2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a23      	ldr	r2, [pc, #140]	; (8004a10 <TIM_Base_SetConfig+0x13c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d108      	bne.n	8004998 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800498c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	4313      	orrs	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	689a      	ldr	r2, [r3, #8]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a0a      	ldr	r2, [pc, #40]	; (80049e8 <TIM_Base_SetConfig+0x114>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d003      	beq.n	80049cc <TIM_Base_SetConfig+0xf8>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a0c      	ldr	r2, [pc, #48]	; (80049f8 <TIM_Base_SetConfig+0x124>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d103      	bne.n	80049d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	615a      	str	r2, [r3, #20]
}
 80049da:	bf00      	nop
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	40010000 	.word	0x40010000
 80049ec:	40000400 	.word	0x40000400
 80049f0:	40000800 	.word	0x40000800
 80049f4:	40000c00 	.word	0x40000c00
 80049f8:	40010400 	.word	0x40010400
 80049fc:	40014000 	.word	0x40014000
 8004a00:	40014400 	.word	0x40014400
 8004a04:	40014800 	.word	0x40014800
 8004a08:	40001800 	.word	0x40001800
 8004a0c:	40001c00 	.word	0x40001c00
 8004a10:	40002000 	.word	0x40002000

08004a14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	f023 0201 	bic.w	r2, r3, #1
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0303 	bic.w	r3, r3, #3
 8004a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f023 0302 	bic.w	r3, r3, #2
 8004a5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a20      	ldr	r2, [pc, #128]	; (8004aec <TIM_OC1_SetConfig+0xd8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d003      	beq.n	8004a78 <TIM_OC1_SetConfig+0x64>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a1f      	ldr	r2, [pc, #124]	; (8004af0 <TIM_OC1_SetConfig+0xdc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d10c      	bne.n	8004a92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f023 0308 	bic.w	r3, r3, #8
 8004a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f023 0304 	bic.w	r3, r3, #4
 8004a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a15      	ldr	r2, [pc, #84]	; (8004aec <TIM_OC1_SetConfig+0xd8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d003      	beq.n	8004aa2 <TIM_OC1_SetConfig+0x8e>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a14      	ldr	r2, [pc, #80]	; (8004af0 <TIM_OC1_SetConfig+0xdc>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d111      	bne.n	8004ac6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	621a      	str	r2, [r3, #32]
}
 8004ae0:	bf00      	nop
 8004ae2:	371c      	adds	r7, #28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	40010000 	.word	0x40010000
 8004af0:	40010400 	.word	0x40010400

08004af4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	f023 0210 	bic.w	r2, r3, #16
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	021b      	lsls	r3, r3, #8
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f023 0320 	bic.w	r3, r3, #32
 8004b3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a22      	ldr	r2, [pc, #136]	; (8004bd8 <TIM_OC2_SetConfig+0xe4>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d003      	beq.n	8004b5c <TIM_OC2_SetConfig+0x68>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a21      	ldr	r2, [pc, #132]	; (8004bdc <TIM_OC2_SetConfig+0xe8>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d10d      	bne.n	8004b78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a17      	ldr	r2, [pc, #92]	; (8004bd8 <TIM_OC2_SetConfig+0xe4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d003      	beq.n	8004b88 <TIM_OC2_SetConfig+0x94>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a16      	ldr	r2, [pc, #88]	; (8004bdc <TIM_OC2_SetConfig+0xe8>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d113      	bne.n	8004bb0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	621a      	str	r2, [r3, #32]
}
 8004bca:	bf00      	nop
 8004bcc:	371c      	adds	r7, #28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	40010000 	.word	0x40010000
 8004bdc:	40010400 	.word	0x40010400

08004be0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 0303 	bic.w	r3, r3, #3
 8004c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	021b      	lsls	r3, r3, #8
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a21      	ldr	r2, [pc, #132]	; (8004cc0 <TIM_OC3_SetConfig+0xe0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d003      	beq.n	8004c46 <TIM_OC3_SetConfig+0x66>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a20      	ldr	r2, [pc, #128]	; (8004cc4 <TIM_OC3_SetConfig+0xe4>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d10d      	bne.n	8004c62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	021b      	lsls	r3, r3, #8
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a16      	ldr	r2, [pc, #88]	; (8004cc0 <TIM_OC3_SetConfig+0xe0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d003      	beq.n	8004c72 <TIM_OC3_SetConfig+0x92>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a15      	ldr	r2, [pc, #84]	; (8004cc4 <TIM_OC3_SetConfig+0xe4>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d113      	bne.n	8004c9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	621a      	str	r2, [r3, #32]
}
 8004cb4:	bf00      	nop
 8004cb6:	371c      	adds	r7, #28
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	40010000 	.word	0x40010000
 8004cc4:	40010400 	.word	0x40010400

08004cc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	021b      	lsls	r3, r3, #8
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	031b      	lsls	r3, r3, #12
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a12      	ldr	r2, [pc, #72]	; (8004d6c <TIM_OC4_SetConfig+0xa4>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d003      	beq.n	8004d30 <TIM_OC4_SetConfig+0x68>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a11      	ldr	r2, [pc, #68]	; (8004d70 <TIM_OC4_SetConfig+0xa8>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d109      	bne.n	8004d44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	019b      	lsls	r3, r3, #6
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	621a      	str	r2, [r3, #32]
}
 8004d5e:	bf00      	nop
 8004d60:	371c      	adds	r7, #28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40010000 	.word	0x40010000
 8004d70:	40010400 	.word	0x40010400

08004d74 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
 8004d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	f023 0201 	bic.w	r2, r3, #1
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4a28      	ldr	r2, [pc, #160]	; (8004e40 <TIM_TI1_SetConfig+0xcc>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d01b      	beq.n	8004dda <TIM_TI1_SetConfig+0x66>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da8:	d017      	beq.n	8004dda <TIM_TI1_SetConfig+0x66>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4a25      	ldr	r2, [pc, #148]	; (8004e44 <TIM_TI1_SetConfig+0xd0>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d013      	beq.n	8004dda <TIM_TI1_SetConfig+0x66>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4a24      	ldr	r2, [pc, #144]	; (8004e48 <TIM_TI1_SetConfig+0xd4>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d00f      	beq.n	8004dda <TIM_TI1_SetConfig+0x66>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4a23      	ldr	r2, [pc, #140]	; (8004e4c <TIM_TI1_SetConfig+0xd8>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d00b      	beq.n	8004dda <TIM_TI1_SetConfig+0x66>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	4a22      	ldr	r2, [pc, #136]	; (8004e50 <TIM_TI1_SetConfig+0xdc>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d007      	beq.n	8004dda <TIM_TI1_SetConfig+0x66>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4a21      	ldr	r2, [pc, #132]	; (8004e54 <TIM_TI1_SetConfig+0xe0>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d003      	beq.n	8004dda <TIM_TI1_SetConfig+0x66>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4a20      	ldr	r2, [pc, #128]	; (8004e58 <TIM_TI1_SetConfig+0xe4>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d101      	bne.n	8004dde <TIM_TI1_SetConfig+0x6a>
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e000      	b.n	8004de0 <TIM_TI1_SetConfig+0x6c>
 8004dde:	2300      	movs	r3, #0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d008      	beq.n	8004df6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f023 0303 	bic.w	r3, r3, #3
 8004dea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	e003      	b.n	8004dfe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f023 030a 	bic.w	r3, r3, #10
 8004e18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f003 030a 	and.w	r3, r3, #10
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	621a      	str	r2, [r3, #32]
}
 8004e32:	bf00      	nop
 8004e34:	371c      	adds	r7, #28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	40010000 	.word	0x40010000
 8004e44:	40000400 	.word	0x40000400
 8004e48:	40000800 	.word	0x40000800
 8004e4c:	40000c00 	.word	0x40000c00
 8004e50:	40010400 	.word	0x40010400
 8004e54:	40014000 	.word	0x40014000
 8004e58:	40001800 	.word	0x40001800

08004e5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	f023 0201 	bic.w	r2, r3, #1
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f023 030a 	bic.w	r3, r3, #10
 8004e98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	621a      	str	r2, [r3, #32]
}
 8004eae:	bf00      	nop
 8004eb0:	371c      	adds	r7, #28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b087      	sub	sp, #28
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	60f8      	str	r0, [r7, #12]
 8004ec2:	60b9      	str	r1, [r7, #8]
 8004ec4:	607a      	str	r2, [r7, #4]
 8004ec6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	f023 0210 	bic.w	r2, r3, #16
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ee6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	021b      	lsls	r3, r3, #8
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ef8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	031b      	lsls	r3, r3, #12
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	621a      	str	r2, [r3, #32]
}
 8004f28:	bf00      	nop
 8004f2a:	371c      	adds	r7, #28
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b087      	sub	sp, #28
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	f023 0210 	bic.w	r2, r3, #16
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	031b      	lsls	r3, r3, #12
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	621a      	str	r2, [r3, #32]
}
 8004f88:	bf00      	nop
 8004f8a:	371c      	adds	r7, #28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	69db      	ldr	r3, [r3, #28]
 8004fb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f023 0303 	bic.w	r3, r3, #3
 8004fc0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fd0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	011b      	lsls	r3, r3, #4
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004fe4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	021b      	lsls	r3, r3, #8
 8004fea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	621a      	str	r2, [r3, #32]
}
 8005000:	bf00      	nop
 8005002:	371c      	adds	r7, #28
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
 8005018:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005038:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	021b      	lsls	r3, r3, #8
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	4313      	orrs	r3, r2
 8005042:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800504a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	031b      	lsls	r3, r3, #12
 8005050:	b29b      	uxth	r3, r3
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	4313      	orrs	r3, r2
 8005056:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800505e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	031b      	lsls	r3, r3, #12
 8005064:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	4313      	orrs	r3, r2
 800506c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	621a      	str	r2, [r3, #32]
}
 800507a:	bf00      	nop
 800507c:	371c      	adds	r7, #28
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005086:	b480      	push	{r7}
 8005088:	b085      	sub	sp, #20
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
 800508e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	f043 0307 	orr.w	r3, r3, #7
 80050a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	609a      	str	r2, [r3, #8]
}
 80050b0:	bf00      	nop
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050bc:	b480      	push	{r7}
 80050be:	b087      	sub	sp, #28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
 80050c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	021a      	lsls	r2, r3, #8
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	431a      	orrs	r2, r3
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	609a      	str	r2, [r3, #8]
}
 80050f0:	bf00      	nop
 80050f2:	371c      	adds	r7, #28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	f003 031f 	and.w	r3, r3, #31
 800510e:	2201      	movs	r2, #1
 8005110:	fa02 f303 	lsl.w	r3, r2, r3
 8005114:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6a1a      	ldr	r2, [r3, #32]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	43db      	mvns	r3, r3
 800511e:	401a      	ands	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a1a      	ldr	r2, [r3, #32]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f003 031f 	and.w	r3, r3, #31
 800512e:	6879      	ldr	r1, [r7, #4]
 8005130:	fa01 f303 	lsl.w	r3, r1, r3
 8005134:	431a      	orrs	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	621a      	str	r2, [r3, #32]
}
 800513a:	bf00      	nop
 800513c:	371c      	adds	r7, #28
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
	...

08005148 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d109      	bne.n	800516c <HAL_TIMEx_PWMN_Start+0x24>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b01      	cmp	r3, #1
 8005162:	bf14      	ite	ne
 8005164:	2301      	movne	r3, #1
 8005166:	2300      	moveq	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	e022      	b.n	80051b2 <HAL_TIMEx_PWMN_Start+0x6a>
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	2b04      	cmp	r3, #4
 8005170:	d109      	bne.n	8005186 <HAL_TIMEx_PWMN_Start+0x3e>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b01      	cmp	r3, #1
 800517c:	bf14      	ite	ne
 800517e:	2301      	movne	r3, #1
 8005180:	2300      	moveq	r3, #0
 8005182:	b2db      	uxtb	r3, r3
 8005184:	e015      	b.n	80051b2 <HAL_TIMEx_PWMN_Start+0x6a>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b08      	cmp	r3, #8
 800518a:	d109      	bne.n	80051a0 <HAL_TIMEx_PWMN_Start+0x58>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b01      	cmp	r3, #1
 8005196:	bf14      	ite	ne
 8005198:	2301      	movne	r3, #1
 800519a:	2300      	moveq	r3, #0
 800519c:	b2db      	uxtb	r3, r3
 800519e:	e008      	b.n	80051b2 <HAL_TIMEx_PWMN_Start+0x6a>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	bf14      	ite	ne
 80051ac:	2301      	movne	r3, #1
 80051ae:	2300      	moveq	r3, #0
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e06d      	b.n	8005296 <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d104      	bne.n	80051ca <HAL_TIMEx_PWMN_Start+0x82>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051c8:	e013      	b.n	80051f2 <HAL_TIMEx_PWMN_Start+0xaa>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b04      	cmp	r3, #4
 80051ce:	d104      	bne.n	80051da <HAL_TIMEx_PWMN_Start+0x92>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051d8:	e00b      	b.n	80051f2 <HAL_TIMEx_PWMN_Start+0xaa>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d104      	bne.n	80051ea <HAL_TIMEx_PWMN_Start+0xa2>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051e8:	e003      	b.n	80051f2 <HAL_TIMEx_PWMN_Start+0xaa>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2202      	movs	r2, #2
 80051ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2204      	movs	r2, #4
 80051f8:	6839      	ldr	r1, [r7, #0]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 f99e 	bl	800553c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800520e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a22      	ldr	r2, [pc, #136]	; (80052a0 <HAL_TIMEx_PWMN_Start+0x158>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d022      	beq.n	8005260 <HAL_TIMEx_PWMN_Start+0x118>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005222:	d01d      	beq.n	8005260 <HAL_TIMEx_PWMN_Start+0x118>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1e      	ldr	r2, [pc, #120]	; (80052a4 <HAL_TIMEx_PWMN_Start+0x15c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d018      	beq.n	8005260 <HAL_TIMEx_PWMN_Start+0x118>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a1d      	ldr	r2, [pc, #116]	; (80052a8 <HAL_TIMEx_PWMN_Start+0x160>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d013      	beq.n	8005260 <HAL_TIMEx_PWMN_Start+0x118>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a1b      	ldr	r2, [pc, #108]	; (80052ac <HAL_TIMEx_PWMN_Start+0x164>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d00e      	beq.n	8005260 <HAL_TIMEx_PWMN_Start+0x118>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a1a      	ldr	r2, [pc, #104]	; (80052b0 <HAL_TIMEx_PWMN_Start+0x168>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d009      	beq.n	8005260 <HAL_TIMEx_PWMN_Start+0x118>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a18      	ldr	r2, [pc, #96]	; (80052b4 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d004      	beq.n	8005260 <HAL_TIMEx_PWMN_Start+0x118>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a17      	ldr	r2, [pc, #92]	; (80052b8 <HAL_TIMEx_PWMN_Start+0x170>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d111      	bne.n	8005284 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2b06      	cmp	r3, #6
 8005270:	d010      	beq.n	8005294 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f042 0201 	orr.w	r2, r2, #1
 8005280:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005282:	e007      	b.n	8005294 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0201 	orr.w	r2, r2, #1
 8005292:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	40010000 	.word	0x40010000
 80052a4:	40000400 	.word	0x40000400
 80052a8:	40000800 	.word	0x40000800
 80052ac:	40000c00 	.word	0x40000c00
 80052b0:	40010400 	.word	0x40010400
 80052b4:	40014000 	.word	0x40014000
 80052b8:	40001800 	.word	0x40001800

080052bc <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2200      	movs	r2, #0
 80052cc:	6839      	ldr	r1, [r7, #0]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 f934 	bl	800553c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6a1a      	ldr	r2, [r3, #32]
 80052da:	f241 1311 	movw	r3, #4369	; 0x1111
 80052de:	4013      	ands	r3, r2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10f      	bne.n	8005304 <HAL_TIMEx_PWMN_Stop+0x48>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6a1a      	ldr	r2, [r3, #32]
 80052ea:	f240 4344 	movw	r3, #1092	; 0x444
 80052ee:	4013      	ands	r3, r2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d107      	bne.n	8005304 <HAL_TIMEx_PWMN_Stop+0x48>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005302:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6a1a      	ldr	r2, [r3, #32]
 800530a:	f241 1311 	movw	r3, #4369	; 0x1111
 800530e:	4013      	ands	r3, r2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10f      	bne.n	8005334 <HAL_TIMEx_PWMN_Stop+0x78>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6a1a      	ldr	r2, [r3, #32]
 800531a:	f240 4344 	movw	r3, #1092	; 0x444
 800531e:	4013      	ands	r3, r2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d107      	bne.n	8005334 <HAL_TIMEx_PWMN_Stop+0x78>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0201 	bic.w	r2, r2, #1
 8005332:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d104      	bne.n	8005344 <HAL_TIMEx_PWMN_Stop+0x88>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005342:	e013      	b.n	800536c <HAL_TIMEx_PWMN_Stop+0xb0>
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	2b04      	cmp	r3, #4
 8005348:	d104      	bne.n	8005354 <HAL_TIMEx_PWMN_Stop+0x98>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005352:	e00b      	b.n	800536c <HAL_TIMEx_PWMN_Stop+0xb0>
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	2b08      	cmp	r3, #8
 8005358:	d104      	bne.n	8005364 <HAL_TIMEx_PWMN_Stop+0xa8>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005362:	e003      	b.n	800536c <HAL_TIMEx_PWMN_Stop+0xb0>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
	...

08005378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005388:	2b01      	cmp	r3, #1
 800538a:	d101      	bne.n	8005390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800538c:	2302      	movs	r3, #2
 800538e:	e05a      	b.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a21      	ldr	r2, [pc, #132]	; (8005454 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d022      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053dc:	d01d      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1d      	ldr	r2, [pc, #116]	; (8005458 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d018      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a1b      	ldr	r2, [pc, #108]	; (800545c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d013      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a1a      	ldr	r2, [pc, #104]	; (8005460 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00e      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a18      	ldr	r2, [pc, #96]	; (8005464 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d009      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a17      	ldr	r2, [pc, #92]	; (8005468 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d004      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a15      	ldr	r2, [pc, #84]	; (800546c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d10c      	bne.n	8005434 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005420:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	4313      	orrs	r3, r2
 800542a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40010000 	.word	0x40010000
 8005458:	40000400 	.word	0x40000400
 800545c:	40000800 	.word	0x40000800
 8005460:	40000c00 	.word	0x40000c00
 8005464:	40010400 	.word	0x40010400
 8005468:	40014000 	.word	0x40014000
 800546c:	40001800 	.word	0x40001800

08005470 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005484:	2b01      	cmp	r3, #1
 8005486:	d101      	bne.n	800548c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005488:	2302      	movs	r3, #2
 800548a:	e03d      	b.n	8005508 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f003 031f 	and.w	r3, r3, #31
 800554e:	2204      	movs	r2, #4
 8005550:	fa02 f303 	lsl.w	r3, r2, r3
 8005554:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a1a      	ldr	r2, [r3, #32]
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	43db      	mvns	r3, r3
 800555e:	401a      	ands	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6a1a      	ldr	r2, [r3, #32]
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f003 031f 	and.w	r3, r3, #31
 800556e:	6879      	ldr	r1, [r7, #4]
 8005570:	fa01 f303 	lsl.w	r3, r1, r3
 8005574:	431a      	orrs	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	621a      	str	r2, [r3, #32]
}
 800557a:	bf00      	nop
 800557c:	371c      	adds	r7, #28
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b082      	sub	sp, #8
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e03f      	b.n	8005618 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d106      	bne.n	80055b2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7fc f9ff 	bl	80019b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2224      	movs	r2, #36	; 0x24
 80055b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055c8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fdc6 	bl	800615c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	691a      	ldr	r2, [r3, #16]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	695a      	ldr	r2, [r3, #20]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055ee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055fe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2220      	movs	r2, #32
 800560a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2220      	movs	r2, #32
 8005612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b08c      	sub	sp, #48	; 0x30
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	4613      	mov	r3, r2
 800562c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b20      	cmp	r3, #32
 8005638:	d165      	bne.n	8005706 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <HAL_UART_Transmit_DMA+0x26>
 8005640:	88fb      	ldrh	r3, [r7, #6]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e05e      	b.n	8005708 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005650:	2b01      	cmp	r3, #1
 8005652:	d101      	bne.n	8005658 <HAL_UART_Transmit_DMA+0x38>
 8005654:	2302      	movs	r3, #2
 8005656:	e057      	b.n	8005708 <HAL_UART_Transmit_DMA+0xe8>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	88fa      	ldrh	r2, [r7, #6]
 800566a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	88fa      	ldrh	r2, [r7, #6]
 8005670:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2221      	movs	r2, #33	; 0x21
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005684:	4a22      	ldr	r2, [pc, #136]	; (8005710 <HAL_UART_Transmit_DMA+0xf0>)
 8005686:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568c:	4a21      	ldr	r2, [pc, #132]	; (8005714 <HAL_UART_Transmit_DMA+0xf4>)
 800568e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005694:	4a20      	ldr	r2, [pc, #128]	; (8005718 <HAL_UART_Transmit_DMA+0xf8>)
 8005696:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569c:	2200      	movs	r2, #0
 800569e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80056a0:	f107 0308 	add.w	r3, r7, #8
 80056a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80056aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ac:	6819      	ldr	r1, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3304      	adds	r3, #4
 80056b4:	461a      	mov	r2, r3
 80056b6:	88fb      	ldrh	r3, [r7, #6]
 80056b8:	f7fc fe0c 	bl	80022d4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056c4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3314      	adds	r3, #20
 80056d4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	e853 3f00 	ldrex	r3, [r3]
 80056dc:	617b      	str	r3, [r7, #20]
   return(result);
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3314      	adds	r3, #20
 80056ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056ee:	627a      	str	r2, [r7, #36]	; 0x24
 80056f0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f2:	6a39      	ldr	r1, [r7, #32]
 80056f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f6:	e841 2300 	strex	r3, r2, [r1]
 80056fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1e5      	bne.n	80056ce <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	e000      	b.n	8005708 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005706:	2302      	movs	r3, #2
  }
}
 8005708:	4618      	mov	r0, r3
 800570a:	3730      	adds	r7, #48	; 0x30
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	08005c8d 	.word	0x08005c8d
 8005714:	08005d27 	.word	0x08005d27
 8005718:	08005d43 	.word	0x08005d43

0800571c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b0ba      	sub	sp, #232	; 0xe8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005742:	2300      	movs	r3, #0
 8005744:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005748:	2300      	movs	r3, #0
 800574a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800574e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800575a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10f      	bne.n	8005782 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005766:	f003 0320 	and.w	r3, r3, #32
 800576a:	2b00      	cmp	r3, #0
 800576c:	d009      	beq.n	8005782 <HAL_UART_IRQHandler+0x66>
 800576e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fc32 	bl	8005fe4 <UART_Receive_IT>
      return;
 8005780:	e256      	b.n	8005c30 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005782:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005786:	2b00      	cmp	r3, #0
 8005788:	f000 80de 	beq.w	8005948 <HAL_UART_IRQHandler+0x22c>
 800578c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b00      	cmp	r3, #0
 8005796:	d106      	bne.n	80057a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800579c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 80d1 	beq.w	8005948 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00b      	beq.n	80057ca <HAL_UART_IRQHandler+0xae>
 80057b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d005      	beq.n	80057ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	f043 0201 	orr.w	r2, r3, #1
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ce:	f003 0304 	and.w	r3, r3, #4
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00b      	beq.n	80057ee <HAL_UART_IRQHandler+0xd2>
 80057d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d005      	beq.n	80057ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	f043 0202 	orr.w	r2, r3, #2
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00b      	beq.n	8005812 <HAL_UART_IRQHandler+0xf6>
 80057fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d005      	beq.n	8005812 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	f043 0204 	orr.w	r2, r3, #4
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005816:	f003 0308 	and.w	r3, r3, #8
 800581a:	2b00      	cmp	r3, #0
 800581c:	d011      	beq.n	8005842 <HAL_UART_IRQHandler+0x126>
 800581e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005822:	f003 0320 	and.w	r3, r3, #32
 8005826:	2b00      	cmp	r3, #0
 8005828:	d105      	bne.n	8005836 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800582a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d005      	beq.n	8005842 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	f043 0208 	orr.w	r2, r3, #8
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 81ed 	beq.w	8005c26 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800584c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005850:	f003 0320 	and.w	r3, r3, #32
 8005854:	2b00      	cmp	r3, #0
 8005856:	d008      	beq.n	800586a <HAL_UART_IRQHandler+0x14e>
 8005858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800585c:	f003 0320 	and.w	r3, r3, #32
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 fbbd 	bl	8005fe4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005874:	2b40      	cmp	r3, #64	; 0x40
 8005876:	bf0c      	ite	eq
 8005878:	2301      	moveq	r3, #1
 800587a:	2300      	movne	r3, #0
 800587c:	b2db      	uxtb	r3, r3
 800587e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	f003 0308 	and.w	r3, r3, #8
 800588a:	2b00      	cmp	r3, #0
 800588c:	d103      	bne.n	8005896 <HAL_UART_IRQHandler+0x17a>
 800588e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005892:	2b00      	cmp	r3, #0
 8005894:	d04f      	beq.n	8005936 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fac5 	bl	8005e26 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a6:	2b40      	cmp	r3, #64	; 0x40
 80058a8:	d141      	bne.n	800592e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	3314      	adds	r3, #20
 80058b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058b8:	e853 3f00 	ldrex	r3, [r3]
 80058bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80058c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3314      	adds	r3, #20
 80058d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80058d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80058da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80058e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80058e6:	e841 2300 	strex	r3, r2, [r1]
 80058ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80058ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1d9      	bne.n	80058aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d013      	beq.n	8005926 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005902:	4a7d      	ldr	r2, [pc, #500]	; (8005af8 <HAL_UART_IRQHandler+0x3dc>)
 8005904:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590a:	4618      	mov	r0, r3
 800590c:	f7fc fdaa 	bl	8002464 <HAL_DMA_Abort_IT>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d016      	beq.n	8005944 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005920:	4610      	mov	r0, r2
 8005922:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005924:	e00e      	b.n	8005944 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f99a 	bl	8005c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800592c:	e00a      	b.n	8005944 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f996 	bl	8005c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005934:	e006      	b.n	8005944 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f992 	bl	8005c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005942:	e170      	b.n	8005c26 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005944:	bf00      	nop
    return;
 8005946:	e16e      	b.n	8005c26 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594c:	2b01      	cmp	r3, #1
 800594e:	f040 814a 	bne.w	8005be6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005956:	f003 0310 	and.w	r3, r3, #16
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 8143 	beq.w	8005be6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005964:	f003 0310 	and.w	r3, r3, #16
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 813c 	beq.w	8005be6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800596e:	2300      	movs	r3, #0
 8005970:	60bb      	str	r3, [r7, #8]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	60bb      	str	r3, [r7, #8]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	60bb      	str	r3, [r7, #8]
 8005982:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598e:	2b40      	cmp	r3, #64	; 0x40
 8005990:	f040 80b4 	bne.w	8005afc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 8140 	beq.w	8005c2a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059b2:	429a      	cmp	r2, r3
 80059b4:	f080 8139 	bcs.w	8005c2a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ca:	f000 8088 	beq.w	8005ade <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	330c      	adds	r3, #12
 80059d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059dc:	e853 3f00 	ldrex	r3, [r3]
 80059e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80059e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	330c      	adds	r3, #12
 80059f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80059fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80059fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a0a:	e841 2300 	strex	r3, r2, [r1]
 8005a0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1d9      	bne.n	80059ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3314      	adds	r3, #20
 8005a20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a24:	e853 3f00 	ldrex	r3, [r3]
 8005a28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a2c:	f023 0301 	bic.w	r3, r3, #1
 8005a30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3314      	adds	r3, #20
 8005a3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a4a:	e841 2300 	strex	r3, r2, [r1]
 8005a4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1e1      	bne.n	8005a1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3314      	adds	r3, #20
 8005a5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a60:	e853 3f00 	ldrex	r3, [r3]
 8005a64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3314      	adds	r3, #20
 8005a76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a82:	e841 2300 	strex	r3, r2, [r1]
 8005a86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1e3      	bne.n	8005a56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2220      	movs	r2, #32
 8005a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	330c      	adds	r3, #12
 8005aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa6:	e853 3f00 	ldrex	r3, [r3]
 8005aaa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aae:	f023 0310 	bic.w	r3, r3, #16
 8005ab2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	330c      	adds	r3, #12
 8005abc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ac0:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ac2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ac6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ac8:	e841 2300 	strex	r3, r2, [r1]
 8005acc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1e3      	bne.n	8005a9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7fc fc53 	bl	8002384 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	4619      	mov	r1, r3
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f8c0 	bl	8005c74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005af4:	e099      	b.n	8005c2a <HAL_UART_IRQHandler+0x50e>
 8005af6:	bf00      	nop
 8005af8:	08005eed 	.word	0x08005eed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 808b 	beq.w	8005c2e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005b18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 8086 	beq.w	8005c2e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	330c      	adds	r3, #12
 8005b28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2c:	e853 3f00 	ldrex	r3, [r3]
 8005b30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	330c      	adds	r3, #12
 8005b42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005b46:	647a      	str	r2, [r7, #68]	; 0x44
 8005b48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b4e:	e841 2300 	strex	r3, r2, [r1]
 8005b52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1e3      	bne.n	8005b22 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3314      	adds	r3, #20
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	e853 3f00 	ldrex	r3, [r3]
 8005b68:	623b      	str	r3, [r7, #32]
   return(result);
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	f023 0301 	bic.w	r3, r3, #1
 8005b70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	3314      	adds	r3, #20
 8005b7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b7e:	633a      	str	r2, [r7, #48]	; 0x30
 8005b80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b86:	e841 2300 	strex	r3, r2, [r1]
 8005b8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1e3      	bne.n	8005b5a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	330c      	adds	r3, #12
 8005ba6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	e853 3f00 	ldrex	r3, [r3]
 8005bae:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f023 0310 	bic.w	r3, r3, #16
 8005bb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	330c      	adds	r3, #12
 8005bc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005bc4:	61fa      	str	r2, [r7, #28]
 8005bc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc8:	69b9      	ldr	r1, [r7, #24]
 8005bca:	69fa      	ldr	r2, [r7, #28]
 8005bcc:	e841 2300 	strex	r3, r2, [r1]
 8005bd0:	617b      	str	r3, [r7, #20]
   return(result);
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1e3      	bne.n	8005ba0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005bdc:	4619      	mov	r1, r3
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 f848 	bl	8005c74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005be4:	e023      	b.n	8005c2e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d009      	beq.n	8005c06 <HAL_UART_IRQHandler+0x4ea>
 8005bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f988 	bl	8005f14 <UART_Transmit_IT>
    return;
 8005c04:	e014      	b.n	8005c30 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00e      	beq.n	8005c30 <HAL_UART_IRQHandler+0x514>
 8005c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d008      	beq.n	8005c30 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f9c8 	bl	8005fb4 <UART_EndTransmit_IT>
    return;
 8005c24:	e004      	b.n	8005c30 <HAL_UART_IRQHandler+0x514>
    return;
 8005c26:	bf00      	nop
 8005c28:	e002      	b.n	8005c30 <HAL_UART_IRQHandler+0x514>
      return;
 8005c2a:	bf00      	nop
 8005c2c:	e000      	b.n	8005c30 <HAL_UART_IRQHandler+0x514>
      return;
 8005c2e:	bf00      	nop
  }
}
 8005c30:	37e8      	adds	r7, #232	; 0xe8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop

08005c38 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b090      	sub	sp, #64	; 0x40
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c98:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d137      	bne.n	8005d18 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005caa:	2200      	movs	r2, #0
 8005cac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3314      	adds	r3, #20
 8005cb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	e853 3f00 	ldrex	r3, [r3]
 8005cbc:	623b      	str	r3, [r7, #32]
   return(result);
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	3314      	adds	r3, #20
 8005ccc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cce:	633a      	str	r2, [r7, #48]	; 0x30
 8005cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e5      	bne.n	8005cae <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	330c      	adds	r3, #12
 8005ce8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	e853 3f00 	ldrex	r3, [r3]
 8005cf0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cf8:	637b      	str	r3, [r7, #52]	; 0x34
 8005cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	330c      	adds	r3, #12
 8005d00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d02:	61fa      	str	r2, [r7, #28]
 8005d04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	69b9      	ldr	r1, [r7, #24]
 8005d08:	69fa      	ldr	r2, [r7, #28]
 8005d0a:	e841 2300 	strex	r3, r2, [r1]
 8005d0e:	617b      	str	r3, [r7, #20]
   return(result);
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1e5      	bne.n	8005ce2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d16:	e002      	b.n	8005d1e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005d18:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005d1a:	f7fc f887 	bl	8001e2c <HAL_UART_TxCpltCallback>
}
 8005d1e:	bf00      	nop
 8005d20:	3740      	adds	r7, #64	; 0x40
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b084      	sub	sp, #16
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d32:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f7ff ff7f 	bl	8005c38 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d3a:	bf00      	nop
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b084      	sub	sp, #16
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d52:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d5e:	2b80      	cmp	r3, #128	; 0x80
 8005d60:	bf0c      	ite	eq
 8005d62:	2301      	moveq	r3, #1
 8005d64:	2300      	movne	r3, #0
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b21      	cmp	r3, #33	; 0x21
 8005d74:	d108      	bne.n	8005d88 <UART_DMAError+0x46>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d005      	beq.n	8005d88 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005d82:	68b8      	ldr	r0, [r7, #8]
 8005d84:	f000 f827 	bl	8005dd6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d92:	2b40      	cmp	r3, #64	; 0x40
 8005d94:	bf0c      	ite	eq
 8005d96:	2301      	moveq	r3, #1
 8005d98:	2300      	movne	r3, #0
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b22      	cmp	r3, #34	; 0x22
 8005da8:	d108      	bne.n	8005dbc <UART_DMAError+0x7a>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d005      	beq.n	8005dbc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	2200      	movs	r2, #0
 8005db4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005db6:	68b8      	ldr	r0, [r7, #8]
 8005db8:	f000 f835 	bl	8005e26 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc0:	f043 0210 	orr.w	r2, r3, #16
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dc8:	68b8      	ldr	r0, [r7, #8]
 8005dca:	f7ff ff49 	bl	8005c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dce:	bf00      	nop
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b089      	sub	sp, #36	; 0x24
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	330c      	adds	r3, #12
 8005de4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	e853 3f00 	ldrex	r3, [r3]
 8005dec:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005df4:	61fb      	str	r3, [r7, #28]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	330c      	adds	r3, #12
 8005dfc:	69fa      	ldr	r2, [r7, #28]
 8005dfe:	61ba      	str	r2, [r7, #24]
 8005e00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e02:	6979      	ldr	r1, [r7, #20]
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	e841 2300 	strex	r3, r2, [r1]
 8005e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1e5      	bne.n	8005dde <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2220      	movs	r2, #32
 8005e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005e1a:	bf00      	nop
 8005e1c:	3724      	adds	r7, #36	; 0x24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b095      	sub	sp, #84	; 0x54
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	330c      	adds	r3, #12
 8005e34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	330c      	adds	r3, #12
 8005e4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e4e:	643a      	str	r2, [r7, #64]	; 0x40
 8005e50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e5      	bne.n	8005e2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3314      	adds	r3, #20
 8005e68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6a:	6a3b      	ldr	r3, [r7, #32]
 8005e6c:	e853 3f00 	ldrex	r3, [r3]
 8005e70:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	f023 0301 	bic.w	r3, r3, #1
 8005e78:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3314      	adds	r3, #20
 8005e80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e8a:	e841 2300 	strex	r3, r2, [r1]
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1e5      	bne.n	8005e62 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d119      	bne.n	8005ed2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	330c      	adds	r3, #12
 8005ea4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	e853 3f00 	ldrex	r3, [r3]
 8005eac:	60bb      	str	r3, [r7, #8]
   return(result);
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	f023 0310 	bic.w	r3, r3, #16
 8005eb4:	647b      	str	r3, [r7, #68]	; 0x44
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	330c      	adds	r3, #12
 8005ebc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ebe:	61ba      	str	r2, [r7, #24]
 8005ec0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec2:	6979      	ldr	r1, [r7, #20]
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	e841 2300 	strex	r3, r2, [r1]
 8005eca:	613b      	str	r3, [r7, #16]
   return(result);
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1e5      	bne.n	8005e9e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005ee0:	bf00      	nop
 8005ee2:	3754      	adds	r7, #84	; 0x54
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f7ff feaa 	bl	8005c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f0c:	bf00      	nop
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b21      	cmp	r3, #33	; 0x21
 8005f26:	d13e      	bne.n	8005fa6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f30:	d114      	bne.n	8005f5c <UART_Transmit_IT+0x48>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d110      	bne.n	8005f5c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	461a      	mov	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f4e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	1c9a      	adds	r2, r3, #2
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	621a      	str	r2, [r3, #32]
 8005f5a:	e008      	b.n	8005f6e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a1b      	ldr	r3, [r3, #32]
 8005f60:	1c59      	adds	r1, r3, #1
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	6211      	str	r1, [r2, #32]
 8005f66:	781a      	ldrb	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	3b01      	subs	r3, #1
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10f      	bne.n	8005fa2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68da      	ldr	r2, [r3, #12]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68da      	ldr	r2, [r3, #12]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fa0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	e000      	b.n	8005fa8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005fa6:	2302      	movs	r3, #2
  }
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3714      	adds	r7, #20
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68da      	ldr	r2, [r3, #12]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2220      	movs	r2, #32
 8005fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f7fb ff29 	bl	8001e2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b08c      	sub	sp, #48	; 0x30
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b22      	cmp	r3, #34	; 0x22
 8005ff6:	f040 80ab 	bne.w	8006150 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006002:	d117      	bne.n	8006034 <UART_Receive_IT+0x50>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d113      	bne.n	8006034 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800600c:	2300      	movs	r3, #0
 800600e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006014:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	b29b      	uxth	r3, r3
 800601e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006022:	b29a      	uxth	r2, r3
 8006024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006026:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602c:	1c9a      	adds	r2, r3, #2
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	629a      	str	r2, [r3, #40]	; 0x28
 8006032:	e026      	b.n	8006082 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006038:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800603a:	2300      	movs	r3, #0
 800603c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006046:	d007      	beq.n	8006058 <UART_Receive_IT+0x74>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10a      	bne.n	8006066 <UART_Receive_IT+0x82>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d106      	bne.n	8006066 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	b2da      	uxtb	r2, r3
 8006060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006062:	701a      	strb	r2, [r3, #0]
 8006064:	e008      	b.n	8006078 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	b2db      	uxtb	r3, r3
 800606e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006072:	b2da      	uxtb	r2, r3
 8006074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006076:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006086:	b29b      	uxth	r3, r3
 8006088:	3b01      	subs	r3, #1
 800608a:	b29b      	uxth	r3, r3
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	4619      	mov	r1, r3
 8006090:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006092:	2b00      	cmp	r3, #0
 8006094:	d15a      	bne.n	800614c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68da      	ldr	r2, [r3, #12]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 0220 	bic.w	r2, r2, #32
 80060a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	695a      	ldr	r2, [r3, #20]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f022 0201 	bic.w	r2, r2, #1
 80060c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d135      	bne.n	8006142 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	330c      	adds	r3, #12
 80060e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	e853 3f00 	ldrex	r3, [r3]
 80060ea:	613b      	str	r3, [r7, #16]
   return(result);
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	f023 0310 	bic.w	r3, r3, #16
 80060f2:	627b      	str	r3, [r7, #36]	; 0x24
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	330c      	adds	r3, #12
 80060fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060fc:	623a      	str	r2, [r7, #32]
 80060fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	69f9      	ldr	r1, [r7, #28]
 8006102:	6a3a      	ldr	r2, [r7, #32]
 8006104:	e841 2300 	strex	r3, r2, [r1]
 8006108:	61bb      	str	r3, [r7, #24]
   return(result);
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e5      	bne.n	80060dc <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0310 	and.w	r3, r3, #16
 800611a:	2b10      	cmp	r3, #16
 800611c:	d10a      	bne.n	8006134 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800611e:	2300      	movs	r3, #0
 8006120:	60fb      	str	r3, [r7, #12]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	60fb      	str	r3, [r7, #12]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006138:	4619      	mov	r1, r3
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7ff fd9a 	bl	8005c74 <HAL_UARTEx_RxEventCallback>
 8006140:	e002      	b.n	8006148 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7ff fd82 	bl	8005c4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006148:	2300      	movs	r3, #0
 800614a:	e002      	b.n	8006152 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	e000      	b.n	8006152 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006150:	2302      	movs	r3, #2
  }
}
 8006152:	4618      	mov	r0, r3
 8006154:	3730      	adds	r7, #48	; 0x30
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
	...

0800615c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800615c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006160:	b0c0      	sub	sp, #256	; 0x100
 8006162:	af00      	add	r7, sp, #0
 8006164:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006178:	68d9      	ldr	r1, [r3, #12]
 800617a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	ea40 0301 	orr.w	r3, r0, r1
 8006184:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	431a      	orrs	r2, r3
 8006194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	431a      	orrs	r2, r3
 800619c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a0:	69db      	ldr	r3, [r3, #28]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80061a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80061b4:	f021 010c 	bic.w	r1, r1, #12
 80061b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061c2:	430b      	orrs	r3, r1
 80061c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80061d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d6:	6999      	ldr	r1, [r3, #24]
 80061d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	ea40 0301 	orr.w	r3, r0, r1
 80061e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	4b8f      	ldr	r3, [pc, #572]	; (8006428 <UART_SetConfig+0x2cc>)
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d005      	beq.n	80061fc <UART_SetConfig+0xa0>
 80061f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	4b8d      	ldr	r3, [pc, #564]	; (800642c <UART_SetConfig+0x2d0>)
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d104      	bne.n	8006206 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061fc:	f7fc fedc 	bl	8002fb8 <HAL_RCC_GetPCLK2Freq>
 8006200:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006204:	e003      	b.n	800620e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006206:	f7fc fec3 	bl	8002f90 <HAL_RCC_GetPCLK1Freq>
 800620a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800620e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006218:	f040 810c 	bne.w	8006434 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800621c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006220:	2200      	movs	r2, #0
 8006222:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006226:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800622a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800622e:	4622      	mov	r2, r4
 8006230:	462b      	mov	r3, r5
 8006232:	1891      	adds	r1, r2, r2
 8006234:	65b9      	str	r1, [r7, #88]	; 0x58
 8006236:	415b      	adcs	r3, r3
 8006238:	65fb      	str	r3, [r7, #92]	; 0x5c
 800623a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800623e:	4621      	mov	r1, r4
 8006240:	eb12 0801 	adds.w	r8, r2, r1
 8006244:	4629      	mov	r1, r5
 8006246:	eb43 0901 	adc.w	r9, r3, r1
 800624a:	f04f 0200 	mov.w	r2, #0
 800624e:	f04f 0300 	mov.w	r3, #0
 8006252:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006256:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800625a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800625e:	4690      	mov	r8, r2
 8006260:	4699      	mov	r9, r3
 8006262:	4623      	mov	r3, r4
 8006264:	eb18 0303 	adds.w	r3, r8, r3
 8006268:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800626c:	462b      	mov	r3, r5
 800626e:	eb49 0303 	adc.w	r3, r9, r3
 8006272:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006282:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006286:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800628a:	460b      	mov	r3, r1
 800628c:	18db      	adds	r3, r3, r3
 800628e:	653b      	str	r3, [r7, #80]	; 0x50
 8006290:	4613      	mov	r3, r2
 8006292:	eb42 0303 	adc.w	r3, r2, r3
 8006296:	657b      	str	r3, [r7, #84]	; 0x54
 8006298:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800629c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80062a0:	f7fa fc04 	bl	8000aac <__aeabi_uldivmod>
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	4b61      	ldr	r3, [pc, #388]	; (8006430 <UART_SetConfig+0x2d4>)
 80062aa:	fba3 2302 	umull	r2, r3, r3, r2
 80062ae:	095b      	lsrs	r3, r3, #5
 80062b0:	011c      	lsls	r4, r3, #4
 80062b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062b6:	2200      	movs	r2, #0
 80062b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80062c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80062c4:	4642      	mov	r2, r8
 80062c6:	464b      	mov	r3, r9
 80062c8:	1891      	adds	r1, r2, r2
 80062ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80062cc:	415b      	adcs	r3, r3
 80062ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80062d4:	4641      	mov	r1, r8
 80062d6:	eb12 0a01 	adds.w	sl, r2, r1
 80062da:	4649      	mov	r1, r9
 80062dc:	eb43 0b01 	adc.w	fp, r3, r1
 80062e0:	f04f 0200 	mov.w	r2, #0
 80062e4:	f04f 0300 	mov.w	r3, #0
 80062e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062f4:	4692      	mov	sl, r2
 80062f6:	469b      	mov	fp, r3
 80062f8:	4643      	mov	r3, r8
 80062fa:	eb1a 0303 	adds.w	r3, sl, r3
 80062fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006302:	464b      	mov	r3, r9
 8006304:	eb4b 0303 	adc.w	r3, fp, r3
 8006308:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800630c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006318:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800631c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006320:	460b      	mov	r3, r1
 8006322:	18db      	adds	r3, r3, r3
 8006324:	643b      	str	r3, [r7, #64]	; 0x40
 8006326:	4613      	mov	r3, r2
 8006328:	eb42 0303 	adc.w	r3, r2, r3
 800632c:	647b      	str	r3, [r7, #68]	; 0x44
 800632e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006332:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006336:	f7fa fbb9 	bl	8000aac <__aeabi_uldivmod>
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	4611      	mov	r1, r2
 8006340:	4b3b      	ldr	r3, [pc, #236]	; (8006430 <UART_SetConfig+0x2d4>)
 8006342:	fba3 2301 	umull	r2, r3, r3, r1
 8006346:	095b      	lsrs	r3, r3, #5
 8006348:	2264      	movs	r2, #100	; 0x64
 800634a:	fb02 f303 	mul.w	r3, r2, r3
 800634e:	1acb      	subs	r3, r1, r3
 8006350:	00db      	lsls	r3, r3, #3
 8006352:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006356:	4b36      	ldr	r3, [pc, #216]	; (8006430 <UART_SetConfig+0x2d4>)
 8006358:	fba3 2302 	umull	r2, r3, r3, r2
 800635c:	095b      	lsrs	r3, r3, #5
 800635e:	005b      	lsls	r3, r3, #1
 8006360:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006364:	441c      	add	r4, r3
 8006366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800636a:	2200      	movs	r2, #0
 800636c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006370:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006374:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006378:	4642      	mov	r2, r8
 800637a:	464b      	mov	r3, r9
 800637c:	1891      	adds	r1, r2, r2
 800637e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006380:	415b      	adcs	r3, r3
 8006382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006384:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006388:	4641      	mov	r1, r8
 800638a:	1851      	adds	r1, r2, r1
 800638c:	6339      	str	r1, [r7, #48]	; 0x30
 800638e:	4649      	mov	r1, r9
 8006390:	414b      	adcs	r3, r1
 8006392:	637b      	str	r3, [r7, #52]	; 0x34
 8006394:	f04f 0200 	mov.w	r2, #0
 8006398:	f04f 0300 	mov.w	r3, #0
 800639c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80063a0:	4659      	mov	r1, fp
 80063a2:	00cb      	lsls	r3, r1, #3
 80063a4:	4651      	mov	r1, sl
 80063a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063aa:	4651      	mov	r1, sl
 80063ac:	00ca      	lsls	r2, r1, #3
 80063ae:	4610      	mov	r0, r2
 80063b0:	4619      	mov	r1, r3
 80063b2:	4603      	mov	r3, r0
 80063b4:	4642      	mov	r2, r8
 80063b6:	189b      	adds	r3, r3, r2
 80063b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063bc:	464b      	mov	r3, r9
 80063be:	460a      	mov	r2, r1
 80063c0:	eb42 0303 	adc.w	r3, r2, r3
 80063c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80063d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80063d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80063dc:	460b      	mov	r3, r1
 80063de:	18db      	adds	r3, r3, r3
 80063e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80063e2:	4613      	mov	r3, r2
 80063e4:	eb42 0303 	adc.w	r3, r2, r3
 80063e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80063f2:	f7fa fb5b 	bl	8000aac <__aeabi_uldivmod>
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
 80063fa:	4b0d      	ldr	r3, [pc, #52]	; (8006430 <UART_SetConfig+0x2d4>)
 80063fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006400:	095b      	lsrs	r3, r3, #5
 8006402:	2164      	movs	r1, #100	; 0x64
 8006404:	fb01 f303 	mul.w	r3, r1, r3
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	00db      	lsls	r3, r3, #3
 800640c:	3332      	adds	r3, #50	; 0x32
 800640e:	4a08      	ldr	r2, [pc, #32]	; (8006430 <UART_SetConfig+0x2d4>)
 8006410:	fba2 2303 	umull	r2, r3, r2, r3
 8006414:	095b      	lsrs	r3, r3, #5
 8006416:	f003 0207 	and.w	r2, r3, #7
 800641a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4422      	add	r2, r4
 8006422:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006424:	e105      	b.n	8006632 <UART_SetConfig+0x4d6>
 8006426:	bf00      	nop
 8006428:	40011000 	.word	0x40011000
 800642c:	40011400 	.word	0x40011400
 8006430:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006434:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006438:	2200      	movs	r2, #0
 800643a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800643e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006442:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006446:	4642      	mov	r2, r8
 8006448:	464b      	mov	r3, r9
 800644a:	1891      	adds	r1, r2, r2
 800644c:	6239      	str	r1, [r7, #32]
 800644e:	415b      	adcs	r3, r3
 8006450:	627b      	str	r3, [r7, #36]	; 0x24
 8006452:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006456:	4641      	mov	r1, r8
 8006458:	1854      	adds	r4, r2, r1
 800645a:	4649      	mov	r1, r9
 800645c:	eb43 0501 	adc.w	r5, r3, r1
 8006460:	f04f 0200 	mov.w	r2, #0
 8006464:	f04f 0300 	mov.w	r3, #0
 8006468:	00eb      	lsls	r3, r5, #3
 800646a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800646e:	00e2      	lsls	r2, r4, #3
 8006470:	4614      	mov	r4, r2
 8006472:	461d      	mov	r5, r3
 8006474:	4643      	mov	r3, r8
 8006476:	18e3      	adds	r3, r4, r3
 8006478:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800647c:	464b      	mov	r3, r9
 800647e:	eb45 0303 	adc.w	r3, r5, r3
 8006482:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006492:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006496:	f04f 0200 	mov.w	r2, #0
 800649a:	f04f 0300 	mov.w	r3, #0
 800649e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80064a2:	4629      	mov	r1, r5
 80064a4:	008b      	lsls	r3, r1, #2
 80064a6:	4621      	mov	r1, r4
 80064a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064ac:	4621      	mov	r1, r4
 80064ae:	008a      	lsls	r2, r1, #2
 80064b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80064b4:	f7fa fafa 	bl	8000aac <__aeabi_uldivmod>
 80064b8:	4602      	mov	r2, r0
 80064ba:	460b      	mov	r3, r1
 80064bc:	4b60      	ldr	r3, [pc, #384]	; (8006640 <UART_SetConfig+0x4e4>)
 80064be:	fba3 2302 	umull	r2, r3, r3, r2
 80064c2:	095b      	lsrs	r3, r3, #5
 80064c4:	011c      	lsls	r4, r3, #4
 80064c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064ca:	2200      	movs	r2, #0
 80064cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80064d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80064d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80064d8:	4642      	mov	r2, r8
 80064da:	464b      	mov	r3, r9
 80064dc:	1891      	adds	r1, r2, r2
 80064de:	61b9      	str	r1, [r7, #24]
 80064e0:	415b      	adcs	r3, r3
 80064e2:	61fb      	str	r3, [r7, #28]
 80064e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064e8:	4641      	mov	r1, r8
 80064ea:	1851      	adds	r1, r2, r1
 80064ec:	6139      	str	r1, [r7, #16]
 80064ee:	4649      	mov	r1, r9
 80064f0:	414b      	adcs	r3, r1
 80064f2:	617b      	str	r3, [r7, #20]
 80064f4:	f04f 0200 	mov.w	r2, #0
 80064f8:	f04f 0300 	mov.w	r3, #0
 80064fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006500:	4659      	mov	r1, fp
 8006502:	00cb      	lsls	r3, r1, #3
 8006504:	4651      	mov	r1, sl
 8006506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800650a:	4651      	mov	r1, sl
 800650c:	00ca      	lsls	r2, r1, #3
 800650e:	4610      	mov	r0, r2
 8006510:	4619      	mov	r1, r3
 8006512:	4603      	mov	r3, r0
 8006514:	4642      	mov	r2, r8
 8006516:	189b      	adds	r3, r3, r2
 8006518:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800651c:	464b      	mov	r3, r9
 800651e:	460a      	mov	r2, r1
 8006520:	eb42 0303 	adc.w	r3, r2, r3
 8006524:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	67bb      	str	r3, [r7, #120]	; 0x78
 8006532:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006534:	f04f 0200 	mov.w	r2, #0
 8006538:	f04f 0300 	mov.w	r3, #0
 800653c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006540:	4649      	mov	r1, r9
 8006542:	008b      	lsls	r3, r1, #2
 8006544:	4641      	mov	r1, r8
 8006546:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800654a:	4641      	mov	r1, r8
 800654c:	008a      	lsls	r2, r1, #2
 800654e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006552:	f7fa faab 	bl	8000aac <__aeabi_uldivmod>
 8006556:	4602      	mov	r2, r0
 8006558:	460b      	mov	r3, r1
 800655a:	4b39      	ldr	r3, [pc, #228]	; (8006640 <UART_SetConfig+0x4e4>)
 800655c:	fba3 1302 	umull	r1, r3, r3, r2
 8006560:	095b      	lsrs	r3, r3, #5
 8006562:	2164      	movs	r1, #100	; 0x64
 8006564:	fb01 f303 	mul.w	r3, r1, r3
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	011b      	lsls	r3, r3, #4
 800656c:	3332      	adds	r3, #50	; 0x32
 800656e:	4a34      	ldr	r2, [pc, #208]	; (8006640 <UART_SetConfig+0x4e4>)
 8006570:	fba2 2303 	umull	r2, r3, r2, r3
 8006574:	095b      	lsrs	r3, r3, #5
 8006576:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800657a:	441c      	add	r4, r3
 800657c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006580:	2200      	movs	r2, #0
 8006582:	673b      	str	r3, [r7, #112]	; 0x70
 8006584:	677a      	str	r2, [r7, #116]	; 0x74
 8006586:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800658a:	4642      	mov	r2, r8
 800658c:	464b      	mov	r3, r9
 800658e:	1891      	adds	r1, r2, r2
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	415b      	adcs	r3, r3
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800659a:	4641      	mov	r1, r8
 800659c:	1851      	adds	r1, r2, r1
 800659e:	6039      	str	r1, [r7, #0]
 80065a0:	4649      	mov	r1, r9
 80065a2:	414b      	adcs	r3, r1
 80065a4:	607b      	str	r3, [r7, #4]
 80065a6:	f04f 0200 	mov.w	r2, #0
 80065aa:	f04f 0300 	mov.w	r3, #0
 80065ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80065b2:	4659      	mov	r1, fp
 80065b4:	00cb      	lsls	r3, r1, #3
 80065b6:	4651      	mov	r1, sl
 80065b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065bc:	4651      	mov	r1, sl
 80065be:	00ca      	lsls	r2, r1, #3
 80065c0:	4610      	mov	r0, r2
 80065c2:	4619      	mov	r1, r3
 80065c4:	4603      	mov	r3, r0
 80065c6:	4642      	mov	r2, r8
 80065c8:	189b      	adds	r3, r3, r2
 80065ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80065cc:	464b      	mov	r3, r9
 80065ce:	460a      	mov	r2, r1
 80065d0:	eb42 0303 	adc.w	r3, r2, r3
 80065d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	663b      	str	r3, [r7, #96]	; 0x60
 80065e0:	667a      	str	r2, [r7, #100]	; 0x64
 80065e2:	f04f 0200 	mov.w	r2, #0
 80065e6:	f04f 0300 	mov.w	r3, #0
 80065ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80065ee:	4649      	mov	r1, r9
 80065f0:	008b      	lsls	r3, r1, #2
 80065f2:	4641      	mov	r1, r8
 80065f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065f8:	4641      	mov	r1, r8
 80065fa:	008a      	lsls	r2, r1, #2
 80065fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006600:	f7fa fa54 	bl	8000aac <__aeabi_uldivmod>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	4b0d      	ldr	r3, [pc, #52]	; (8006640 <UART_SetConfig+0x4e4>)
 800660a:	fba3 1302 	umull	r1, r3, r3, r2
 800660e:	095b      	lsrs	r3, r3, #5
 8006610:	2164      	movs	r1, #100	; 0x64
 8006612:	fb01 f303 	mul.w	r3, r1, r3
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	011b      	lsls	r3, r3, #4
 800661a:	3332      	adds	r3, #50	; 0x32
 800661c:	4a08      	ldr	r2, [pc, #32]	; (8006640 <UART_SetConfig+0x4e4>)
 800661e:	fba2 2303 	umull	r2, r3, r2, r3
 8006622:	095b      	lsrs	r3, r3, #5
 8006624:	f003 020f 	and.w	r2, r3, #15
 8006628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4422      	add	r2, r4
 8006630:	609a      	str	r2, [r3, #8]
}
 8006632:	bf00      	nop
 8006634:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006638:	46bd      	mov	sp, r7
 800663a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800663e:	bf00      	nop
 8006640:	51eb851f 	.word	0x51eb851f

08006644 <__NVIC_SetPriority>:
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	4603      	mov	r3, r0
 800664c:	6039      	str	r1, [r7, #0]
 800664e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006654:	2b00      	cmp	r3, #0
 8006656:	db0a      	blt.n	800666e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	b2da      	uxtb	r2, r3
 800665c:	490c      	ldr	r1, [pc, #48]	; (8006690 <__NVIC_SetPriority+0x4c>)
 800665e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006662:	0112      	lsls	r2, r2, #4
 8006664:	b2d2      	uxtb	r2, r2
 8006666:	440b      	add	r3, r1
 8006668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800666c:	e00a      	b.n	8006684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	b2da      	uxtb	r2, r3
 8006672:	4908      	ldr	r1, [pc, #32]	; (8006694 <__NVIC_SetPriority+0x50>)
 8006674:	79fb      	ldrb	r3, [r7, #7]
 8006676:	f003 030f 	and.w	r3, r3, #15
 800667a:	3b04      	subs	r3, #4
 800667c:	0112      	lsls	r2, r2, #4
 800667e:	b2d2      	uxtb	r2, r2
 8006680:	440b      	add	r3, r1
 8006682:	761a      	strb	r2, [r3, #24]
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	e000e100 	.word	0xe000e100
 8006694:	e000ed00 	.word	0xe000ed00

08006698 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006698:	b580      	push	{r7, lr}
 800669a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800669c:	4b05      	ldr	r3, [pc, #20]	; (80066b4 <SysTick_Handler+0x1c>)
 800669e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80066a0:	f002 fede 	bl	8009460 <xTaskGetSchedulerState>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d001      	beq.n	80066ae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80066aa:	f003 fdfd 	bl	800a2a8 <xPortSysTickHandler>
  }
}
 80066ae:	bf00      	nop
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	e000e010 	.word	0xe000e010

080066b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80066b8:	b580      	push	{r7, lr}
 80066ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80066bc:	2100      	movs	r1, #0
 80066be:	f06f 0004 	mvn.w	r0, #4
 80066c2:	f7ff ffbf 	bl	8006644 <__NVIC_SetPriority>
#endif
}
 80066c6:	bf00      	nop
 80066c8:	bd80      	pop	{r7, pc}
	...

080066cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066d2:	f3ef 8305 	mrs	r3, IPSR
 80066d6:	603b      	str	r3, [r7, #0]
  return(result);
 80066d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80066de:	f06f 0305 	mvn.w	r3, #5
 80066e2:	607b      	str	r3, [r7, #4]
 80066e4:	e00c      	b.n	8006700 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80066e6:	4b0a      	ldr	r3, [pc, #40]	; (8006710 <osKernelInitialize+0x44>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d105      	bne.n	80066fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80066ee:	4b08      	ldr	r3, [pc, #32]	; (8006710 <osKernelInitialize+0x44>)
 80066f0:	2201      	movs	r2, #1
 80066f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80066f4:	2300      	movs	r3, #0
 80066f6:	607b      	str	r3, [r7, #4]
 80066f8:	e002      	b.n	8006700 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80066fa:	f04f 33ff 	mov.w	r3, #4294967295
 80066fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006700:	687b      	ldr	r3, [r7, #4]
}
 8006702:	4618      	mov	r0, r3
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	200002cc 	.word	0x200002cc

08006714 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800671a:	f3ef 8305 	mrs	r3, IPSR
 800671e:	603b      	str	r3, [r7, #0]
  return(result);
 8006720:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006726:	f06f 0305 	mvn.w	r3, #5
 800672a:	607b      	str	r3, [r7, #4]
 800672c:	e010      	b.n	8006750 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800672e:	4b0b      	ldr	r3, [pc, #44]	; (800675c <osKernelStart+0x48>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d109      	bne.n	800674a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006736:	f7ff ffbf 	bl	80066b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800673a:	4b08      	ldr	r3, [pc, #32]	; (800675c <osKernelStart+0x48>)
 800673c:	2202      	movs	r2, #2
 800673e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006740:	f002 f994 	bl	8008a6c <vTaskStartScheduler>
      stat = osOK;
 8006744:	2300      	movs	r3, #0
 8006746:	607b      	str	r3, [r7, #4]
 8006748:	e002      	b.n	8006750 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800674a:	f04f 33ff 	mov.w	r3, #4294967295
 800674e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006750:	687b      	ldr	r3, [r7, #4]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	200002cc 	.word	0x200002cc

08006760 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006760:	b580      	push	{r7, lr}
 8006762:	b08e      	sub	sp, #56	; 0x38
 8006764:	af04      	add	r7, sp, #16
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800676c:	2300      	movs	r3, #0
 800676e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006770:	f3ef 8305 	mrs	r3, IPSR
 8006774:	617b      	str	r3, [r7, #20]
  return(result);
 8006776:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006778:	2b00      	cmp	r3, #0
 800677a:	d17f      	bne.n	800687c <osThreadNew+0x11c>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d07c      	beq.n	800687c <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8006782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006786:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006788:	2318      	movs	r3, #24
 800678a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800678c:	2300      	movs	r3, #0
 800678e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006790:	f04f 33ff 	mov.w	r3, #4294967295
 8006794:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d045      	beq.n	8006828 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d002      	beq.n	80067aa <osThreadNew+0x4a>
        name = attr->name;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d002      	beq.n	80067b8 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d008      	beq.n	80067d0 <osThreadNew+0x70>
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	2b38      	cmp	r3, #56	; 0x38
 80067c2:	d805      	bhi.n	80067d0 <osThreadNew+0x70>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <osThreadNew+0x74>
        return (NULL);
 80067d0:	2300      	movs	r3, #0
 80067d2:	e054      	b.n	800687e <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d003      	beq.n	80067e4 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	089b      	lsrs	r3, r3, #2
 80067e2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00e      	beq.n	800680a <osThreadNew+0xaa>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	2bbb      	cmp	r3, #187	; 0xbb
 80067f2:	d90a      	bls.n	800680a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d006      	beq.n	800680a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d002      	beq.n	800680a <osThreadNew+0xaa>
        mem = 1;
 8006804:	2301      	movs	r3, #1
 8006806:	61bb      	str	r3, [r7, #24]
 8006808:	e010      	b.n	800682c <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10c      	bne.n	800682c <osThreadNew+0xcc>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d108      	bne.n	800682c <osThreadNew+0xcc>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d104      	bne.n	800682c <osThreadNew+0xcc>
          mem = 0;
 8006822:	2300      	movs	r3, #0
 8006824:	61bb      	str	r3, [r7, #24]
 8006826:	e001      	b.n	800682c <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8006828:	2300      	movs	r3, #0
 800682a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d110      	bne.n	8006854 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800683a:	9202      	str	r2, [sp, #8]
 800683c:	9301      	str	r3, [sp, #4]
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	6a3a      	ldr	r2, [r7, #32]
 8006846:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f001 ff23 	bl	8008694 <xTaskCreateStatic>
 800684e:	4603      	mov	r3, r0
 8006850:	613b      	str	r3, [r7, #16]
 8006852:	e013      	b.n	800687c <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d110      	bne.n	800687c <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	b29a      	uxth	r2, r3
 800685e:	f107 0310 	add.w	r3, r7, #16
 8006862:	9301      	str	r3, [sp, #4]
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f001 ff6e 	bl	800874e <xTaskCreate>
 8006872:	4603      	mov	r3, r0
 8006874:	2b01      	cmp	r3, #1
 8006876:	d001      	beq.n	800687c <osThreadNew+0x11c>
            hTask = NULL;
 8006878:	2300      	movs	r3, #0
 800687a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800687c:	693b      	ldr	r3, [r7, #16]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3728      	adds	r7, #40	; 0x28
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006886:	b580      	push	{r7, lr}
 8006888:	b084      	sub	sp, #16
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800688e:	f3ef 8305 	mrs	r3, IPSR
 8006892:	60bb      	str	r3, [r7, #8]
  return(result);
 8006894:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <osDelay+0x1c>
    stat = osErrorISR;
 800689a:	f06f 0305 	mvn.w	r3, #5
 800689e:	60fb      	str	r3, [r7, #12]
 80068a0:	e007      	b.n	80068b2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80068a2:	2300      	movs	r3, #0
 80068a4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <osDelay+0x2c>
      vTaskDelay(ticks);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f002 f8a9 	bl	8008a04 <vTaskDelay>
    }
  }

  return (stat);
 80068b2:	68fb      	ldr	r3, [r7, #12]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80068c4:	2300      	movs	r3, #0
 80068c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068c8:	f3ef 8305 	mrs	r3, IPSR
 80068cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80068ce:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d12d      	bne.n	8006930 <osEventFlagsNew+0x74>
    mem = -1;
 80068d4:	f04f 33ff 	mov.w	r3, #4294967295
 80068d8:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d015      	beq.n	800690c <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d006      	beq.n	80068f6 <osEventFlagsNew+0x3a>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	2b1f      	cmp	r3, #31
 80068ee:	d902      	bls.n	80068f6 <osEventFlagsNew+0x3a>
        mem = 1;
 80068f0:	2301      	movs	r3, #1
 80068f2:	613b      	str	r3, [r7, #16]
 80068f4:	e00c      	b.n	8006910 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d108      	bne.n	8006910 <osEventFlagsNew+0x54>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d104      	bne.n	8006910 <osEventFlagsNew+0x54>
          mem = 0;
 8006906:	2300      	movs	r3, #0
 8006908:	613b      	str	r3, [r7, #16]
 800690a:	e001      	b.n	8006910 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800690c:	2300      	movs	r3, #0
 800690e:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d106      	bne.n	8006924 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	4618      	mov	r0, r3
 800691c:	f000 fc50 	bl	80071c0 <xEventGroupCreateStatic>
 8006920:	6178      	str	r0, [r7, #20]
 8006922:	e005      	b.n	8006930 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d102      	bne.n	8006930 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800692a:	f000 fc80 	bl	800722e <xEventGroupCreate>
 800692e:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8006930:	697b      	ldr	r3, [r7, #20]
}
 8006932:	4618      	mov	r0, r3
 8006934:	3718      	adds	r7, #24
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
	...

0800693c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d004      	beq.n	800695a <osEventFlagsSet+0x1e>
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d003      	beq.n	8006962 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800695a:	f06f 0303 	mvn.w	r3, #3
 800695e:	617b      	str	r3, [r7, #20]
 8006960:	e028      	b.n	80069b4 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006962:	f3ef 8305 	mrs	r3, IPSR
 8006966:	60fb      	str	r3, [r7, #12]
  return(result);
 8006968:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800696a:	2b00      	cmp	r3, #0
 800696c:	d01d      	beq.n	80069aa <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800696e:	2300      	movs	r3, #0
 8006970:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8006972:	f107 0308 	add.w	r3, r7, #8
 8006976:	461a      	mov	r2, r3
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	6938      	ldr	r0, [r7, #16]
 800697c:	f000 fdfa 	bl	8007574 <xEventGroupSetBitsFromISR>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d103      	bne.n	800698e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8006986:	f06f 0302 	mvn.w	r3, #2
 800698a:	617b      	str	r3, [r7, #20]
 800698c:	e012      	b.n	80069b4 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00d      	beq.n	80069b4 <osEventFlagsSet+0x78>
 8006998:	4b09      	ldr	r3, [pc, #36]	; (80069c0 <osEventFlagsSet+0x84>)
 800699a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800699e:	601a      	str	r2, [r3, #0]
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	e004      	b.n	80069b4 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80069aa:	6839      	ldr	r1, [r7, #0]
 80069ac:	6938      	ldr	r0, [r7, #16]
 80069ae:	f000 fd27 	bl	8007400 <xEventGroupSetBits>
 80069b2:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80069b4:	697b      	ldr	r3, [r7, #20]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	e000ed04 	.word	0xe000ed04

080069c4 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b08c      	sub	sp, #48	; 0x30
 80069c8:	af02      	add	r7, sp, #8
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
 80069d0:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d004      	beq.n	80069e6 <osEventFlagsWait+0x22>
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d003      	beq.n	80069ee <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80069e6:	f06f 0303 	mvn.w	r3, #3
 80069ea:	61fb      	str	r3, [r7, #28]
 80069ec:	e04b      	b.n	8006a86 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069ee:	f3ef 8305 	mrs	r3, IPSR
 80069f2:	617b      	str	r3, [r7, #20]
  return(result);
 80069f4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80069fa:	f06f 0305 	mvn.w	r3, #5
 80069fe:	61fb      	str	r3, [r7, #28]
 8006a00:	e041      	b.n	8006a86 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a10:	e001      	b.n	8006a16 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8006a12:	2300      	movs	r3, #0
 8006a14:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f003 0302 	and.w	r3, r3, #2
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d002      	beq.n	8006a26 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8006a20:	2300      	movs	r3, #0
 8006a22:	623b      	str	r3, [r7, #32]
 8006a24:	e001      	b.n	8006a2a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8006a26:	2301      	movs	r3, #1
 8006a28:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	6a3a      	ldr	r2, [r7, #32]
 8006a32:	68b9      	ldr	r1, [r7, #8]
 8006a34:	69b8      	ldr	r0, [r7, #24]
 8006a36:	f000 fc15 	bl	8007264 <xEventGroupWaitBits>
 8006a3a:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d010      	beq.n	8006a68 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d019      	beq.n	8006a86 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d003      	beq.n	8006a60 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8006a58:	f06f 0301 	mvn.w	r3, #1
 8006a5c:	61fb      	str	r3, [r7, #28]
 8006a5e:	e012      	b.n	8006a86 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8006a60:	f06f 0302 	mvn.w	r3, #2
 8006a64:	61fb      	str	r3, [r7, #28]
 8006a66:	e00e      	b.n	8006a86 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d109      	bne.n	8006a86 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d003      	beq.n	8006a80 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8006a78:	f06f 0301 	mvn.w	r3, #1
 8006a7c:	61fb      	str	r3, [r7, #28]
 8006a7e:	e002      	b.n	8006a86 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8006a80:	f06f 0302 	mvn.w	r3, #2
 8006a84:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8006a86:	69fb      	ldr	r3, [r7, #28]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3728      	adds	r7, #40	; 0x28
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b08a      	sub	sp, #40	; 0x28
 8006a94:	af02      	add	r7, sp, #8
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aa0:	f3ef 8305 	mrs	r3, IPSR
 8006aa4:	613b      	str	r3, [r7, #16]
  return(result);
 8006aa6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d15f      	bne.n	8006b6c <osMessageQueueNew+0xdc>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d05c      	beq.n	8006b6c <osMessageQueueNew+0xdc>
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d059      	beq.n	8006b6c <osMessageQueueNew+0xdc>
    mem = -1;
 8006ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8006abc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d029      	beq.n	8006b18 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d012      	beq.n	8006af2 <osMessageQueueNew+0x62>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	2b4f      	cmp	r3, #79	; 0x4f
 8006ad2:	d90e      	bls.n	8006af2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00a      	beq.n	8006af2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	695a      	ldr	r2, [r3, #20]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	68b9      	ldr	r1, [r7, #8]
 8006ae4:	fb01 f303 	mul.w	r3, r1, r3
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d302      	bcc.n	8006af2 <osMessageQueueNew+0x62>
        mem = 1;
 8006aec:	2301      	movs	r3, #1
 8006aee:	61bb      	str	r3, [r7, #24]
 8006af0:	e014      	b.n	8006b1c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d110      	bne.n	8006b1c <osMessageQueueNew+0x8c>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10c      	bne.n	8006b1c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d108      	bne.n	8006b1c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d104      	bne.n	8006b1c <osMessageQueueNew+0x8c>
          mem = 0;
 8006b12:	2300      	movs	r3, #0
 8006b14:	61bb      	str	r3, [r7, #24]
 8006b16:	e001      	b.n	8006b1c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d10b      	bne.n	8006b3a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	691a      	ldr	r2, [r3, #16]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	9100      	str	r1, [sp, #0]
 8006b2e:	68b9      	ldr	r1, [r7, #8]
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f000 fe4f 	bl	80077d4 <xQueueGenericCreateStatic>
 8006b36:	61f8      	str	r0, [r7, #28]
 8006b38:	e008      	b.n	8006b4c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d105      	bne.n	8006b4c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006b40:	2200      	movs	r2, #0
 8006b42:	68b9      	ldr	r1, [r7, #8]
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 febd 	bl	80078c4 <xQueueGenericCreate>
 8006b4a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00c      	beq.n	8006b6c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d003      	beq.n	8006b60 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	617b      	str	r3, [r7, #20]
 8006b5e:	e001      	b.n	8006b64 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006b60:	2300      	movs	r3, #0
 8006b62:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006b64:	6979      	ldr	r1, [r7, #20]
 8006b66:	69f8      	ldr	r0, [r7, #28]
 8006b68:	f001 fd36 	bl	80085d8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006b6c:	69fb      	ldr	r3, [r7, #28]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3720      	adds	r7, #32
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
	...

08006b78 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b088      	sub	sp, #32
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	603b      	str	r3, [r7, #0]
 8006b84:	4613      	mov	r3, r2
 8006b86:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b90:	f3ef 8305 	mrs	r3, IPSR
 8006b94:	617b      	str	r3, [r7, #20]
  return(result);
 8006b96:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d028      	beq.n	8006bee <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d005      	beq.n	8006bae <osMessageQueuePut+0x36>
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d002      	beq.n	8006bae <osMessageQueuePut+0x36>
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006bae:	f06f 0303 	mvn.w	r3, #3
 8006bb2:	61fb      	str	r3, [r7, #28]
 8006bb4:	e038      	b.n	8006c28 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006bba:	f107 0210 	add.w	r2, r7, #16
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	68b9      	ldr	r1, [r7, #8]
 8006bc2:	69b8      	ldr	r0, [r7, #24]
 8006bc4:	f001 f810 	bl	8007be8 <xQueueGenericSendFromISR>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d003      	beq.n	8006bd6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006bce:	f06f 0302 	mvn.w	r3, #2
 8006bd2:	61fb      	str	r3, [r7, #28]
 8006bd4:	e028      	b.n	8006c28 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d025      	beq.n	8006c28 <osMessageQueuePut+0xb0>
 8006bdc:	4b15      	ldr	r3, [pc, #84]	; (8006c34 <osMessageQueuePut+0xbc>)
 8006bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006be2:	601a      	str	r2, [r3, #0]
 8006be4:	f3bf 8f4f 	dsb	sy
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	e01c      	b.n	8006c28 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <osMessageQueuePut+0x82>
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d103      	bne.n	8006c02 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006bfa:	f06f 0303 	mvn.w	r3, #3
 8006bfe:	61fb      	str	r3, [r7, #28]
 8006c00:	e012      	b.n	8006c28 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006c02:	2300      	movs	r3, #0
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	68b9      	ldr	r1, [r7, #8]
 8006c08:	69b8      	ldr	r0, [r7, #24]
 8006c0a:	f000 feef 	bl	80079ec <xQueueGenericSend>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d009      	beq.n	8006c28 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006c1a:	f06f 0301 	mvn.w	r3, #1
 8006c1e:	61fb      	str	r3, [r7, #28]
 8006c20:	e002      	b.n	8006c28 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006c22:	f06f 0302 	mvn.w	r3, #2
 8006c26:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006c28:	69fb      	ldr	r3, [r7, #28]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3720      	adds	r7, #32
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	e000ed04 	.word	0xe000ed04

08006c38 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b088      	sub	sp, #32
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c4e:	f3ef 8305 	mrs	r3, IPSR
 8006c52:	617b      	str	r3, [r7, #20]
  return(result);
 8006c54:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d028      	beq.n	8006cac <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d005      	beq.n	8006c6c <osMessageQueueGet+0x34>
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d002      	beq.n	8006c6c <osMessageQueueGet+0x34>
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d003      	beq.n	8006c74 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006c6c:	f06f 0303 	mvn.w	r3, #3
 8006c70:	61fb      	str	r3, [r7, #28]
 8006c72:	e037      	b.n	8006ce4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006c74:	2300      	movs	r3, #0
 8006c76:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006c78:	f107 0310 	add.w	r3, r7, #16
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	68b9      	ldr	r1, [r7, #8]
 8006c80:	69b8      	ldr	r0, [r7, #24]
 8006c82:	f001 fac5 	bl	8008210 <xQueueReceiveFromISR>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d003      	beq.n	8006c94 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006c8c:	f06f 0302 	mvn.w	r3, #2
 8006c90:	61fb      	str	r3, [r7, #28]
 8006c92:	e027      	b.n	8006ce4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d024      	beq.n	8006ce4 <osMessageQueueGet+0xac>
 8006c9a:	4b15      	ldr	r3, [pc, #84]	; (8006cf0 <osMessageQueueGet+0xb8>)
 8006c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	e01b      	b.n	8006ce4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d002      	beq.n	8006cb8 <osMessageQueueGet+0x80>
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d103      	bne.n	8006cc0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006cb8:	f06f 0303 	mvn.w	r3, #3
 8006cbc:	61fb      	str	r3, [r7, #28]
 8006cbe:	e011      	b.n	8006ce4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006cc0:	683a      	ldr	r2, [r7, #0]
 8006cc2:	68b9      	ldr	r1, [r7, #8]
 8006cc4:	69b8      	ldr	r0, [r7, #24]
 8006cc6:	f001 f8b7 	bl	8007e38 <xQueueReceive>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d009      	beq.n	8006ce4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006cd6:	f06f 0301 	mvn.w	r3, #1
 8006cda:	61fb      	str	r3, [r7, #28]
 8006cdc:	e002      	b.n	8006ce4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006cde:	f06f 0302 	mvn.w	r3, #2
 8006ce2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006ce4:	69fb      	ldr	r3, [r7, #28]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3720      	adds	r7, #32
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	e000ed04 	.word	0xe000ed04

08006cf4 <osMemoryPoolNew>:
/* Static memory pool functions */
static void  FreeBlock   (MemPool_t *mp, void *block);
static void *AllocBlock  (MemPool_t *mp);
static void *CreateBlock (MemPool_t *mp);

osMemoryPoolId_t osMemoryPoolNew (uint32_t block_count, uint32_t block_size, const osMemoryPoolAttr_t *attr) {
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b08a      	sub	sp, #40	; 0x28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d00:	f3ef 8305 	mrs	r3, IPSR
 8006d04:	613b      	str	r3, [r7, #16]
  return(result);
 8006d06:	693b      	ldr	r3, [r7, #16]
  MemPool_t *mp;
  const char *name;
  int32_t mem_cb, mem_mp;
  uint32_t sz;

  if (IS_IRQ()) {
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d002      	beq.n	8006d12 <osMemoryPoolNew+0x1e>
    mp = NULL;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d10:	e0be      	b.n	8006e90 <osMemoryPoolNew+0x19c>
  }
  else if ((block_count == 0U) || (block_size == 0U)) {
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d002      	beq.n	8006d1e <osMemoryPoolNew+0x2a>
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d102      	bne.n	8006d24 <osMemoryPoolNew+0x30>
    mp = NULL;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	627b      	str	r3, [r7, #36]	; 0x24
 8006d22:	e0b5      	b.n	8006e90 <osMemoryPoolNew+0x19c>
  }
  else {
    mp = NULL;
 8006d24:	2300      	movs	r3, #0
 8006d26:	627b      	str	r3, [r7, #36]	; 0x24
    sz = MEMPOOL_ARR_SIZE (block_count, block_size);
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	3303      	adds	r3, #3
 8006d2c:	f023 0203 	bic.w	r2, r3, #3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	fb02 f303 	mul.w	r3, r2, r3
 8006d36:	617b      	str	r3, [r7, #20]

    name = NULL;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	623b      	str	r3, [r7, #32]
    mem_cb = -1;
 8006d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d40:	61fb      	str	r3, [r7, #28]
    mem_mp = -1;
 8006d42:	f04f 33ff 	mov.w	r3, #4294967295
 8006d46:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d038      	beq.n	8006dc0 <osMemoryPoolNew+0xcc>
      if (attr->name != NULL) {
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <osMemoryPoolNew+0x68>
        name = attr->name;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(MemPool_t))) {
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d006      	beq.n	8006d72 <osMemoryPoolNew+0x7e>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	2b73      	cmp	r3, #115	; 0x73
 8006d6a:	d902      	bls.n	8006d72 <osMemoryPoolNew+0x7e>
        /* Static control block is provided */
        mem_cb = 1;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	61fb      	str	r3, [r7, #28]
 8006d70:	e009      	b.n	8006d86 <osMemoryPoolNew+0x92>
      }
      else if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d105      	bne.n	8006d86 <osMemoryPoolNew+0x92>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <osMemoryPoolNew+0x92>
        /* Allocate control block memory on heap */
        mem_cb = 0;
 8006d82:	2300      	movs	r3, #0
 8006d84:	61fb      	str	r3, [r7, #28]
      }

      if ((attr->mp_mem == NULL) && (attr->mp_size == 0U)) {
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d106      	bne.n	8006d9c <osMemoryPoolNew+0xa8>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d102      	bne.n	8006d9c <osMemoryPoolNew+0xa8>
        /* Allocate memory array on heap */
          mem_mp = 0;
 8006d96:	2300      	movs	r3, #0
 8006d98:	61bb      	str	r3, [r7, #24]
 8006d9a:	e015      	b.n	8006dc8 <osMemoryPoolNew+0xd4>
      }
      else {
        if (attr->mp_mem != NULL) {
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d011      	beq.n	8006dc8 <osMemoryPoolNew+0xd4>
          /* Check if array is 4-byte aligned */
          if (((uint32_t)attr->mp_mem & 3U) == 0U) {
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	f003 0303 	and.w	r3, r3, #3
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d10b      	bne.n	8006dc8 <osMemoryPoolNew+0xd4>
            /* Check if array big enough */
            if (attr->mp_size >= sz) {
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d806      	bhi.n	8006dc8 <osMemoryPoolNew+0xd4>
              /* Static memory pool array is provided */
              mem_mp = 1;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	61bb      	str	r3, [r7, #24]
 8006dbe:	e003      	b.n	8006dc8 <osMemoryPoolNew+0xd4>
        }
      }
    }
    else {
      /* Attributes not provided, allocate memory on heap */
      mem_cb = 0;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	61fb      	str	r3, [r7, #28]
      mem_mp = 0;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	61bb      	str	r3, [r7, #24]
    }

    if (mem_cb == 0) {
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d104      	bne.n	8006dd8 <osMemoryPoolNew+0xe4>
      mp = pvPortMalloc (sizeof(MemPool_t));
 8006dce:	2074      	movs	r0, #116	; 0x74
 8006dd0:	f003 fafa 	bl	800a3c8 <pvPortMalloc>
 8006dd4:	6278      	str	r0, [r7, #36]	; 0x24
 8006dd6:	e002      	b.n	8006dde <osMemoryPoolNew+0xea>
    } else {
      mp = attr->cb_mem;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (mp != NULL) {
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d01b      	beq.n	8006e1c <osMemoryPoolNew+0x128>
      /* Create a semaphore (max count == initial count == block_count) */
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        mp->sem = xSemaphoreCreateCountingStatic (block_count, block_count, &mp->mem_sem);
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	3324      	adds	r3, #36	; 0x24
 8006de8:	461a      	mov	r2, r3
 8006dea:	68f9      	ldr	r1, [r7, #12]
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 fdc6 	bl	800797e <xQueueCreateCountingSemaphoreStatic>
 8006df2:	4602      	mov	r2, r0
 8006df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df6:	605a      	str	r2, [r3, #4]
        mp->sem = xSemaphoreCreateCounting (block_count, block_count);
      #else
        mp->sem == NULL;
      #endif

      if (mp->sem != NULL) {
 8006df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00d      	beq.n	8006e1c <osMemoryPoolNew+0x128>
        /* Setup memory array */
        if (mem_mp == 0) {
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d106      	bne.n	8006e14 <osMemoryPoolNew+0x120>
          mp->mem_arr = pvPortMalloc (sz);
 8006e06:	6978      	ldr	r0, [r7, #20]
 8006e08:	f003 fade 	bl	800a3c8 <pvPortMalloc>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e10:	609a      	str	r2, [r3, #8]
 8006e12:	e003      	b.n	8006e1c <osMemoryPoolNew+0x128>
        } else {
          mp->mem_arr = attr->mp_mem;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	691a      	ldr	r2, [r3, #16]
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	609a      	str	r2, [r3, #8]
        }
      }
    }

    if ((mp != NULL) && (mp->mem_arr != NULL)) {
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d02b      	beq.n	8006e7a <osMemoryPoolNew+0x186>
 8006e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d027      	beq.n	8006e7a <osMemoryPoolNew+0x186>
      /* Memory pool can be created */
      mp->head    = NULL;
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	601a      	str	r2, [r3, #0]
      mp->mem_sz  = sz;
 8006e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	60da      	str	r2, [r3, #12]
      mp->name    = name;
 8006e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e38:	6a3a      	ldr	r2, [r7, #32]
 8006e3a:	611a      	str	r2, [r3, #16]
      mp->bl_sz   = block_size;
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	615a      	str	r2, [r3, #20]
      mp->bl_cnt  = block_count;
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	619a      	str	r2, [r3, #24]
      mp->n       = 0U;
 8006e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	61da      	str	r2, [r3, #28]

      /* Set heap allocated memory flags */
      mp->status = MPOOL_STATUS;
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e50:	4a12      	ldr	r2, [pc, #72]	; (8006e9c <osMemoryPoolNew+0x1a8>)
 8006e52:	621a      	str	r2, [r3, #32]

      if (mem_cb == 0) {
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d105      	bne.n	8006e66 <osMemoryPoolNew+0x172>
        /* Control block on heap */
        mp->status |= 1U;
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	f043 0201 	orr.w	r2, r3, #1
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	621a      	str	r2, [r3, #32]
      }
      if (mem_mp == 0) {
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d111      	bne.n	8006e90 <osMemoryPoolNew+0x19c>
        /* Memory array on heap */
        mp->status |= 2U;
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	f043 0202 	orr.w	r2, r3, #2
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e76:	621a      	str	r2, [r3, #32]
      if (mem_mp == 0) {
 8006e78:	e00a      	b.n	8006e90 <osMemoryPoolNew+0x19c>
      }
    }
    else {
      /* Memory pool cannot be created, release allocated resources */
      if ((mem_cb == 0) && (mp != NULL)) {
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d105      	bne.n	8006e8c <osMemoryPoolNew+0x198>
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d002      	beq.n	8006e8c <osMemoryPoolNew+0x198>
        /* Free control block memory */
        vPortFree (mp);
 8006e86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e88:	f003 fb6a 	bl	800a560 <vPortFree>
      }
      mp = NULL;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return (mp);
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3728      	adds	r7, #40	; 0x28
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	5eed0000 	.word	0x5eed0000

08006ea0 <osMemoryPoolAlloc>:
  }

  return (p);
}

void *osMemoryPoolAlloc (osMemoryPoolId_t mp_id, uint32_t timeout) {
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b08a      	sub	sp, #40	; 0x28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  MemPool_t *mp;
  void *block;
  uint32_t isrm;

  if (mp_id == NULL) {
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d102      	bne.n	8006eb6 <osMemoryPoolAlloc+0x16>
    /* Invalid input parameters */
    block = NULL;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8006eb4:	e062      	b.n	8006f7c <osMemoryPoolAlloc+0xdc>
  }
  else {
    block = NULL;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	627b      	str	r3, [r7, #36]	; 0x24

    mp = (MemPool_t *)mp_id;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	623b      	str	r3, [r7, #32]

    if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	6a1a      	ldr	r2, [r3, #32]
 8006ec2:	4b31      	ldr	r3, [pc, #196]	; (8006f88 <osMemoryPoolAlloc+0xe8>)
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	4a30      	ldr	r2, [pc, #192]	; (8006f88 <osMemoryPoolAlloc+0xe8>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d157      	bne.n	8006f7c <osMemoryPoolAlloc+0xdc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ecc:	f3ef 8305 	mrs	r3, IPSR
 8006ed0:	61bb      	str	r3, [r7, #24]
  return(result);
 8006ed2:	69bb      	ldr	r3, [r7, #24]
      if (IS_IRQ()) {
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d032      	beq.n	8006f3e <osMemoryPoolAlloc+0x9e>
        if (timeout == 0U) {
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d14e      	bne.n	8006f7c <osMemoryPoolAlloc+0xdc>
          if (xSemaphoreTakeFromISR (mp->sem, NULL) == pdTRUE) {
 8006ede:	6a3b      	ldr	r3, [r7, #32]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f001 f992 	bl	8008210 <xQueueReceiveFromISR>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d144      	bne.n	8006f7c <osMemoryPoolAlloc+0xdc>
            if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	6a1a      	ldr	r2, [r3, #32]
 8006ef6:	4b24      	ldr	r3, [pc, #144]	; (8006f88 <osMemoryPoolAlloc+0xe8>)
 8006ef8:	4013      	ands	r3, r2
 8006efa:	4a23      	ldr	r2, [pc, #140]	; (8006f88 <osMemoryPoolAlloc+0xe8>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d13d      	bne.n	8006f7c <osMemoryPoolAlloc+0xdc>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f00:	f3ef 8211 	mrs	r2, BASEPRI
 8006f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	617a      	str	r2, [r7, #20]
 8006f16:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f18:	697b      	ldr	r3, [r7, #20]
              isrm  = taskENTER_CRITICAL_FROM_ISR();
 8006f1a:	61fb      	str	r3, [r7, #28]

              /* Get a block from the free-list */
              block = AllocBlock(mp);
 8006f1c:	6a38      	ldr	r0, [r7, #32]
 8006f1e:	f000 f8ef 	bl	8007100 <AllocBlock>
 8006f22:	6278      	str	r0, [r7, #36]	; 0x24

              if (block == NULL) {
 8006f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d103      	bne.n	8006f32 <osMemoryPoolAlloc+0x92>
                /* List of free blocks is empty, 'create' new block */
                block = CreateBlock(mp);
 8006f2a:	6a38      	ldr	r0, [r7, #32]
 8006f2c:	f000 f8c6 	bl	80070bc <CreateBlock>
 8006f30:	6278      	str	r0, [r7, #36]	; 0x24
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f3c:	e01e      	b.n	8006f7c <osMemoryPoolAlloc+0xdc>
            }
          }
        }
      }
      else {
        if (xSemaphoreTake (mp->sem, (TickType_t)timeout) == pdTRUE) {
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	6839      	ldr	r1, [r7, #0]
 8006f44:	4618      	mov	r0, r3
 8006f46:	f001 f857 	bl	8007ff8 <xQueueSemaphoreTake>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d115      	bne.n	8006f7c <osMemoryPoolAlloc+0xdc>
          if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 8006f50:	6a3b      	ldr	r3, [r7, #32]
 8006f52:	6a1a      	ldr	r2, [r3, #32]
 8006f54:	4b0c      	ldr	r3, [pc, #48]	; (8006f88 <osMemoryPoolAlloc+0xe8>)
 8006f56:	4013      	ands	r3, r2
 8006f58:	4a0b      	ldr	r2, [pc, #44]	; (8006f88 <osMemoryPoolAlloc+0xe8>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d10e      	bne.n	8006f7c <osMemoryPoolAlloc+0xdc>
            taskENTER_CRITICAL();
 8006f5e:	f003 f911 	bl	800a184 <vPortEnterCritical>

            /* Get a block from the free-list */
            block = AllocBlock(mp);
 8006f62:	6a38      	ldr	r0, [r7, #32]
 8006f64:	f000 f8cc 	bl	8007100 <AllocBlock>
 8006f68:	6278      	str	r0, [r7, #36]	; 0x24

            if (block == NULL) {
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d103      	bne.n	8006f78 <osMemoryPoolAlloc+0xd8>
              /* List of free blocks is empty, 'create' new block */
              block = CreateBlock(mp);
 8006f70:	6a38      	ldr	r0, [r7, #32]
 8006f72:	f000 f8a3 	bl	80070bc <CreateBlock>
 8006f76:	6278      	str	r0, [r7, #36]	; 0x24
            }

            taskEXIT_CRITICAL();
 8006f78:	f003 f934 	bl	800a1e4 <vPortExitCritical>
        }
      }
    }
  }

  return (block);
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3728      	adds	r7, #40	; 0x28
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	5eed0000 	.word	0x5eed0000

08006f8c <osMemoryPoolFree>:

osStatus_t osMemoryPoolFree (osMemoryPoolId_t mp_id, void *block) {
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b08a      	sub	sp, #40	; 0x28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  MemPool_t *mp;
  osStatus_t stat;
  uint32_t isrm;
  BaseType_t yield;

  if ((mp_id == NULL) || (block == NULL)) {
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d002      	beq.n	8006fa2 <osMemoryPoolFree+0x16>
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d103      	bne.n	8006faa <osMemoryPoolFree+0x1e>
    /* Invalid input parameters */
    stat = osErrorParameter;
 8006fa2:	f06f 0303 	mvn.w	r3, #3
 8006fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8006fa8:	e07f      	b.n	80070aa <osMemoryPoolFree+0x11e>
  }
  else {
    mp = (MemPool_t *)mp_id;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	623b      	str	r3, [r7, #32]

    if ((mp->status & MPOOL_STATUS) != MPOOL_STATUS) {
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	6a1a      	ldr	r2, [r3, #32]
 8006fb2:	4b40      	ldr	r3, [pc, #256]	; (80070b4 <osMemoryPoolFree+0x128>)
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	4a3f      	ldr	r2, [pc, #252]	; (80070b4 <osMemoryPoolFree+0x128>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d003      	beq.n	8006fc4 <osMemoryPoolFree+0x38>
      /* Invalid object status */
      stat = osErrorResource;
 8006fbc:	f06f 0302 	mvn.w	r3, #2
 8006fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8006fc2:	e072      	b.n	80070aa <osMemoryPoolFree+0x11e>
    }
    else if ((block < (void *)&mp->mem_arr[0]) || (block > (void*)&mp->mem_arr[mp->mem_sz-1])) {
 8006fc4:	6a3b      	ldr	r3, [r7, #32]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d308      	bcc.n	8006fe0 <osMemoryPoolFree+0x54>
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	689a      	ldr	r2, [r3, #8]
 8006fd2:	6a3b      	ldr	r3, [r7, #32]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	4413      	add	r3, r2
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d903      	bls.n	8006fe8 <osMemoryPoolFree+0x5c>
      /* Block pointer outside of memory array area */
      stat = osErrorParameter;
 8006fe0:	f06f 0303 	mvn.w	r3, #3
 8006fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8006fe6:	e060      	b.n	80070aa <osMemoryPoolFree+0x11e>
    }
    else {
      stat = osOK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fec:	f3ef 8305 	mrs	r3, IPSR
 8006ff0:	61bb      	str	r3, [r7, #24]
  return(result);
 8006ff2:	69bb      	ldr	r3, [r7, #24]

      if (IS_IRQ()) {
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d03b      	beq.n	8007070 <osMemoryPoolFree+0xe4>
        if (uxSemaphoreGetCountFromISR (mp->sem) == mp->bl_cnt) {
 8006ff8:	6a3b      	ldr	r3, [r7, #32]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f001 f9a5 	bl	800834c <uxQueueMessagesWaitingFromISR>
 8007002:	4602      	mov	r2, r0
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	429a      	cmp	r2, r3
 800700a:	d103      	bne.n	8007014 <osMemoryPoolFree+0x88>
          stat = osErrorResource;
 800700c:	f06f 0302 	mvn.w	r3, #2
 8007010:	627b      	str	r3, [r7, #36]	; 0x24
 8007012:	e04a      	b.n	80070aa <osMemoryPoolFree+0x11e>
	__asm volatile
 8007014:	f3ef 8211 	mrs	r2, BASEPRI
 8007018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701c:	f383 8811 	msr	BASEPRI, r3
 8007020:	f3bf 8f6f 	isb	sy
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	613a      	str	r2, [r7, #16]
 800702a:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 800702c:	693b      	ldr	r3, [r7, #16]
        }
        else {
          isrm = taskENTER_CRITICAL_FROM_ISR();
 800702e:	61fb      	str	r3, [r7, #28]

          /* Add block to the list of free blocks */
          FreeBlock(mp, block);
 8007030:	6839      	ldr	r1, [r7, #0]
 8007032:	6a38      	ldr	r0, [r7, #32]
 8007034:	f000 f87c 	bl	8007130 <FreeBlock>
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	f383 8811 	msr	BASEPRI, r3
}
 8007042:	bf00      	nop

          taskEXIT_CRITICAL_FROM_ISR(isrm);

          yield = pdFALSE;
 8007044:	2300      	movs	r3, #0
 8007046:	60bb      	str	r3, [r7, #8]
          xSemaphoreGiveFromISR (mp->sem, &yield);
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f107 0208 	add.w	r2, r7, #8
 8007050:	4611      	mov	r1, r2
 8007052:	4618      	mov	r0, r3
 8007054:	f000 fe63 	bl	8007d1e <xQueueGiveFromISR>
          portYIELD_FROM_ISR (yield);
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d025      	beq.n	80070aa <osMemoryPoolFree+0x11e>
 800705e:	4b16      	ldr	r3, [pc, #88]	; (80070b8 <osMemoryPoolFree+0x12c>)
 8007060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007064:	601a      	str	r2, [r3, #0]
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	e01c      	b.n	80070aa <osMemoryPoolFree+0x11e>
        }
      }
      else {
        if (uxSemaphoreGetCount (mp->sem) == mp->bl_cnt) {
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	4618      	mov	r0, r3
 8007076:	f001 f94b 	bl	8008310 <uxQueueMessagesWaiting>
 800707a:	4602      	mov	r2, r0
 800707c:	6a3b      	ldr	r3, [r7, #32]
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	429a      	cmp	r2, r3
 8007082:	d103      	bne.n	800708c <osMemoryPoolFree+0x100>
          stat = osErrorResource;
 8007084:	f06f 0302 	mvn.w	r3, #2
 8007088:	627b      	str	r3, [r7, #36]	; 0x24
 800708a:	e00e      	b.n	80070aa <osMemoryPoolFree+0x11e>
        }
        else {
          taskENTER_CRITICAL();
 800708c:	f003 f87a 	bl	800a184 <vPortEnterCritical>

          /* Add block to the list of free blocks */
          FreeBlock(mp, block);
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	6a38      	ldr	r0, [r7, #32]
 8007094:	f000 f84c 	bl	8007130 <FreeBlock>

          taskEXIT_CRITICAL();
 8007098:	f003 f8a4 	bl	800a1e4 <vPortExitCritical>

          xSemaphoreGive (mp->sem);
 800709c:	6a3b      	ldr	r3, [r7, #32]
 800709e:	6858      	ldr	r0, [r3, #4]
 80070a0:	2300      	movs	r3, #0
 80070a2:	2200      	movs	r2, #0
 80070a4:	2100      	movs	r1, #0
 80070a6:	f000 fca1 	bl	80079ec <xQueueGenericSend>
        }
      }
    }
  }

  return (stat);
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3728      	adds	r7, #40	; 0x28
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	5eed0000 	.word	0x5eed0000
 80070b8:	e000ed04 	.word	0xe000ed04

080070bc <CreateBlock>:
}

/*
  Create new block given according to the current block index.
*/
static void *CreateBlock (MemPool_t *mp) {
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  MemPoolBlock_t *p = NULL;
 80070c4:	2300      	movs	r3, #0
 80070c6:	60fb      	str	r3, [r7, #12]

  if (mp->n < mp->bl_cnt) {
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	69da      	ldr	r2, [r3, #28]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d20e      	bcs.n	80070f2 <CreateBlock+0x36>
    /* Unallocated blocks exist, set pointer to new block */
    p = (void *)(mp->mem_arr + (mp->bl_sz * mp->n));
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689a      	ldr	r2, [r3, #8]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	695b      	ldr	r3, [r3, #20]
 80070dc:	6879      	ldr	r1, [r7, #4]
 80070de:	69c9      	ldr	r1, [r1, #28]
 80070e0:	fb01 f303 	mul.w	r3, r1, r3
 80070e4:	4413      	add	r3, r2
 80070e6:	60fb      	str	r3, [r7, #12]

    /* Increment block index */
    mp->n += 1U;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	69db      	ldr	r3, [r3, #28]
 80070ec:	1c5a      	adds	r2, r3, #1
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	61da      	str	r2, [r3, #28]
  }

  return (p);
 80070f2:	68fb      	ldr	r3, [r7, #12]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <AllocBlock>:

/*
  Allocate a block by reading the list of free blocks.
*/
static void *AllocBlock (MemPool_t *mp) {
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  MemPoolBlock_t *p = NULL;
 8007108:	2300      	movs	r3, #0
 800710a:	60fb      	str	r3, [r7, #12]

  if (mp->head != NULL) {
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d006      	beq.n	8007122 <AllocBlock+0x22>
    /* List of free block exists, get head block */
    p = mp->head;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	60fb      	str	r3, [r7, #12]

    /* Head block is now next on the list */
    mp->head = p->next;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	601a      	str	r2, [r3, #0]
  }

  return (p);
 8007122:	68fb      	ldr	r3, [r7, #12]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <FreeBlock>:

/*
  Free block by putting it to the list of free blocks.
*/
static void FreeBlock (MemPool_t *mp, void *block) {
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  MemPoolBlock_t *p = block;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	60fb      	str	r3, [r7, #12]

  /* Store current head into block memory space */
  p->next = mp->head;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	601a      	str	r2, [r3, #0]

  /* Store current block as new head */
  mp->head = p;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	601a      	str	r2, [r3, #0]
}
 800714c:	bf00      	nop
 800714e:	3714      	adds	r7, #20
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	4a07      	ldr	r2, [pc, #28]	; (8007184 <vApplicationGetIdleTaskMemory+0x2c>)
 8007168:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	4a06      	ldr	r2, [pc, #24]	; (8007188 <vApplicationGetIdleTaskMemory+0x30>)
 800716e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007176:	601a      	str	r2, [r3, #0]
}
 8007178:	bf00      	nop
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr
 8007184:	200002d0 	.word	0x200002d0
 8007188:	2000038c 	.word	0x2000038c

0800718c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	4a07      	ldr	r2, [pc, #28]	; (80071b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800719c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	4a06      	ldr	r2, [pc, #24]	; (80071bc <vApplicationGetTimerTaskMemory+0x30>)
 80071a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071aa:	601a      	str	r2, [r3, #0]
}
 80071ac:	bf00      	nop
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	2000138c 	.word	0x2000138c
 80071bc:	20001448 	.word	0x20001448

080071c0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10a      	bne.n	80071e4 <xEventGroupCreateStatic+0x24>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	613b      	str	r3, [r7, #16]
}
 80071e0:	bf00      	nop
 80071e2:	e7fe      	b.n	80071e2 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80071e4:	2320      	movs	r3, #32
 80071e6:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	2b20      	cmp	r3, #32
 80071ec:	d00a      	beq.n	8007204 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80071ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f2:	f383 8811 	msr	BASEPRI, r3
 80071f6:	f3bf 8f6f 	isb	sy
 80071fa:	f3bf 8f4f 	dsb	sy
 80071fe:	60fb      	str	r3, [r7, #12]
}
 8007200:	bf00      	nop
 8007202:	e7fe      	b.n	8007202 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00a      	beq.n	8007224 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	2200      	movs	r2, #0
 8007212:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	3304      	adds	r3, #4
 8007218:	4618      	mov	r0, r3
 800721a:	f000 f9bf 	bl	800759c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	2201      	movs	r2, #1
 8007222:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8007224:	697b      	ldr	r3, [r7, #20]
	}
 8007226:	4618      	mov	r0, r3
 8007228:	3718      	adds	r7, #24
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800722e:	b580      	push	{r7, lr}
 8007230:	b082      	sub	sp, #8
 8007232:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8007234:	2020      	movs	r0, #32
 8007236:	f003 f8c7 	bl	800a3c8 <pvPortMalloc>
 800723a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00a      	beq.n	8007258 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	3304      	adds	r3, #4
 800724c:	4618      	mov	r0, r3
 800724e:	f000 f9a5 	bl	800759c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8007258:	687b      	ldr	r3, [r7, #4]
	}
 800725a:	4618      	mov	r0, r3
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
	...

08007264 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b090      	sub	sp, #64	; 0x40
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
 8007270:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8007276:	2300      	movs	r3, #0
 8007278:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800727a:	2300      	movs	r3, #0
 800727c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10a      	bne.n	800729a <xEventGroupWaitBits+0x36>
	__asm volatile
 8007284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007288:	f383 8811 	msr	BASEPRI, r3
 800728c:	f3bf 8f6f 	isb	sy
 8007290:	f3bf 8f4f 	dsb	sy
 8007294:	623b      	str	r3, [r7, #32]
}
 8007296:	bf00      	nop
 8007298:	e7fe      	b.n	8007298 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00a      	beq.n	80072ba <xEventGroupWaitBits+0x56>
	__asm volatile
 80072a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	61fb      	str	r3, [r7, #28]
}
 80072b6:	bf00      	nop
 80072b8:	e7fe      	b.n	80072b8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10a      	bne.n	80072d6 <xEventGroupWaitBits+0x72>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	61bb      	str	r3, [r7, #24]
}
 80072d2:	bf00      	nop
 80072d4:	e7fe      	b.n	80072d4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072d6:	f002 f8c3 	bl	8009460 <xTaskGetSchedulerState>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d102      	bne.n	80072e6 <xEventGroupWaitBits+0x82>
 80072e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <xEventGroupWaitBits+0x86>
 80072e6:	2301      	movs	r3, #1
 80072e8:	e000      	b.n	80072ec <xEventGroupWaitBits+0x88>
 80072ea:	2300      	movs	r3, #0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10a      	bne.n	8007306 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80072f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f4:	f383 8811 	msr	BASEPRI, r3
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	617b      	str	r3, [r7, #20]
}
 8007302:	bf00      	nop
 8007304:	e7fe      	b.n	8007304 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8007306:	f001 fc21 	bl	8008b4c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800730a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8007310:	683a      	ldr	r2, [r7, #0]
 8007312:	68b9      	ldr	r1, [r7, #8]
 8007314:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007316:	f000 f90b 	bl	8007530 <prvTestWaitCondition>
 800731a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800731c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00e      	beq.n	8007340 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8007322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007324:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8007326:	2300      	movs	r3, #0
 8007328:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d028      	beq.n	8007382 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	43db      	mvns	r3, r3
 8007338:	401a      	ands	r2, r3
 800733a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	e020      	b.n	8007382 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8007340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007342:	2b00      	cmp	r3, #0
 8007344:	d104      	bne.n	8007350 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8007346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007348:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800734a:	2301      	movs	r3, #1
 800734c:	633b      	str	r3, [r7, #48]	; 0x30
 800734e:	e018      	b.n	8007382 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d003      	beq.n	800735e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8007356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007358:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800735c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d003      	beq.n	800736c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8007364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007366:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800736a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800736c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800736e:	1d18      	adds	r0, r3, #4
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007374:	4313      	orrs	r3, r2
 8007376:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007378:	4619      	mov	r1, r3
 800737a:	f001 fde5 	bl	8008f48 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800737e:	2300      	movs	r3, #0
 8007380:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8007382:	f001 fbf1 	bl	8008b68 <xTaskResumeAll>
 8007386:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8007388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800738a:	2b00      	cmp	r3, #0
 800738c:	d031      	beq.n	80073f2 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007390:	2b00      	cmp	r3, #0
 8007392:	d107      	bne.n	80073a4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8007394:	4b19      	ldr	r3, [pc, #100]	; (80073fc <xEventGroupWaitBits+0x198>)
 8007396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800739a:	601a      	str	r2, [r3, #0]
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80073a4:	f002 f9d2 	bl	800974c <uxTaskResetEventItemValue>
 80073a8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80073aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d11a      	bne.n	80073ea <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80073b4:	f002 fee6 	bl	800a184 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80073b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	68b9      	ldr	r1, [r7, #8]
 80073c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80073c4:	f000 f8b4 	bl	8007530 <prvTestWaitCondition>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d009      	beq.n	80073e2 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d006      	beq.n	80073e2 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80073d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	43db      	mvns	r3, r3
 80073dc:	401a      	ands	r2, r3
 80073de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80073e2:	2301      	movs	r3, #1
 80073e4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80073e6:	f002 fefd 	bl	800a1e4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80073ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80073f0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80073f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3740      	adds	r7, #64	; 0x40
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	e000ed04 	.word	0xe000ed04

08007400 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b08e      	sub	sp, #56	; 0x38
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800740a:	2300      	movs	r3, #0
 800740c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8007412:	2300      	movs	r3, #0
 8007414:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10a      	bne.n	8007432 <xEventGroupSetBits+0x32>
	__asm volatile
 800741c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007420:	f383 8811 	msr	BASEPRI, r3
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	613b      	str	r3, [r7, #16]
}
 800742e:	bf00      	nop
 8007430:	e7fe      	b.n	8007430 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00a      	beq.n	8007452 <xEventGroupSetBits+0x52>
	__asm volatile
 800743c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007440:	f383 8811 	msr	BASEPRI, r3
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	60fb      	str	r3, [r7, #12]
}
 800744e:	bf00      	nop
 8007450:	e7fe      	b.n	8007450 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8007452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007454:	3304      	adds	r3, #4
 8007456:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	3308      	adds	r3, #8
 800745c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800745e:	f001 fb75 	bl	8008b4c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8007462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8007468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	431a      	orrs	r2, r3
 8007470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007472:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8007474:	e03c      	b.n	80074f0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8007476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800747c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8007482:	2300      	movs	r3, #0
 8007484:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800748c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007494:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d108      	bne.n	80074b2 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80074a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	4013      	ands	r3, r2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00b      	beq.n	80074c4 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80074ac:	2301      	movs	r3, #1
 80074ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074b0:	e008      	b.n	80074c4 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80074b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	4013      	ands	r3, r2
 80074ba:	69ba      	ldr	r2, [r7, #24]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d101      	bne.n	80074c4 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80074c0:	2301      	movs	r3, #1
 80074c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80074c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d010      	beq.n	80074ec <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d003      	beq.n	80074dc <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80074d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	4313      	orrs	r3, r2
 80074da:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80074dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80074e4:	4619      	mov	r1, r3
 80074e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80074e8:	f001 fdfa 	bl	80090e0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80074f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d1be      	bne.n	8007476 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80074f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fe:	43db      	mvns	r3, r3
 8007500:	401a      	ands	r2, r3
 8007502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007504:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8007506:	f001 fb2f 	bl	8008b68 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800750a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750c:	681b      	ldr	r3, [r3, #0]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3738      	adds	r7, #56	; 0x38
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b082      	sub	sp, #8
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8007520:	6839      	ldr	r1, [r7, #0]
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7ff ff6c 	bl	8007400 <xEventGroupSetBits>
}
 8007528:	bf00      	nop
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8007530:	b480      	push	{r7}
 8007532:	b087      	sub	sp, #28
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800753c:	2300      	movs	r3, #0
 800753e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d107      	bne.n	8007556 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	4013      	ands	r3, r2
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00a      	beq.n	8007566 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007550:	2301      	movs	r3, #1
 8007552:	617b      	str	r3, [r7, #20]
 8007554:	e007      	b.n	8007566 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	4013      	ands	r3, r2
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	429a      	cmp	r2, r3
 8007560:	d101      	bne.n	8007566 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007562:	2301      	movs	r3, #1
 8007564:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8007566:	697b      	ldr	r3, [r7, #20]
}
 8007568:	4618      	mov	r0, r3
 800756a:	371c      	adds	r7, #28
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007574:	b580      	push	{r7, lr}
 8007576:	b086      	sub	sp, #24
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	68f9      	ldr	r1, [r7, #12]
 8007586:	4804      	ldr	r0, [pc, #16]	; (8007598 <xEventGroupSetBitsFromISR+0x24>)
 8007588:	f002 fcae 	bl	8009ee8 <xTimerPendFunctionCallFromISR>
 800758c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800758e:	697b      	ldr	r3, [r7, #20]
	}
 8007590:	4618      	mov	r0, r3
 8007592:	3718      	adds	r7, #24
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	08007517 	.word	0x08007517

0800759c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f103 0208 	add.w	r2, r3, #8
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f04f 32ff 	mov.w	r2, #4294967295
 80075b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f103 0208 	add.w	r2, r3, #8
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f103 0208 	add.w	r2, r3, #8
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80075ea:	bf00      	nop
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075f6:	b480      	push	{r7}
 80075f8:	b085      	sub	sp, #20
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	689a      	ldr	r2, [r3, #8]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	601a      	str	r2, [r3, #0]
}
 8007632:	bf00      	nop
 8007634:	3714      	adds	r7, #20
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800763e:	b480      	push	{r7}
 8007640:	b085      	sub	sp, #20
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007654:	d103      	bne.n	800765e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	60fb      	str	r3, [r7, #12]
 800765c:	e00c      	b.n	8007678 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	3308      	adds	r3, #8
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	e002      	b.n	800766c <vListInsert+0x2e>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	60fb      	str	r3, [r7, #12]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	429a      	cmp	r2, r3
 8007676:	d2f6      	bcs.n	8007666 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	683a      	ldr	r2, [r7, #0]
 8007686:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	1c5a      	adds	r2, r3, #1
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	601a      	str	r2, [r3, #0]
}
 80076a4:	bf00      	nop
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	6892      	ldr	r2, [r2, #8]
 80076c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	6852      	ldr	r2, [r2, #4]
 80076d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d103      	bne.n	80076e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	689a      	ldr	r2, [r3, #8]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	1e5a      	subs	r2, r3, #1
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10a      	bne.n	800772e <xQueueGenericReset+0x2a>
	__asm volatile
 8007718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771c:	f383 8811 	msr	BASEPRI, r3
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	60bb      	str	r3, [r7, #8]
}
 800772a:	bf00      	nop
 800772c:	e7fe      	b.n	800772c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800772e:	f002 fd29 	bl	800a184 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800773a:	68f9      	ldr	r1, [r7, #12]
 800773c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800773e:	fb01 f303 	mul.w	r3, r1, r3
 8007742:	441a      	add	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800775e:	3b01      	subs	r3, #1
 8007760:	68f9      	ldr	r1, [r7, #12]
 8007762:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007764:	fb01 f303 	mul.w	r3, r1, r3
 8007768:	441a      	add	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	22ff      	movs	r2, #255	; 0xff
 8007772:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	22ff      	movs	r2, #255	; 0xff
 800777a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d114      	bne.n	80077ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d01a      	beq.n	80077c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	3310      	adds	r3, #16
 8007790:	4618      	mov	r0, r3
 8007792:	f001 fc41 	bl	8009018 <xTaskRemoveFromEventList>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d012      	beq.n	80077c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800779c:	4b0c      	ldr	r3, [pc, #48]	; (80077d0 <xQueueGenericReset+0xcc>)
 800779e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	f3bf 8f4f 	dsb	sy
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	e009      	b.n	80077c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3310      	adds	r3, #16
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7ff fef2 	bl	800759c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	3324      	adds	r3, #36	; 0x24
 80077bc:	4618      	mov	r0, r3
 80077be:	f7ff feed 	bl	800759c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80077c2:	f002 fd0f 	bl	800a1e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80077c6:	2301      	movs	r3, #1
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	e000ed04 	.word	0xe000ed04

080077d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b08e      	sub	sp, #56	; 0x38
 80077d8:	af02      	add	r7, sp, #8
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
 80077e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10a      	bne.n	80077fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80077e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ec:	f383 8811 	msr	BASEPRI, r3
 80077f0:	f3bf 8f6f 	isb	sy
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80077fa:	bf00      	nop
 80077fc:	e7fe      	b.n	80077fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10a      	bne.n	800781a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007808:	f383 8811 	msr	BASEPRI, r3
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	f3bf 8f4f 	dsb	sy
 8007814:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007816:	bf00      	nop
 8007818:	e7fe      	b.n	8007818 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d002      	beq.n	8007826 <xQueueGenericCreateStatic+0x52>
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <xQueueGenericCreateStatic+0x56>
 8007826:	2301      	movs	r3, #1
 8007828:	e000      	b.n	800782c <xQueueGenericCreateStatic+0x58>
 800782a:	2300      	movs	r3, #0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10a      	bne.n	8007846 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	623b      	str	r3, [r7, #32]
}
 8007842:	bf00      	nop
 8007844:	e7fe      	b.n	8007844 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d102      	bne.n	8007852 <xQueueGenericCreateStatic+0x7e>
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <xQueueGenericCreateStatic+0x82>
 8007852:	2301      	movs	r3, #1
 8007854:	e000      	b.n	8007858 <xQueueGenericCreateStatic+0x84>
 8007856:	2300      	movs	r3, #0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10a      	bne.n	8007872 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800785c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007860:	f383 8811 	msr	BASEPRI, r3
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	61fb      	str	r3, [r7, #28]
}
 800786e:	bf00      	nop
 8007870:	e7fe      	b.n	8007870 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007872:	2350      	movs	r3, #80	; 0x50
 8007874:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2b50      	cmp	r3, #80	; 0x50
 800787a:	d00a      	beq.n	8007892 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800787c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007880:	f383 8811 	msr	BASEPRI, r3
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	61bb      	str	r3, [r7, #24]
}
 800788e:	bf00      	nop
 8007890:	e7fe      	b.n	8007890 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007892:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00d      	beq.n	80078ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800789e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80078a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80078aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	4613      	mov	r3, r2
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	68b9      	ldr	r1, [r7, #8]
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f000 f83f 	bl	8007938 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80078ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80078bc:	4618      	mov	r0, r3
 80078be:	3730      	adds	r7, #48	; 0x30
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b08a      	sub	sp, #40	; 0x28
 80078c8:	af02      	add	r7, sp, #8
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	4613      	mov	r3, r2
 80078d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10a      	bne.n	80078ee <xQueueGenericCreate+0x2a>
	__asm volatile
 80078d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078dc:	f383 8811 	msr	BASEPRI, r3
 80078e0:	f3bf 8f6f 	isb	sy
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	613b      	str	r3, [r7, #16]
}
 80078ea:	bf00      	nop
 80078ec:	e7fe      	b.n	80078ec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	fb02 f303 	mul.w	r3, r2, r3
 80078f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	3350      	adds	r3, #80	; 0x50
 80078fc:	4618      	mov	r0, r3
 80078fe:	f002 fd63 	bl	800a3c8 <pvPortMalloc>
 8007902:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d011      	beq.n	800792e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	3350      	adds	r3, #80	; 0x50
 8007912:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800791c:	79fa      	ldrb	r2, [r7, #7]
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	4613      	mov	r3, r2
 8007924:	697a      	ldr	r2, [r7, #20]
 8007926:	68b9      	ldr	r1, [r7, #8]
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f000 f805 	bl	8007938 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800792e:	69bb      	ldr	r3, [r7, #24]
	}
 8007930:	4618      	mov	r0, r3
 8007932:	3720      	adds	r7, #32
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	607a      	str	r2, [r7, #4]
 8007944:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d103      	bne.n	8007954 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	69ba      	ldr	r2, [r7, #24]
 8007950:	601a      	str	r2, [r3, #0]
 8007952:	e002      	b.n	800795a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007966:	2101      	movs	r1, #1
 8007968:	69b8      	ldr	r0, [r7, #24]
 800796a:	f7ff fecb 	bl	8007704 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	78fa      	ldrb	r2, [r7, #3]
 8007972:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007976:	bf00      	nop
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800797e:	b580      	push	{r7, lr}
 8007980:	b08a      	sub	sp, #40	; 0x28
 8007982:	af02      	add	r7, sp, #8
 8007984:	60f8      	str	r0, [r7, #12]
 8007986:	60b9      	str	r1, [r7, #8]
 8007988:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d10a      	bne.n	80079a6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	61bb      	str	r3, [r7, #24]
}
 80079a2:	bf00      	nop
 80079a4:	e7fe      	b.n	80079a4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d90a      	bls.n	80079c4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80079ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b2:	f383 8811 	msr	BASEPRI, r3
 80079b6:	f3bf 8f6f 	isb	sy
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	617b      	str	r3, [r7, #20]
}
 80079c0:	bf00      	nop
 80079c2:	e7fe      	b.n	80079c2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80079c4:	2302      	movs	r3, #2
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	2100      	movs	r1, #0
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f7ff ff00 	bl	80077d4 <xQueueGenericCreateStatic>
 80079d4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d002      	beq.n	80079e2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80079e2:	69fb      	ldr	r3, [r7, #28]
	}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3720      	adds	r7, #32
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b08e      	sub	sp, #56	; 0x38
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80079fa:	2300      	movs	r3, #0
 80079fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10a      	bne.n	8007a1e <xQueueGenericSend+0x32>
	__asm volatile
 8007a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0c:	f383 8811 	msr	BASEPRI, r3
 8007a10:	f3bf 8f6f 	isb	sy
 8007a14:	f3bf 8f4f 	dsb	sy
 8007a18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a1a:	bf00      	nop
 8007a1c:	e7fe      	b.n	8007a1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d103      	bne.n	8007a2c <xQueueGenericSend+0x40>
 8007a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d101      	bne.n	8007a30 <xQueueGenericSend+0x44>
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e000      	b.n	8007a32 <xQueueGenericSend+0x46>
 8007a30:	2300      	movs	r3, #0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10a      	bne.n	8007a4c <xQueueGenericSend+0x60>
	__asm volatile
 8007a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3a:	f383 8811 	msr	BASEPRI, r3
 8007a3e:	f3bf 8f6f 	isb	sy
 8007a42:	f3bf 8f4f 	dsb	sy
 8007a46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a48:	bf00      	nop
 8007a4a:	e7fe      	b.n	8007a4a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d103      	bne.n	8007a5a <xQueueGenericSend+0x6e>
 8007a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d101      	bne.n	8007a5e <xQueueGenericSend+0x72>
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e000      	b.n	8007a60 <xQueueGenericSend+0x74>
 8007a5e:	2300      	movs	r3, #0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10a      	bne.n	8007a7a <xQueueGenericSend+0x8e>
	__asm volatile
 8007a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a68:	f383 8811 	msr	BASEPRI, r3
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	623b      	str	r3, [r7, #32]
}
 8007a76:	bf00      	nop
 8007a78:	e7fe      	b.n	8007a78 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a7a:	f001 fcf1 	bl	8009460 <xTaskGetSchedulerState>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d102      	bne.n	8007a8a <xQueueGenericSend+0x9e>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <xQueueGenericSend+0xa2>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e000      	b.n	8007a90 <xQueueGenericSend+0xa4>
 8007a8e:	2300      	movs	r3, #0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10a      	bne.n	8007aaa <xQueueGenericSend+0xbe>
	__asm volatile
 8007a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	61fb      	str	r3, [r7, #28]
}
 8007aa6:	bf00      	nop
 8007aa8:	e7fe      	b.n	8007aa8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007aaa:	f002 fb6b 	bl	800a184 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d302      	bcc.n	8007ac0 <xQueueGenericSend+0xd4>
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d129      	bne.n	8007b14 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	68b9      	ldr	r1, [r7, #8]
 8007ac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ac6:	f000 fc77 	bl	80083b8 <prvCopyDataToQueue>
 8007aca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d010      	beq.n	8007af6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad6:	3324      	adds	r3, #36	; 0x24
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f001 fa9d 	bl	8009018 <xTaskRemoveFromEventList>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d013      	beq.n	8007b0c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007ae4:	4b3f      	ldr	r3, [pc, #252]	; (8007be4 <xQueueGenericSend+0x1f8>)
 8007ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aea:	601a      	str	r2, [r3, #0]
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	f3bf 8f6f 	isb	sy
 8007af4:	e00a      	b.n	8007b0c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d007      	beq.n	8007b0c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007afc:	4b39      	ldr	r3, [pc, #228]	; (8007be4 <xQueueGenericSend+0x1f8>)
 8007afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b02:	601a      	str	r2, [r3, #0]
 8007b04:	f3bf 8f4f 	dsb	sy
 8007b08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b0c:	f002 fb6a 	bl	800a1e4 <vPortExitCritical>
				return pdPASS;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e063      	b.n	8007bdc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d103      	bne.n	8007b22 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b1a:	f002 fb63 	bl	800a1e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	e05c      	b.n	8007bdc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d106      	bne.n	8007b36 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b28:	f107 0314 	add.w	r3, r7, #20
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f001 fb39 	bl	80091a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b32:	2301      	movs	r3, #1
 8007b34:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b36:	f002 fb55 	bl	800a1e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b3a:	f001 f807 	bl	8008b4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b3e:	f002 fb21 	bl	800a184 <vPortEnterCritical>
 8007b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b48:	b25b      	sxtb	r3, r3
 8007b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4e:	d103      	bne.n	8007b58 <xQueueGenericSend+0x16c>
 8007b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b5e:	b25b      	sxtb	r3, r3
 8007b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b64:	d103      	bne.n	8007b6e <xQueueGenericSend+0x182>
 8007b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b6e:	f002 fb39 	bl	800a1e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b72:	1d3a      	adds	r2, r7, #4
 8007b74:	f107 0314 	add.w	r3, r7, #20
 8007b78:	4611      	mov	r1, r2
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f001 fb28 	bl	80091d0 <xTaskCheckForTimeOut>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d124      	bne.n	8007bd0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007b86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b88:	f000 fd0e 	bl	80085a8 <prvIsQueueFull>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d018      	beq.n	8007bc4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b94:	3310      	adds	r3, #16
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	4611      	mov	r1, r2
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f001 f9b0 	bl	8008f00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007ba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ba2:	f000 fc99 	bl	80084d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007ba6:	f000 ffdf 	bl	8008b68 <xTaskResumeAll>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f47f af7c 	bne.w	8007aaa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007bb2:	4b0c      	ldr	r3, [pc, #48]	; (8007be4 <xQueueGenericSend+0x1f8>)
 8007bb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bb8:	601a      	str	r2, [r3, #0]
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	e772      	b.n	8007aaa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007bc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bc6:	f000 fc87 	bl	80084d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bca:	f000 ffcd 	bl	8008b68 <xTaskResumeAll>
 8007bce:	e76c      	b.n	8007aaa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007bd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bd2:	f000 fc81 	bl	80084d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bd6:	f000 ffc7 	bl	8008b68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007bda:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3738      	adds	r7, #56	; 0x38
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	e000ed04 	.word	0xe000ed04

08007be8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b090      	sub	sp, #64	; 0x40
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	607a      	str	r2, [r7, #4]
 8007bf4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10a      	bne.n	8007c16 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c12:	bf00      	nop
 8007c14:	e7fe      	b.n	8007c14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d103      	bne.n	8007c24 <xQueueGenericSendFromISR+0x3c>
 8007c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d101      	bne.n	8007c28 <xQueueGenericSendFromISR+0x40>
 8007c24:	2301      	movs	r3, #1
 8007c26:	e000      	b.n	8007c2a <xQueueGenericSendFromISR+0x42>
 8007c28:	2300      	movs	r3, #0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10a      	bne.n	8007c44 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c40:	bf00      	nop
 8007c42:	e7fe      	b.n	8007c42 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d103      	bne.n	8007c52 <xQueueGenericSendFromISR+0x6a>
 8007c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d101      	bne.n	8007c56 <xQueueGenericSendFromISR+0x6e>
 8007c52:	2301      	movs	r3, #1
 8007c54:	e000      	b.n	8007c58 <xQueueGenericSendFromISR+0x70>
 8007c56:	2300      	movs	r3, #0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10a      	bne.n	8007c72 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c60:	f383 8811 	msr	BASEPRI, r3
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	623b      	str	r3, [r7, #32]
}
 8007c6e:	bf00      	nop
 8007c70:	e7fe      	b.n	8007c70 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c72:	f002 fb69 	bl	800a348 <vPortValidateInterruptPriority>
	__asm volatile
 8007c76:	f3ef 8211 	mrs	r2, BASEPRI
 8007c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7e:	f383 8811 	msr	BASEPRI, r3
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	61fa      	str	r2, [r7, #28]
 8007c8c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8007c8e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c90:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d302      	bcc.n	8007ca4 <xQueueGenericSendFromISR+0xbc>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d12f      	bne.n	8007d04 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cb4:	683a      	ldr	r2, [r7, #0]
 8007cb6:	68b9      	ldr	r1, [r7, #8]
 8007cb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007cba:	f000 fb7d 	bl	80083b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007cbe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc6:	d112      	bne.n	8007cee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d016      	beq.n	8007cfe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd2:	3324      	adds	r3, #36	; 0x24
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f001 f99f 	bl	8009018 <xTaskRemoveFromEventList>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00e      	beq.n	8007cfe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00b      	beq.n	8007cfe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	601a      	str	r2, [r3, #0]
 8007cec:	e007      	b.n	8007cfe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007cee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	b25a      	sxtb	r2, r3
 8007cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007d02:	e001      	b.n	8007d08 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d04:	2300      	movs	r3, #0
 8007d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d0a:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	f383 8811 	msr	BASEPRI, r3
}
 8007d12:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3740      	adds	r7, #64	; 0x40
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b08e      	sub	sp, #56	; 0x38
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
 8007d26:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10a      	bne.n	8007d48 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d36:	f383 8811 	msr	BASEPRI, r3
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	623b      	str	r3, [r7, #32]
}
 8007d44:	bf00      	nop
 8007d46:	e7fe      	b.n	8007d46 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00a      	beq.n	8007d66 <xQueueGiveFromISR+0x48>
	__asm volatile
 8007d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d54:	f383 8811 	msr	BASEPRI, r3
 8007d58:	f3bf 8f6f 	isb	sy
 8007d5c:	f3bf 8f4f 	dsb	sy
 8007d60:	61fb      	str	r3, [r7, #28]
}
 8007d62:	bf00      	nop
 8007d64:	e7fe      	b.n	8007d64 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d103      	bne.n	8007d76 <xQueueGiveFromISR+0x58>
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d101      	bne.n	8007d7a <xQueueGiveFromISR+0x5c>
 8007d76:	2301      	movs	r3, #1
 8007d78:	e000      	b.n	8007d7c <xQueueGiveFromISR+0x5e>
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10a      	bne.n	8007d96 <xQueueGiveFromISR+0x78>
	__asm volatile
 8007d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d84:	f383 8811 	msr	BASEPRI, r3
 8007d88:	f3bf 8f6f 	isb	sy
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	61bb      	str	r3, [r7, #24]
}
 8007d92:	bf00      	nop
 8007d94:	e7fe      	b.n	8007d94 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d96:	f002 fad7 	bl	800a348 <vPortValidateInterruptPriority>
	__asm volatile
 8007d9a:	f3ef 8211 	mrs	r2, BASEPRI
 8007d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da2:	f383 8811 	msr	BASEPRI, r3
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	617a      	str	r2, [r7, #20]
 8007db0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007db2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007db4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d22b      	bcs.n	8007e1e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007dd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de0:	d112      	bne.n	8007e08 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d016      	beq.n	8007e18 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dec:	3324      	adds	r3, #36	; 0x24
 8007dee:	4618      	mov	r0, r3
 8007df0:	f001 f912 	bl	8009018 <xTaskRemoveFromEventList>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00e      	beq.n	8007e18 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00b      	beq.n	8007e18 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	2201      	movs	r2, #1
 8007e04:	601a      	str	r2, [r3, #0]
 8007e06:	e007      	b.n	8007e18 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007e08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	b25a      	sxtb	r2, r3
 8007e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e1c:	e001      	b.n	8007e22 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	637b      	str	r3, [r7, #52]	; 0x34
 8007e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e24:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f383 8811 	msr	BASEPRI, r3
}
 8007e2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3738      	adds	r7, #56	; 0x38
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b08c      	sub	sp, #48	; 0x30
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e44:	2300      	movs	r3, #0
 8007e46:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10a      	bne.n	8007e68 <xQueueReceive+0x30>
	__asm volatile
 8007e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e56:	f383 8811 	msr	BASEPRI, r3
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	623b      	str	r3, [r7, #32]
}
 8007e64:	bf00      	nop
 8007e66:	e7fe      	b.n	8007e66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d103      	bne.n	8007e76 <xQueueReceive+0x3e>
 8007e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d101      	bne.n	8007e7a <xQueueReceive+0x42>
 8007e76:	2301      	movs	r3, #1
 8007e78:	e000      	b.n	8007e7c <xQueueReceive+0x44>
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10a      	bne.n	8007e96 <xQueueReceive+0x5e>
	__asm volatile
 8007e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e84:	f383 8811 	msr	BASEPRI, r3
 8007e88:	f3bf 8f6f 	isb	sy
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	61fb      	str	r3, [r7, #28]
}
 8007e92:	bf00      	nop
 8007e94:	e7fe      	b.n	8007e94 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e96:	f001 fae3 	bl	8009460 <xTaskGetSchedulerState>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d102      	bne.n	8007ea6 <xQueueReceive+0x6e>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d101      	bne.n	8007eaa <xQueueReceive+0x72>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e000      	b.n	8007eac <xQueueReceive+0x74>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10a      	bne.n	8007ec6 <xQueueReceive+0x8e>
	__asm volatile
 8007eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb4:	f383 8811 	msr	BASEPRI, r3
 8007eb8:	f3bf 8f6f 	isb	sy
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	61bb      	str	r3, [r7, #24]
}
 8007ec2:	bf00      	nop
 8007ec4:	e7fe      	b.n	8007ec4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ec6:	f002 f95d 	bl	800a184 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ece:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d01f      	beq.n	8007f16 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ed6:	68b9      	ldr	r1, [r7, #8]
 8007ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eda:	f000 fad7 	bl	800848c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee0:	1e5a      	subs	r2, r3, #1
 8007ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00f      	beq.n	8007f0e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef0:	3310      	adds	r3, #16
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f001 f890 	bl	8009018 <xTaskRemoveFromEventList>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d007      	beq.n	8007f0e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007efe:	4b3d      	ldr	r3, [pc, #244]	; (8007ff4 <xQueueReceive+0x1bc>)
 8007f00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f0e:	f002 f969 	bl	800a1e4 <vPortExitCritical>
				return pdPASS;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e069      	b.n	8007fea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d103      	bne.n	8007f24 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f1c:	f002 f962 	bl	800a1e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f20:	2300      	movs	r3, #0
 8007f22:	e062      	b.n	8007fea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d106      	bne.n	8007f38 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f2a:	f107 0310 	add.w	r3, r7, #16
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f001 f938 	bl	80091a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f34:	2301      	movs	r3, #1
 8007f36:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f38:	f002 f954 	bl	800a1e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f3c:	f000 fe06 	bl	8008b4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f40:	f002 f920 	bl	800a184 <vPortEnterCritical>
 8007f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f4a:	b25b      	sxtb	r3, r3
 8007f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f50:	d103      	bne.n	8007f5a <xQueueReceive+0x122>
 8007f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f60:	b25b      	sxtb	r3, r3
 8007f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f66:	d103      	bne.n	8007f70 <xQueueReceive+0x138>
 8007f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f70:	f002 f938 	bl	800a1e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f74:	1d3a      	adds	r2, r7, #4
 8007f76:	f107 0310 	add.w	r3, r7, #16
 8007f7a:	4611      	mov	r1, r2
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f001 f927 	bl	80091d0 <xTaskCheckForTimeOut>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d123      	bne.n	8007fd0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f8a:	f000 faf7 	bl	800857c <prvIsQueueEmpty>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d017      	beq.n	8007fc4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f96:	3324      	adds	r3, #36	; 0x24
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	4611      	mov	r1, r2
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 ffaf 	bl	8008f00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007fa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fa4:	f000 fa98 	bl	80084d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007fa8:	f000 fdde 	bl	8008b68 <xTaskResumeAll>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d189      	bne.n	8007ec6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007fb2:	4b10      	ldr	r3, [pc, #64]	; (8007ff4 <xQueueReceive+0x1bc>)
 8007fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fb8:	601a      	str	r2, [r3, #0]
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	e780      	b.n	8007ec6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fc6:	f000 fa87 	bl	80084d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fca:	f000 fdcd 	bl	8008b68 <xTaskResumeAll>
 8007fce:	e77a      	b.n	8007ec6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007fd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fd2:	f000 fa81 	bl	80084d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fd6:	f000 fdc7 	bl	8008b68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fdc:	f000 face 	bl	800857c <prvIsQueueEmpty>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	f43f af6f 	beq.w	8007ec6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007fe8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3730      	adds	r7, #48	; 0x30
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	e000ed04 	.word	0xe000ed04

08007ff8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b08e      	sub	sp, #56	; 0x38
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008002:	2300      	movs	r3, #0
 8008004:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800800a:	2300      	movs	r3, #0
 800800c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800800e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10a      	bne.n	800802a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008018:	f383 8811 	msr	BASEPRI, r3
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	623b      	str	r3, [r7, #32]
}
 8008026:	bf00      	nop
 8008028:	e7fe      	b.n	8008028 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800802a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00a      	beq.n	8008048 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008036:	f383 8811 	msr	BASEPRI, r3
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	61fb      	str	r3, [r7, #28]
}
 8008044:	bf00      	nop
 8008046:	e7fe      	b.n	8008046 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008048:	f001 fa0a 	bl	8009460 <xTaskGetSchedulerState>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d102      	bne.n	8008058 <xQueueSemaphoreTake+0x60>
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d101      	bne.n	800805c <xQueueSemaphoreTake+0x64>
 8008058:	2301      	movs	r3, #1
 800805a:	e000      	b.n	800805e <xQueueSemaphoreTake+0x66>
 800805c:	2300      	movs	r3, #0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d10a      	bne.n	8008078 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008066:	f383 8811 	msr	BASEPRI, r3
 800806a:	f3bf 8f6f 	isb	sy
 800806e:	f3bf 8f4f 	dsb	sy
 8008072:	61bb      	str	r3, [r7, #24]
}
 8008074:	bf00      	nop
 8008076:	e7fe      	b.n	8008076 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008078:	f002 f884 	bl	800a184 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800807c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800807e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008080:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008084:	2b00      	cmp	r3, #0
 8008086:	d024      	beq.n	80080d2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808a:	1e5a      	subs	r2, r3, #1
 800808c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d104      	bne.n	80080a2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008098:	f001 fb70 	bl	800977c <pvTaskIncrementMutexHeldCount>
 800809c:	4602      	mov	r2, r0
 800809e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00f      	beq.n	80080ca <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ac:	3310      	adds	r3, #16
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 ffb2 	bl	8009018 <xTaskRemoveFromEventList>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d007      	beq.n	80080ca <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80080ba:	4b54      	ldr	r3, [pc, #336]	; (800820c <xQueueSemaphoreTake+0x214>)
 80080bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080c0:	601a      	str	r2, [r3, #0]
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80080ca:	f002 f88b 	bl	800a1e4 <vPortExitCritical>
				return pdPASS;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e097      	b.n	8008202 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d111      	bne.n	80080fc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80080d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00a      	beq.n	80080f4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80080de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	617b      	str	r3, [r7, #20]
}
 80080f0:	bf00      	nop
 80080f2:	e7fe      	b.n	80080f2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80080f4:	f002 f876 	bl	800a1e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80080f8:	2300      	movs	r3, #0
 80080fa:	e082      	b.n	8008202 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d106      	bne.n	8008110 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008102:	f107 030c 	add.w	r3, r7, #12
 8008106:	4618      	mov	r0, r3
 8008108:	f001 f84c 	bl	80091a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800810c:	2301      	movs	r3, #1
 800810e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008110:	f002 f868 	bl	800a1e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008114:	f000 fd1a 	bl	8008b4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008118:	f002 f834 	bl	800a184 <vPortEnterCritical>
 800811c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008122:	b25b      	sxtb	r3, r3
 8008124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008128:	d103      	bne.n	8008132 <xQueueSemaphoreTake+0x13a>
 800812a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812c:	2200      	movs	r2, #0
 800812e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008134:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008138:	b25b      	sxtb	r3, r3
 800813a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800813e:	d103      	bne.n	8008148 <xQueueSemaphoreTake+0x150>
 8008140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008142:	2200      	movs	r2, #0
 8008144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008148:	f002 f84c 	bl	800a1e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800814c:	463a      	mov	r2, r7
 800814e:	f107 030c 	add.w	r3, r7, #12
 8008152:	4611      	mov	r1, r2
 8008154:	4618      	mov	r0, r3
 8008156:	f001 f83b 	bl	80091d0 <xTaskCheckForTimeOut>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d132      	bne.n	80081c6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008160:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008162:	f000 fa0b 	bl	800857c <prvIsQueueEmpty>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d026      	beq.n	80081ba <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800816c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d109      	bne.n	8008188 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008174:	f002 f806 	bl	800a184 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	4618      	mov	r0, r3
 800817e:	f001 f98d 	bl	800949c <xTaskPriorityInherit>
 8008182:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008184:	f002 f82e 	bl	800a1e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800818a:	3324      	adds	r3, #36	; 0x24
 800818c:	683a      	ldr	r2, [r7, #0]
 800818e:	4611      	mov	r1, r2
 8008190:	4618      	mov	r0, r3
 8008192:	f000 feb5 	bl	8008f00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008196:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008198:	f000 f99e 	bl	80084d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800819c:	f000 fce4 	bl	8008b68 <xTaskResumeAll>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f47f af68 	bne.w	8008078 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80081a8:	4b18      	ldr	r3, [pc, #96]	; (800820c <xQueueSemaphoreTake+0x214>)
 80081aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ae:	601a      	str	r2, [r3, #0]
 80081b0:	f3bf 8f4f 	dsb	sy
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	e75e      	b.n	8008078 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80081ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081bc:	f000 f98c 	bl	80084d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081c0:	f000 fcd2 	bl	8008b68 <xTaskResumeAll>
 80081c4:	e758      	b.n	8008078 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80081c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081c8:	f000 f986 	bl	80084d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081cc:	f000 fccc 	bl	8008b68 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081d2:	f000 f9d3 	bl	800857c <prvIsQueueEmpty>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f43f af4d 	beq.w	8008078 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80081de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00d      	beq.n	8008200 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80081e4:	f001 ffce 	bl	800a184 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80081e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081ea:	f000 f8cd 	bl	8008388 <prvGetDisinheritPriorityAfterTimeout>
 80081ee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80081f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081f6:	4618      	mov	r0, r3
 80081f8:	f001 fa26 	bl	8009648 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80081fc:	f001 fff2 	bl	800a1e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008200:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008202:	4618      	mov	r0, r3
 8008204:	3738      	adds	r7, #56	; 0x38
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	e000ed04 	.word	0xe000ed04

08008210 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b08e      	sub	sp, #56	; 0x38
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10a      	bne.n	800823c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822a:	f383 8811 	msr	BASEPRI, r3
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	623b      	str	r3, [r7, #32]
}
 8008238:	bf00      	nop
 800823a:	e7fe      	b.n	800823a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d103      	bne.n	800824a <xQueueReceiveFromISR+0x3a>
 8008242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008246:	2b00      	cmp	r3, #0
 8008248:	d101      	bne.n	800824e <xQueueReceiveFromISR+0x3e>
 800824a:	2301      	movs	r3, #1
 800824c:	e000      	b.n	8008250 <xQueueReceiveFromISR+0x40>
 800824e:	2300      	movs	r3, #0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d10a      	bne.n	800826a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008258:	f383 8811 	msr	BASEPRI, r3
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	61fb      	str	r3, [r7, #28]
}
 8008266:	bf00      	nop
 8008268:	e7fe      	b.n	8008268 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800826a:	f002 f86d 	bl	800a348 <vPortValidateInterruptPriority>
	__asm volatile
 800826e:	f3ef 8211 	mrs	r2, BASEPRI
 8008272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	61ba      	str	r2, [r7, #24]
 8008284:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008286:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008288:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800828a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008292:	2b00      	cmp	r3, #0
 8008294:	d02f      	beq.n	80082f6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008298:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800829c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80082a0:	68b9      	ldr	r1, [r7, #8]
 80082a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082a4:	f000 f8f2 	bl	800848c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80082a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082aa:	1e5a      	subs	r2, r3, #1
 80082ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80082b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80082b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b8:	d112      	bne.n	80082e0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d016      	beq.n	80082f0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c4:	3310      	adds	r3, #16
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 fea6 	bl	8009018 <xTaskRemoveFromEventList>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00e      	beq.n	80082f0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00b      	beq.n	80082f0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	601a      	str	r2, [r3, #0]
 80082de:	e007      	b.n	80082f0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80082e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082e4:	3301      	adds	r3, #1
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	b25a      	sxtb	r2, r3
 80082ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80082f0:	2301      	movs	r3, #1
 80082f2:	637b      	str	r3, [r7, #52]	; 0x34
 80082f4:	e001      	b.n	80082fa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80082f6:	2300      	movs	r3, #0
 80082f8:	637b      	str	r3, [r7, #52]	; 0x34
 80082fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	f383 8811 	msr	BASEPRI, r3
}
 8008304:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008308:	4618      	mov	r0, r3
 800830a:	3738      	adds	r7, #56	; 0x38
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d10a      	bne.n	8008334 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800831e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	60bb      	str	r3, [r7, #8]
}
 8008330:	bf00      	nop
 8008332:	e7fe      	b.n	8008332 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8008334:	f001 ff26 	bl	800a184 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800833e:	f001 ff51 	bl	800a1e4 <vPortExitCritical>

	return uxReturn;
 8008342:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800834c:	b480      	push	{r7}
 800834e:	b087      	sub	sp, #28
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d10a      	bne.n	8008374 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800835e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	60fb      	str	r3, [r7, #12]
}
 8008370:	bf00      	nop
 8008372:	e7fe      	b.n	8008372 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008378:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800837a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800837c:	4618      	mov	r0, r3
 800837e:	371c      	adds	r7, #28
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008394:	2b00      	cmp	r3, #0
 8008396:	d006      	beq.n	80083a6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80083a2:	60fb      	str	r3, [r7, #12]
 80083a4:	e001      	b.n	80083aa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80083a6:	2300      	movs	r3, #0
 80083a8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80083aa:	68fb      	ldr	r3, [r7, #12]
	}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b086      	sub	sp, #24
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80083c4:	2300      	movs	r3, #0
 80083c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d10d      	bne.n	80083f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d14d      	bne.n	800847a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f001 f8c2 	bl	800956c <xTaskPriorityDisinherit>
 80083e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2200      	movs	r2, #0
 80083ee:	609a      	str	r2, [r3, #8]
 80083f0:	e043      	b.n	800847a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d119      	bne.n	800842c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6858      	ldr	r0, [r3, #4]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008400:	461a      	mov	r2, r3
 8008402:	68b9      	ldr	r1, [r7, #8]
 8008404:	f002 f9f6 	bl	800a7f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	685a      	ldr	r2, [r3, #4]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008410:	441a      	add	r2, r3
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	685a      	ldr	r2, [r3, #4]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	429a      	cmp	r2, r3
 8008420:	d32b      	bcc.n	800847a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	605a      	str	r2, [r3, #4]
 800842a:	e026      	b.n	800847a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	68d8      	ldr	r0, [r3, #12]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008434:	461a      	mov	r2, r3
 8008436:	68b9      	ldr	r1, [r7, #8]
 8008438:	f002 f9dc 	bl	800a7f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	68da      	ldr	r2, [r3, #12]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008444:	425b      	negs	r3, r3
 8008446:	441a      	add	r2, r3
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	68da      	ldr	r2, [r3, #12]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	429a      	cmp	r2, r3
 8008456:	d207      	bcs.n	8008468 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	689a      	ldr	r2, [r3, #8]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008460:	425b      	negs	r3, r3
 8008462:	441a      	add	r2, r3
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b02      	cmp	r3, #2
 800846c:	d105      	bne.n	800847a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d002      	beq.n	800847a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	3b01      	subs	r3, #1
 8008478:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	1c5a      	adds	r2, r3, #1
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008482:	697b      	ldr	r3, [r7, #20]
}
 8008484:	4618      	mov	r0, r3
 8008486:	3718      	adds	r7, #24
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849a:	2b00      	cmp	r3, #0
 800849c:	d018      	beq.n	80084d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68da      	ldr	r2, [r3, #12]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a6:	441a      	add	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	68da      	ldr	r2, [r3, #12]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d303      	bcc.n	80084c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	68d9      	ldr	r1, [r3, #12]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c8:	461a      	mov	r2, r3
 80084ca:	6838      	ldr	r0, [r7, #0]
 80084cc:	f002 f992 	bl	800a7f4 <memcpy>
	}
}
 80084d0:	bf00      	nop
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80084e0:	f001 fe50 	bl	800a184 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084ec:	e011      	b.n	8008512 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d012      	beq.n	800851c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	3324      	adds	r3, #36	; 0x24
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 fd8c 	bl	8009018 <xTaskRemoveFromEventList>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d001      	beq.n	800850a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008506:	f000 fec5 	bl	8009294 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800850a:	7bfb      	ldrb	r3, [r7, #15]
 800850c:	3b01      	subs	r3, #1
 800850e:	b2db      	uxtb	r3, r3
 8008510:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008516:	2b00      	cmp	r3, #0
 8008518:	dce9      	bgt.n	80084ee <prvUnlockQueue+0x16>
 800851a:	e000      	b.n	800851e <prvUnlockQueue+0x46>
					break;
 800851c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	22ff      	movs	r2, #255	; 0xff
 8008522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008526:	f001 fe5d 	bl	800a1e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800852a:	f001 fe2b 	bl	800a184 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008534:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008536:	e011      	b.n	800855c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d012      	beq.n	8008566 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	3310      	adds	r3, #16
 8008544:	4618      	mov	r0, r3
 8008546:	f000 fd67 	bl	8009018 <xTaskRemoveFromEventList>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d001      	beq.n	8008554 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008550:	f000 fea0 	bl	8009294 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008554:	7bbb      	ldrb	r3, [r7, #14]
 8008556:	3b01      	subs	r3, #1
 8008558:	b2db      	uxtb	r3, r3
 800855a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800855c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008560:	2b00      	cmp	r3, #0
 8008562:	dce9      	bgt.n	8008538 <prvUnlockQueue+0x60>
 8008564:	e000      	b.n	8008568 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008566:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	22ff      	movs	r2, #255	; 0xff
 800856c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008570:	f001 fe38 	bl	800a1e4 <vPortExitCritical>
}
 8008574:	bf00      	nop
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008584:	f001 fdfe 	bl	800a184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858c:	2b00      	cmp	r3, #0
 800858e:	d102      	bne.n	8008596 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008590:	2301      	movs	r3, #1
 8008592:	60fb      	str	r3, [r7, #12]
 8008594:	e001      	b.n	800859a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008596:	2300      	movs	r3, #0
 8008598:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800859a:	f001 fe23 	bl	800a1e4 <vPortExitCritical>

	return xReturn;
 800859e:	68fb      	ldr	r3, [r7, #12]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085b0:	f001 fde8 	bl	800a184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085bc:	429a      	cmp	r2, r3
 80085be:	d102      	bne.n	80085c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80085c0:	2301      	movs	r3, #1
 80085c2:	60fb      	str	r3, [r7, #12]
 80085c4:	e001      	b.n	80085ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80085c6:	2300      	movs	r3, #0
 80085c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085ca:	f001 fe0b 	bl	800a1e4 <vPortExitCritical>

	return xReturn;
 80085ce:	68fb      	ldr	r3, [r7, #12]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085e2:	2300      	movs	r3, #0
 80085e4:	60fb      	str	r3, [r7, #12]
 80085e6:	e014      	b.n	8008612 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80085e8:	4a0f      	ldr	r2, [pc, #60]	; (8008628 <vQueueAddToRegistry+0x50>)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d10b      	bne.n	800860c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80085f4:	490c      	ldr	r1, [pc, #48]	; (8008628 <vQueueAddToRegistry+0x50>)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	683a      	ldr	r2, [r7, #0]
 80085fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80085fe:	4a0a      	ldr	r2, [pc, #40]	; (8008628 <vQueueAddToRegistry+0x50>)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	00db      	lsls	r3, r3, #3
 8008604:	4413      	add	r3, r2
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800860a:	e006      	b.n	800861a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	3301      	adds	r3, #1
 8008610:	60fb      	str	r3, [r7, #12]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2b07      	cmp	r3, #7
 8008616:	d9e7      	bls.n	80085e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008618:	bf00      	nop
 800861a:	bf00      	nop
 800861c:	3714      	adds	r7, #20
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	20003448 	.word	0x20003448

0800862c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800862c:	b580      	push	{r7, lr}
 800862e:	b086      	sub	sp, #24
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800863c:	f001 fda2 	bl	800a184 <vPortEnterCritical>
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008646:	b25b      	sxtb	r3, r3
 8008648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800864c:	d103      	bne.n	8008656 <vQueueWaitForMessageRestricted+0x2a>
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	2200      	movs	r2, #0
 8008652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800865c:	b25b      	sxtb	r3, r3
 800865e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008662:	d103      	bne.n	800866c <vQueueWaitForMessageRestricted+0x40>
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800866c:	f001 fdba 	bl	800a1e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008674:	2b00      	cmp	r3, #0
 8008676:	d106      	bne.n	8008686 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	3324      	adds	r3, #36	; 0x24
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	68b9      	ldr	r1, [r7, #8]
 8008680:	4618      	mov	r0, r3
 8008682:	f000 fc9d 	bl	8008fc0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008686:	6978      	ldr	r0, [r7, #20]
 8008688:	f7ff ff26 	bl	80084d8 <prvUnlockQueue>
	}
 800868c:	bf00      	nop
 800868e:	3718      	adds	r7, #24
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008694:	b580      	push	{r7, lr}
 8008696:	b08e      	sub	sp, #56	; 0x38
 8008698:	af04      	add	r7, sp, #16
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]
 80086a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80086a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10a      	bne.n	80086be <xTaskCreateStatic+0x2a>
	__asm volatile
 80086a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ac:	f383 8811 	msr	BASEPRI, r3
 80086b0:	f3bf 8f6f 	isb	sy
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	623b      	str	r3, [r7, #32]
}
 80086ba:	bf00      	nop
 80086bc:	e7fe      	b.n	80086bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80086be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d10a      	bne.n	80086da <xTaskCreateStatic+0x46>
	__asm volatile
 80086c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	61fb      	str	r3, [r7, #28]
}
 80086d6:	bf00      	nop
 80086d8:	e7fe      	b.n	80086d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80086da:	23bc      	movs	r3, #188	; 0xbc
 80086dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	2bbc      	cmp	r3, #188	; 0xbc
 80086e2:	d00a      	beq.n	80086fa <xTaskCreateStatic+0x66>
	__asm volatile
 80086e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e8:	f383 8811 	msr	BASEPRI, r3
 80086ec:	f3bf 8f6f 	isb	sy
 80086f0:	f3bf 8f4f 	dsb	sy
 80086f4:	61bb      	str	r3, [r7, #24]
}
 80086f6:	bf00      	nop
 80086f8:	e7fe      	b.n	80086f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80086fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80086fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d01e      	beq.n	8008740 <xTaskCreateStatic+0xac>
 8008702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008704:	2b00      	cmp	r3, #0
 8008706:	d01b      	beq.n	8008740 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800870c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008710:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008714:	2202      	movs	r2, #2
 8008716:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800871a:	2300      	movs	r3, #0
 800871c:	9303      	str	r3, [sp, #12]
 800871e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008720:	9302      	str	r3, [sp, #8]
 8008722:	f107 0314 	add.w	r3, r7, #20
 8008726:	9301      	str	r3, [sp, #4]
 8008728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872a:	9300      	str	r3, [sp, #0]
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	68b9      	ldr	r1, [r7, #8]
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f000 f850 	bl	80087d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008738:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800873a:	f000 f8f3 	bl	8008924 <prvAddNewTaskToReadyList>
 800873e:	e001      	b.n	8008744 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008740:	2300      	movs	r3, #0
 8008742:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008744:	697b      	ldr	r3, [r7, #20]
	}
 8008746:	4618      	mov	r0, r3
 8008748:	3728      	adds	r7, #40	; 0x28
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800874e:	b580      	push	{r7, lr}
 8008750:	b08c      	sub	sp, #48	; 0x30
 8008752:	af04      	add	r7, sp, #16
 8008754:	60f8      	str	r0, [r7, #12]
 8008756:	60b9      	str	r1, [r7, #8]
 8008758:	603b      	str	r3, [r7, #0]
 800875a:	4613      	mov	r3, r2
 800875c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800875e:	88fb      	ldrh	r3, [r7, #6]
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4618      	mov	r0, r3
 8008764:	f001 fe30 	bl	800a3c8 <pvPortMalloc>
 8008768:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00e      	beq.n	800878e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008770:	20bc      	movs	r0, #188	; 0xbc
 8008772:	f001 fe29 	bl	800a3c8 <pvPortMalloc>
 8008776:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d003      	beq.n	8008786 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	697a      	ldr	r2, [r7, #20]
 8008782:	631a      	str	r2, [r3, #48]	; 0x30
 8008784:	e005      	b.n	8008792 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008786:	6978      	ldr	r0, [r7, #20]
 8008788:	f001 feea 	bl	800a560 <vPortFree>
 800878c:	e001      	b.n	8008792 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800878e:	2300      	movs	r3, #0
 8008790:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d017      	beq.n	80087c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80087a0:	88fa      	ldrh	r2, [r7, #6]
 80087a2:	2300      	movs	r3, #0
 80087a4:	9303      	str	r3, [sp, #12]
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	9302      	str	r3, [sp, #8]
 80087aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ac:	9301      	str	r3, [sp, #4]
 80087ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	68b9      	ldr	r1, [r7, #8]
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f000 f80e 	bl	80087d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087bc:	69f8      	ldr	r0, [r7, #28]
 80087be:	f000 f8b1 	bl	8008924 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80087c2:	2301      	movs	r3, #1
 80087c4:	61bb      	str	r3, [r7, #24]
 80087c6:	e002      	b.n	80087ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80087c8:	f04f 33ff 	mov.w	r3, #4294967295
 80087cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80087ce:	69bb      	ldr	r3, [r7, #24]
	}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3720      	adds	r7, #32
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b088      	sub	sp, #32
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	607a      	str	r2, [r7, #4]
 80087e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80087e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	461a      	mov	r2, r3
 80087f0:	21a5      	movs	r1, #165	; 0xa5
 80087f2:	f002 f80d 	bl	800a810 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80087f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008800:	3b01      	subs	r3, #1
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	4413      	add	r3, r2
 8008806:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	f023 0307 	bic.w	r3, r3, #7
 800880e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	f003 0307 	and.w	r3, r3, #7
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00a      	beq.n	8008830 <prvInitialiseNewTask+0x58>
	__asm volatile
 800881a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881e:	f383 8811 	msr	BASEPRI, r3
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	617b      	str	r3, [r7, #20]
}
 800882c:	bf00      	nop
 800882e:	e7fe      	b.n	800882e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d01f      	beq.n	8008876 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008836:	2300      	movs	r3, #0
 8008838:	61fb      	str	r3, [r7, #28]
 800883a:	e012      	b.n	8008862 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	4413      	add	r3, r2
 8008842:	7819      	ldrb	r1, [r3, #0]
 8008844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	4413      	add	r3, r2
 800884a:	3334      	adds	r3, #52	; 0x34
 800884c:	460a      	mov	r2, r1
 800884e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	4413      	add	r3, r2
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d006      	beq.n	800886a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	3301      	adds	r3, #1
 8008860:	61fb      	str	r3, [r7, #28]
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	2b0f      	cmp	r3, #15
 8008866:	d9e9      	bls.n	800883c <prvInitialiseNewTask+0x64>
 8008868:	e000      	b.n	800886c <prvInitialiseNewTask+0x94>
			{
				break;
 800886a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800886c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886e:	2200      	movs	r2, #0
 8008870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008874:	e003      	b.n	800887e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800887e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008880:	2b37      	cmp	r3, #55	; 0x37
 8008882:	d901      	bls.n	8008888 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008884:	2337      	movs	r3, #55	; 0x37
 8008886:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800888c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800888e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008890:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008892:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008896:	2200      	movs	r2, #0
 8008898:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800889a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889c:	3304      	adds	r3, #4
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fe fe9c 	bl	80075dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80088a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a6:	3318      	adds	r3, #24
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7fe fe97 	bl	80075dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80088ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80088ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80088be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80088c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c6:	2200      	movs	r2, #0
 80088c8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80088d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d6:	3354      	adds	r3, #84	; 0x54
 80088d8:	2260      	movs	r2, #96	; 0x60
 80088da:	2100      	movs	r1, #0
 80088dc:	4618      	mov	r0, r3
 80088de:	f001 ff97 	bl	800a810 <memset>
 80088e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e4:	4a0c      	ldr	r2, [pc, #48]	; (8008918 <prvInitialiseNewTask+0x140>)
 80088e6:	659a      	str	r2, [r3, #88]	; 0x58
 80088e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ea:	4a0c      	ldr	r2, [pc, #48]	; (800891c <prvInitialiseNewTask+0x144>)
 80088ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80088ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f0:	4a0b      	ldr	r2, [pc, #44]	; (8008920 <prvInitialiseNewTask+0x148>)
 80088f2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088f4:	683a      	ldr	r2, [r7, #0]
 80088f6:	68f9      	ldr	r1, [r7, #12]
 80088f8:	69b8      	ldr	r0, [r7, #24]
 80088fa:	f001 fb15 	bl	8009f28 <pxPortInitialiseStack>
 80088fe:	4602      	mov	r2, r0
 8008900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008902:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008906:	2b00      	cmp	r3, #0
 8008908:	d002      	beq.n	8008910 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800890a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800890e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008910:	bf00      	nop
 8008912:	3720      	adds	r7, #32
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	0800b30c 	.word	0x0800b30c
 800891c:	0800b32c 	.word	0x0800b32c
 8008920:	0800b2ec 	.word	0x0800b2ec

08008924 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800892c:	f001 fc2a 	bl	800a184 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008930:	4b2d      	ldr	r3, [pc, #180]	; (80089e8 <prvAddNewTaskToReadyList+0xc4>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	3301      	adds	r3, #1
 8008936:	4a2c      	ldr	r2, [pc, #176]	; (80089e8 <prvAddNewTaskToReadyList+0xc4>)
 8008938:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800893a:	4b2c      	ldr	r3, [pc, #176]	; (80089ec <prvAddNewTaskToReadyList+0xc8>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d109      	bne.n	8008956 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008942:	4a2a      	ldr	r2, [pc, #168]	; (80089ec <prvAddNewTaskToReadyList+0xc8>)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008948:	4b27      	ldr	r3, [pc, #156]	; (80089e8 <prvAddNewTaskToReadyList+0xc4>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d110      	bne.n	8008972 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008950:	f000 fcc4 	bl	80092dc <prvInitialiseTaskLists>
 8008954:	e00d      	b.n	8008972 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008956:	4b26      	ldr	r3, [pc, #152]	; (80089f0 <prvAddNewTaskToReadyList+0xcc>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d109      	bne.n	8008972 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800895e:	4b23      	ldr	r3, [pc, #140]	; (80089ec <prvAddNewTaskToReadyList+0xc8>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008968:	429a      	cmp	r2, r3
 800896a:	d802      	bhi.n	8008972 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800896c:	4a1f      	ldr	r2, [pc, #124]	; (80089ec <prvAddNewTaskToReadyList+0xc8>)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008972:	4b20      	ldr	r3, [pc, #128]	; (80089f4 <prvAddNewTaskToReadyList+0xd0>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	3301      	adds	r3, #1
 8008978:	4a1e      	ldr	r2, [pc, #120]	; (80089f4 <prvAddNewTaskToReadyList+0xd0>)
 800897a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800897c:	4b1d      	ldr	r3, [pc, #116]	; (80089f4 <prvAddNewTaskToReadyList+0xd0>)
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008988:	4b1b      	ldr	r3, [pc, #108]	; (80089f8 <prvAddNewTaskToReadyList+0xd4>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	429a      	cmp	r2, r3
 800898e:	d903      	bls.n	8008998 <prvAddNewTaskToReadyList+0x74>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008994:	4a18      	ldr	r2, [pc, #96]	; (80089f8 <prvAddNewTaskToReadyList+0xd4>)
 8008996:	6013      	str	r3, [r2, #0]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800899c:	4613      	mov	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	4a15      	ldr	r2, [pc, #84]	; (80089fc <prvAddNewTaskToReadyList+0xd8>)
 80089a6:	441a      	add	r2, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	3304      	adds	r3, #4
 80089ac:	4619      	mov	r1, r3
 80089ae:	4610      	mov	r0, r2
 80089b0:	f7fe fe21 	bl	80075f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80089b4:	f001 fc16 	bl	800a1e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80089b8:	4b0d      	ldr	r3, [pc, #52]	; (80089f0 <prvAddNewTaskToReadyList+0xcc>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00e      	beq.n	80089de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089c0:	4b0a      	ldr	r3, [pc, #40]	; (80089ec <prvAddNewTaskToReadyList+0xc8>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d207      	bcs.n	80089de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80089ce:	4b0c      	ldr	r3, [pc, #48]	; (8008a00 <prvAddNewTaskToReadyList+0xdc>)
 80089d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089d4:	601a      	str	r2, [r3, #0]
 80089d6:	f3bf 8f4f 	dsb	sy
 80089da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089de:	bf00      	nop
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	2000395c 	.word	0x2000395c
 80089ec:	20003488 	.word	0x20003488
 80089f0:	20003968 	.word	0x20003968
 80089f4:	20003978 	.word	0x20003978
 80089f8:	20003964 	.word	0x20003964
 80089fc:	2000348c 	.word	0x2000348c
 8008a00:	e000ed04 	.word	0xe000ed04

08008a04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d017      	beq.n	8008a46 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a16:	4b13      	ldr	r3, [pc, #76]	; (8008a64 <vTaskDelay+0x60>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00a      	beq.n	8008a34 <vTaskDelay+0x30>
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	60bb      	str	r3, [r7, #8]
}
 8008a30:	bf00      	nop
 8008a32:	e7fe      	b.n	8008a32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008a34:	f000 f88a 	bl	8008b4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a38:	2100      	movs	r1, #0
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 feb2 	bl	80097a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a40:	f000 f892 	bl	8008b68 <xTaskResumeAll>
 8008a44:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d107      	bne.n	8008a5c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008a4c:	4b06      	ldr	r3, [pc, #24]	; (8008a68 <vTaskDelay+0x64>)
 8008a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a52:	601a      	str	r2, [r3, #0]
 8008a54:	f3bf 8f4f 	dsb	sy
 8008a58:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a5c:	bf00      	nop
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	20003984 	.word	0x20003984
 8008a68:	e000ed04 	.word	0xe000ed04

08008a6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b08a      	sub	sp, #40	; 0x28
 8008a70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a72:	2300      	movs	r3, #0
 8008a74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a76:	2300      	movs	r3, #0
 8008a78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a7a:	463a      	mov	r2, r7
 8008a7c:	1d39      	adds	r1, r7, #4
 8008a7e:	f107 0308 	add.w	r3, r7, #8
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7fe fb68 	bl	8007158 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a88:	6839      	ldr	r1, [r7, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	9202      	str	r2, [sp, #8]
 8008a90:	9301      	str	r3, [sp, #4]
 8008a92:	2300      	movs	r3, #0
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	2300      	movs	r3, #0
 8008a98:	460a      	mov	r2, r1
 8008a9a:	4924      	ldr	r1, [pc, #144]	; (8008b2c <vTaskStartScheduler+0xc0>)
 8008a9c:	4824      	ldr	r0, [pc, #144]	; (8008b30 <vTaskStartScheduler+0xc4>)
 8008a9e:	f7ff fdf9 	bl	8008694 <xTaskCreateStatic>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	4a23      	ldr	r2, [pc, #140]	; (8008b34 <vTaskStartScheduler+0xc8>)
 8008aa6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008aa8:	4b22      	ldr	r3, [pc, #136]	; (8008b34 <vTaskStartScheduler+0xc8>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d002      	beq.n	8008ab6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	617b      	str	r3, [r7, #20]
 8008ab4:	e001      	b.n	8008aba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d102      	bne.n	8008ac6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008ac0:	f000 fec4 	bl	800984c <xTimerCreateTimerTask>
 8008ac4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d11b      	bne.n	8008b04 <vTaskStartScheduler+0x98>
	__asm volatile
 8008acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad0:	f383 8811 	msr	BASEPRI, r3
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	613b      	str	r3, [r7, #16]
}
 8008ade:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ae0:	4b15      	ldr	r3, [pc, #84]	; (8008b38 <vTaskStartScheduler+0xcc>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	3354      	adds	r3, #84	; 0x54
 8008ae6:	4a15      	ldr	r2, [pc, #84]	; (8008b3c <vTaskStartScheduler+0xd0>)
 8008ae8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008aea:	4b15      	ldr	r3, [pc, #84]	; (8008b40 <vTaskStartScheduler+0xd4>)
 8008aec:	f04f 32ff 	mov.w	r2, #4294967295
 8008af0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008af2:	4b14      	ldr	r3, [pc, #80]	; (8008b44 <vTaskStartScheduler+0xd8>)
 8008af4:	2201      	movs	r2, #1
 8008af6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008af8:	4b13      	ldr	r3, [pc, #76]	; (8008b48 <vTaskStartScheduler+0xdc>)
 8008afa:	2200      	movs	r2, #0
 8008afc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008afe:	f001 fa9f 	bl	800a040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008b02:	e00e      	b.n	8008b22 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b0a:	d10a      	bne.n	8008b22 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b10:	f383 8811 	msr	BASEPRI, r3
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	60fb      	str	r3, [r7, #12]
}
 8008b1e:	bf00      	nop
 8008b20:	e7fe      	b.n	8008b20 <vTaskStartScheduler+0xb4>
}
 8008b22:	bf00      	nop
 8008b24:	3718      	adds	r7, #24
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	0800b248 	.word	0x0800b248
 8008b30:	080092ad 	.word	0x080092ad
 8008b34:	20003980 	.word	0x20003980
 8008b38:	20003488 	.word	0x20003488
 8008b3c:	20000014 	.word	0x20000014
 8008b40:	2000397c 	.word	0x2000397c
 8008b44:	20003968 	.word	0x20003968
 8008b48:	20003960 	.word	0x20003960

08008b4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008b50:	4b04      	ldr	r3, [pc, #16]	; (8008b64 <vTaskSuspendAll+0x18>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	3301      	adds	r3, #1
 8008b56:	4a03      	ldr	r2, [pc, #12]	; (8008b64 <vTaskSuspendAll+0x18>)
 8008b58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008b5a:	bf00      	nop
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr
 8008b64:	20003984 	.word	0x20003984

08008b68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b72:	2300      	movs	r3, #0
 8008b74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b76:	4b42      	ldr	r3, [pc, #264]	; (8008c80 <xTaskResumeAll+0x118>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d10a      	bne.n	8008b94 <xTaskResumeAll+0x2c>
	__asm volatile
 8008b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b82:	f383 8811 	msr	BASEPRI, r3
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	f3bf 8f4f 	dsb	sy
 8008b8e:	603b      	str	r3, [r7, #0]
}
 8008b90:	bf00      	nop
 8008b92:	e7fe      	b.n	8008b92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b94:	f001 faf6 	bl	800a184 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b98:	4b39      	ldr	r3, [pc, #228]	; (8008c80 <xTaskResumeAll+0x118>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	4a38      	ldr	r2, [pc, #224]	; (8008c80 <xTaskResumeAll+0x118>)
 8008ba0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ba2:	4b37      	ldr	r3, [pc, #220]	; (8008c80 <xTaskResumeAll+0x118>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d162      	bne.n	8008c70 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008baa:	4b36      	ldr	r3, [pc, #216]	; (8008c84 <xTaskResumeAll+0x11c>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d05e      	beq.n	8008c70 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bb2:	e02f      	b.n	8008c14 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bb4:	4b34      	ldr	r3, [pc, #208]	; (8008c88 <xTaskResumeAll+0x120>)
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	3318      	adds	r3, #24
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f7fe fd75 	bl	80076b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	3304      	adds	r3, #4
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7fe fd70 	bl	80076b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd4:	4b2d      	ldr	r3, [pc, #180]	; (8008c8c <xTaskResumeAll+0x124>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d903      	bls.n	8008be4 <xTaskResumeAll+0x7c>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be0:	4a2a      	ldr	r2, [pc, #168]	; (8008c8c <xTaskResumeAll+0x124>)
 8008be2:	6013      	str	r3, [r2, #0]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be8:	4613      	mov	r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	4413      	add	r3, r2
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	4a27      	ldr	r2, [pc, #156]	; (8008c90 <xTaskResumeAll+0x128>)
 8008bf2:	441a      	add	r2, r3
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	3304      	adds	r3, #4
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	4610      	mov	r0, r2
 8008bfc:	f7fe fcfb 	bl	80075f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c04:	4b23      	ldr	r3, [pc, #140]	; (8008c94 <xTaskResumeAll+0x12c>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d302      	bcc.n	8008c14 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008c0e:	4b22      	ldr	r3, [pc, #136]	; (8008c98 <xTaskResumeAll+0x130>)
 8008c10:	2201      	movs	r2, #1
 8008c12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c14:	4b1c      	ldr	r3, [pc, #112]	; (8008c88 <xTaskResumeAll+0x120>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1cb      	bne.n	8008bb4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d001      	beq.n	8008c26 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c22:	f000 fbfd 	bl	8009420 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008c26:	4b1d      	ldr	r3, [pc, #116]	; (8008c9c <xTaskResumeAll+0x134>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d010      	beq.n	8008c54 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c32:	f000 f847 	bl	8008cc4 <xTaskIncrementTick>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d002      	beq.n	8008c42 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008c3c:	4b16      	ldr	r3, [pc, #88]	; (8008c98 <xTaskResumeAll+0x130>)
 8008c3e:	2201      	movs	r2, #1
 8008c40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	3b01      	subs	r3, #1
 8008c46:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1f1      	bne.n	8008c32 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008c4e:	4b13      	ldr	r3, [pc, #76]	; (8008c9c <xTaskResumeAll+0x134>)
 8008c50:	2200      	movs	r2, #0
 8008c52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c54:	4b10      	ldr	r3, [pc, #64]	; (8008c98 <xTaskResumeAll+0x130>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d009      	beq.n	8008c70 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c60:	4b0f      	ldr	r3, [pc, #60]	; (8008ca0 <xTaskResumeAll+0x138>)
 8008c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c66:	601a      	str	r2, [r3, #0]
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c70:	f001 fab8 	bl	800a1e4 <vPortExitCritical>

	return xAlreadyYielded;
 8008c74:	68bb      	ldr	r3, [r7, #8]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	20003984 	.word	0x20003984
 8008c84:	2000395c 	.word	0x2000395c
 8008c88:	2000391c 	.word	0x2000391c
 8008c8c:	20003964 	.word	0x20003964
 8008c90:	2000348c 	.word	0x2000348c
 8008c94:	20003488 	.word	0x20003488
 8008c98:	20003970 	.word	0x20003970
 8008c9c:	2000396c 	.word	0x2000396c
 8008ca0:	e000ed04 	.word	0xe000ed04

08008ca4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008caa:	4b05      	ldr	r3, [pc, #20]	; (8008cc0 <xTaskGetTickCount+0x1c>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008cb0:	687b      	ldr	r3, [r7, #4]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	370c      	adds	r7, #12
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr
 8008cbe:	bf00      	nop
 8008cc0:	20003960 	.word	0x20003960

08008cc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b086      	sub	sp, #24
 8008cc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cce:	4b4f      	ldr	r3, [pc, #316]	; (8008e0c <xTaskIncrementTick+0x148>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f040 808f 	bne.w	8008df6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008cd8:	4b4d      	ldr	r3, [pc, #308]	; (8008e10 <xTaskIncrementTick+0x14c>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ce0:	4a4b      	ldr	r2, [pc, #300]	; (8008e10 <xTaskIncrementTick+0x14c>)
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d120      	bne.n	8008d2e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008cec:	4b49      	ldr	r3, [pc, #292]	; (8008e14 <xTaskIncrementTick+0x150>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00a      	beq.n	8008d0c <xTaskIncrementTick+0x48>
	__asm volatile
 8008cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfa:	f383 8811 	msr	BASEPRI, r3
 8008cfe:	f3bf 8f6f 	isb	sy
 8008d02:	f3bf 8f4f 	dsb	sy
 8008d06:	603b      	str	r3, [r7, #0]
}
 8008d08:	bf00      	nop
 8008d0a:	e7fe      	b.n	8008d0a <xTaskIncrementTick+0x46>
 8008d0c:	4b41      	ldr	r3, [pc, #260]	; (8008e14 <xTaskIncrementTick+0x150>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	60fb      	str	r3, [r7, #12]
 8008d12:	4b41      	ldr	r3, [pc, #260]	; (8008e18 <xTaskIncrementTick+0x154>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a3f      	ldr	r2, [pc, #252]	; (8008e14 <xTaskIncrementTick+0x150>)
 8008d18:	6013      	str	r3, [r2, #0]
 8008d1a:	4a3f      	ldr	r2, [pc, #252]	; (8008e18 <xTaskIncrementTick+0x154>)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6013      	str	r3, [r2, #0]
 8008d20:	4b3e      	ldr	r3, [pc, #248]	; (8008e1c <xTaskIncrementTick+0x158>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	3301      	adds	r3, #1
 8008d26:	4a3d      	ldr	r2, [pc, #244]	; (8008e1c <xTaskIncrementTick+0x158>)
 8008d28:	6013      	str	r3, [r2, #0]
 8008d2a:	f000 fb79 	bl	8009420 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d2e:	4b3c      	ldr	r3, [pc, #240]	; (8008e20 <xTaskIncrementTick+0x15c>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	693a      	ldr	r2, [r7, #16]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d349      	bcc.n	8008dcc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d38:	4b36      	ldr	r3, [pc, #216]	; (8008e14 <xTaskIncrementTick+0x150>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d104      	bne.n	8008d4c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d42:	4b37      	ldr	r3, [pc, #220]	; (8008e20 <xTaskIncrementTick+0x15c>)
 8008d44:	f04f 32ff 	mov.w	r2, #4294967295
 8008d48:	601a      	str	r2, [r3, #0]
					break;
 8008d4a:	e03f      	b.n	8008dcc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d4c:	4b31      	ldr	r3, [pc, #196]	; (8008e14 <xTaskIncrementTick+0x150>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d5c:	693a      	ldr	r2, [r7, #16]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d203      	bcs.n	8008d6c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d64:	4a2e      	ldr	r2, [pc, #184]	; (8008e20 <xTaskIncrementTick+0x15c>)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008d6a:	e02f      	b.n	8008dcc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	3304      	adds	r3, #4
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7fe fc9d 	bl	80076b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d004      	beq.n	8008d88 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	3318      	adds	r3, #24
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7fe fc94 	bl	80076b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d8c:	4b25      	ldr	r3, [pc, #148]	; (8008e24 <xTaskIncrementTick+0x160>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d903      	bls.n	8008d9c <xTaskIncrementTick+0xd8>
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d98:	4a22      	ldr	r2, [pc, #136]	; (8008e24 <xTaskIncrementTick+0x160>)
 8008d9a:	6013      	str	r3, [r2, #0]
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008da0:	4613      	mov	r3, r2
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	4413      	add	r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4a1f      	ldr	r2, [pc, #124]	; (8008e28 <xTaskIncrementTick+0x164>)
 8008daa:	441a      	add	r2, r3
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	3304      	adds	r3, #4
 8008db0:	4619      	mov	r1, r3
 8008db2:	4610      	mov	r0, r2
 8008db4:	f7fe fc1f 	bl	80075f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dbc:	4b1b      	ldr	r3, [pc, #108]	; (8008e2c <xTaskIncrementTick+0x168>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d3b8      	bcc.n	8008d38 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dca:	e7b5      	b.n	8008d38 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008dcc:	4b17      	ldr	r3, [pc, #92]	; (8008e2c <xTaskIncrementTick+0x168>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd2:	4915      	ldr	r1, [pc, #84]	; (8008e28 <xTaskIncrementTick+0x164>)
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	4413      	add	r3, r2
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	440b      	add	r3, r1
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d901      	bls.n	8008de8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008de4:	2301      	movs	r3, #1
 8008de6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008de8:	4b11      	ldr	r3, [pc, #68]	; (8008e30 <xTaskIncrementTick+0x16c>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d007      	beq.n	8008e00 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008df0:	2301      	movs	r3, #1
 8008df2:	617b      	str	r3, [r7, #20]
 8008df4:	e004      	b.n	8008e00 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008df6:	4b0f      	ldr	r3, [pc, #60]	; (8008e34 <xTaskIncrementTick+0x170>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	4a0d      	ldr	r2, [pc, #52]	; (8008e34 <xTaskIncrementTick+0x170>)
 8008dfe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008e00:	697b      	ldr	r3, [r7, #20]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3718      	adds	r7, #24
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	20003984 	.word	0x20003984
 8008e10:	20003960 	.word	0x20003960
 8008e14:	20003914 	.word	0x20003914
 8008e18:	20003918 	.word	0x20003918
 8008e1c:	20003974 	.word	0x20003974
 8008e20:	2000397c 	.word	0x2000397c
 8008e24:	20003964 	.word	0x20003964
 8008e28:	2000348c 	.word	0x2000348c
 8008e2c:	20003488 	.word	0x20003488
 8008e30:	20003970 	.word	0x20003970
 8008e34:	2000396c 	.word	0x2000396c

08008e38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e3e:	4b2a      	ldr	r3, [pc, #168]	; (8008ee8 <vTaskSwitchContext+0xb0>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d003      	beq.n	8008e4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e46:	4b29      	ldr	r3, [pc, #164]	; (8008eec <vTaskSwitchContext+0xb4>)
 8008e48:	2201      	movs	r2, #1
 8008e4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e4c:	e046      	b.n	8008edc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008e4e:	4b27      	ldr	r3, [pc, #156]	; (8008eec <vTaskSwitchContext+0xb4>)
 8008e50:	2200      	movs	r2, #0
 8008e52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e54:	4b26      	ldr	r3, [pc, #152]	; (8008ef0 <vTaskSwitchContext+0xb8>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	60fb      	str	r3, [r7, #12]
 8008e5a:	e010      	b.n	8008e7e <vTaskSwitchContext+0x46>
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d10a      	bne.n	8008e78 <vTaskSwitchContext+0x40>
	__asm volatile
 8008e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e66:	f383 8811 	msr	BASEPRI, r3
 8008e6a:	f3bf 8f6f 	isb	sy
 8008e6e:	f3bf 8f4f 	dsb	sy
 8008e72:	607b      	str	r3, [r7, #4]
}
 8008e74:	bf00      	nop
 8008e76:	e7fe      	b.n	8008e76 <vTaskSwitchContext+0x3e>
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	60fb      	str	r3, [r7, #12]
 8008e7e:	491d      	ldr	r1, [pc, #116]	; (8008ef4 <vTaskSwitchContext+0xbc>)
 8008e80:	68fa      	ldr	r2, [r7, #12]
 8008e82:	4613      	mov	r3, r2
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	4413      	add	r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	440b      	add	r3, r1
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d0e4      	beq.n	8008e5c <vTaskSwitchContext+0x24>
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	4613      	mov	r3, r2
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	4413      	add	r3, r2
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	4a15      	ldr	r2, [pc, #84]	; (8008ef4 <vTaskSwitchContext+0xbc>)
 8008e9e:	4413      	add	r3, r2
 8008ea0:	60bb      	str	r3, [r7, #8]
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	685a      	ldr	r2, [r3, #4]
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	605a      	str	r2, [r3, #4]
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	685a      	ldr	r2, [r3, #4]
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	3308      	adds	r3, #8
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d104      	bne.n	8008ec2 <vTaskSwitchContext+0x8a>
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	685a      	ldr	r2, [r3, #4]
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	605a      	str	r2, [r3, #4]
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	4a0b      	ldr	r2, [pc, #44]	; (8008ef8 <vTaskSwitchContext+0xc0>)
 8008eca:	6013      	str	r3, [r2, #0]
 8008ecc:	4a08      	ldr	r2, [pc, #32]	; (8008ef0 <vTaskSwitchContext+0xb8>)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ed2:	4b09      	ldr	r3, [pc, #36]	; (8008ef8 <vTaskSwitchContext+0xc0>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	3354      	adds	r3, #84	; 0x54
 8008ed8:	4a08      	ldr	r2, [pc, #32]	; (8008efc <vTaskSwitchContext+0xc4>)
 8008eda:	6013      	str	r3, [r2, #0]
}
 8008edc:	bf00      	nop
 8008ede:	3714      	adds	r7, #20
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	20003984 	.word	0x20003984
 8008eec:	20003970 	.word	0x20003970
 8008ef0:	20003964 	.word	0x20003964
 8008ef4:	2000348c 	.word	0x2000348c
 8008ef8:	20003488 	.word	0x20003488
 8008efc:	20000014 	.word	0x20000014

08008f00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d10a      	bne.n	8008f26 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	60fb      	str	r3, [r7, #12]
}
 8008f22:	bf00      	nop
 8008f24:	e7fe      	b.n	8008f24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f26:	4b07      	ldr	r3, [pc, #28]	; (8008f44 <vTaskPlaceOnEventList+0x44>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	3318      	adds	r3, #24
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f7fe fb85 	bl	800763e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f34:	2101      	movs	r1, #1
 8008f36:	6838      	ldr	r0, [r7, #0]
 8008f38:	f000 fc34 	bl	80097a4 <prvAddCurrentTaskToDelayedList>
}
 8008f3c:	bf00      	nop
 8008f3e:	3710      	adds	r7, #16
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	20003488 	.word	0x20003488

08008f48 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b086      	sub	sp, #24
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d10a      	bne.n	8008f70 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8008f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5e:	f383 8811 	msr	BASEPRI, r3
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	f3bf 8f4f 	dsb	sy
 8008f6a:	617b      	str	r3, [r7, #20]
}
 8008f6c:	bf00      	nop
 8008f6e:	e7fe      	b.n	8008f6e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8008f70:	4b11      	ldr	r3, [pc, #68]	; (8008fb8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d10a      	bne.n	8008f8e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8008f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7c:	f383 8811 	msr	BASEPRI, r3
 8008f80:	f3bf 8f6f 	isb	sy
 8008f84:	f3bf 8f4f 	dsb	sy
 8008f88:	613b      	str	r3, [r7, #16]
}
 8008f8a:	bf00      	nop
 8008f8c:	e7fe      	b.n	8008f8c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008f8e:	4b0b      	ldr	r3, [pc, #44]	; (8008fbc <vTaskPlaceOnUnorderedEventList+0x74>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008f98:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f9a:	4b08      	ldr	r3, [pc, #32]	; (8008fbc <vTaskPlaceOnUnorderedEventList+0x74>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	3318      	adds	r3, #24
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f7fe fb27 	bl	80075f6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008fa8:	2101      	movs	r1, #1
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fbfa 	bl	80097a4 <prvAddCurrentTaskToDelayedList>
}
 8008fb0:	bf00      	nop
 8008fb2:	3718      	adds	r7, #24
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	20003984 	.word	0x20003984
 8008fbc:	20003488 	.word	0x20003488

08008fc0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d10a      	bne.n	8008fe8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd6:	f383 8811 	msr	BASEPRI, r3
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	617b      	str	r3, [r7, #20]
}
 8008fe4:	bf00      	nop
 8008fe6:	e7fe      	b.n	8008fe6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008fe8:	4b0a      	ldr	r3, [pc, #40]	; (8009014 <vTaskPlaceOnEventListRestricted+0x54>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	3318      	adds	r3, #24
 8008fee:	4619      	mov	r1, r3
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f7fe fb00 	bl	80075f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d002      	beq.n	8009002 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8009000:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009002:	6879      	ldr	r1, [r7, #4]
 8009004:	68b8      	ldr	r0, [r7, #8]
 8009006:	f000 fbcd 	bl	80097a4 <prvAddCurrentTaskToDelayedList>
	}
 800900a:	bf00      	nop
 800900c:	3718      	adds	r7, #24
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	20003488 	.word	0x20003488

08009018 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b086      	sub	sp, #24
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10a      	bne.n	8009044 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	60fb      	str	r3, [r7, #12]
}
 8009040:	bf00      	nop
 8009042:	e7fe      	b.n	8009042 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	3318      	adds	r3, #24
 8009048:	4618      	mov	r0, r3
 800904a:	f7fe fb31 	bl	80076b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800904e:	4b1e      	ldr	r3, [pc, #120]	; (80090c8 <xTaskRemoveFromEventList+0xb0>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d11d      	bne.n	8009092 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	3304      	adds	r3, #4
 800905a:	4618      	mov	r0, r3
 800905c:	f7fe fb28 	bl	80076b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009064:	4b19      	ldr	r3, [pc, #100]	; (80090cc <xTaskRemoveFromEventList+0xb4>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	429a      	cmp	r2, r3
 800906a:	d903      	bls.n	8009074 <xTaskRemoveFromEventList+0x5c>
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009070:	4a16      	ldr	r2, [pc, #88]	; (80090cc <xTaskRemoveFromEventList+0xb4>)
 8009072:	6013      	str	r3, [r2, #0]
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009078:	4613      	mov	r3, r2
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	4413      	add	r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	4a13      	ldr	r2, [pc, #76]	; (80090d0 <xTaskRemoveFromEventList+0xb8>)
 8009082:	441a      	add	r2, r3
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	3304      	adds	r3, #4
 8009088:	4619      	mov	r1, r3
 800908a:	4610      	mov	r0, r2
 800908c:	f7fe fab3 	bl	80075f6 <vListInsertEnd>
 8009090:	e005      	b.n	800909e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	3318      	adds	r3, #24
 8009096:	4619      	mov	r1, r3
 8009098:	480e      	ldr	r0, [pc, #56]	; (80090d4 <xTaskRemoveFromEventList+0xbc>)
 800909a:	f7fe faac 	bl	80075f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a2:	4b0d      	ldr	r3, [pc, #52]	; (80090d8 <xTaskRemoveFromEventList+0xc0>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d905      	bls.n	80090b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80090ac:	2301      	movs	r3, #1
 80090ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80090b0:	4b0a      	ldr	r3, [pc, #40]	; (80090dc <xTaskRemoveFromEventList+0xc4>)
 80090b2:	2201      	movs	r2, #1
 80090b4:	601a      	str	r2, [r3, #0]
 80090b6:	e001      	b.n	80090bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80090b8:	2300      	movs	r3, #0
 80090ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80090bc:	697b      	ldr	r3, [r7, #20]
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3718      	adds	r7, #24
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	20003984 	.word	0x20003984
 80090cc:	20003964 	.word	0x20003964
 80090d0:	2000348c 	.word	0x2000348c
 80090d4:	2000391c 	.word	0x2000391c
 80090d8:	20003488 	.word	0x20003488
 80090dc:	20003970 	.word	0x20003970

080090e0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b086      	sub	sp, #24
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80090ea:	4b29      	ldr	r3, [pc, #164]	; (8009190 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10a      	bne.n	8009108 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80090f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f6:	f383 8811 	msr	BASEPRI, r3
 80090fa:	f3bf 8f6f 	isb	sy
 80090fe:	f3bf 8f4f 	dsb	sy
 8009102:	613b      	str	r3, [r7, #16]
}
 8009104:	bf00      	nop
 8009106:	e7fe      	b.n	8009106 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d10a      	bne.n	8009134 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800911e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	60fb      	str	r3, [r7, #12]
}
 8009130:	bf00      	nop
 8009132:	e7fe      	b.n	8009132 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f7fe fabb 	bl	80076b0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	3304      	adds	r3, #4
 800913e:	4618      	mov	r0, r3
 8009140:	f7fe fab6 	bl	80076b0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009148:	4b12      	ldr	r3, [pc, #72]	; (8009194 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	429a      	cmp	r2, r3
 800914e:	d903      	bls.n	8009158 <vTaskRemoveFromUnorderedEventList+0x78>
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009154:	4a0f      	ldr	r2, [pc, #60]	; (8009194 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009156:	6013      	str	r3, [r2, #0]
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800915c:	4613      	mov	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4413      	add	r3, r2
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	4a0c      	ldr	r2, [pc, #48]	; (8009198 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8009166:	441a      	add	r2, r3
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	3304      	adds	r3, #4
 800916c:	4619      	mov	r1, r3
 800916e:	4610      	mov	r0, r2
 8009170:	f7fe fa41 	bl	80075f6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009178:	4b08      	ldr	r3, [pc, #32]	; (800919c <vTaskRemoveFromUnorderedEventList+0xbc>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800917e:	429a      	cmp	r2, r3
 8009180:	d902      	bls.n	8009188 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8009182:	4b07      	ldr	r3, [pc, #28]	; (80091a0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8009184:	2201      	movs	r2, #1
 8009186:	601a      	str	r2, [r3, #0]
	}
}
 8009188:	bf00      	nop
 800918a:	3718      	adds	r7, #24
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	20003984 	.word	0x20003984
 8009194:	20003964 	.word	0x20003964
 8009198:	2000348c 	.word	0x2000348c
 800919c:	20003488 	.word	0x20003488
 80091a0:	20003970 	.word	0x20003970

080091a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80091ac:	4b06      	ldr	r3, [pc, #24]	; (80091c8 <vTaskInternalSetTimeOutState+0x24>)
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80091b4:	4b05      	ldr	r3, [pc, #20]	; (80091cc <vTaskInternalSetTimeOutState+0x28>)
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	605a      	str	r2, [r3, #4]
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr
 80091c8:	20003974 	.word	0x20003974
 80091cc:	20003960 	.word	0x20003960

080091d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b088      	sub	sp, #32
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10a      	bne.n	80091f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80091e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e4:	f383 8811 	msr	BASEPRI, r3
 80091e8:	f3bf 8f6f 	isb	sy
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	613b      	str	r3, [r7, #16]
}
 80091f2:	bf00      	nop
 80091f4:	e7fe      	b.n	80091f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10a      	bne.n	8009212 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80091fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009200:	f383 8811 	msr	BASEPRI, r3
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	60fb      	str	r3, [r7, #12]
}
 800920e:	bf00      	nop
 8009210:	e7fe      	b.n	8009210 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009212:	f000 ffb7 	bl	800a184 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009216:	4b1d      	ldr	r3, [pc, #116]	; (800928c <xTaskCheckForTimeOut+0xbc>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	69ba      	ldr	r2, [r7, #24]
 8009222:	1ad3      	subs	r3, r2, r3
 8009224:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800922e:	d102      	bne.n	8009236 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009230:	2300      	movs	r3, #0
 8009232:	61fb      	str	r3, [r7, #28]
 8009234:	e023      	b.n	800927e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	4b15      	ldr	r3, [pc, #84]	; (8009290 <xTaskCheckForTimeOut+0xc0>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	429a      	cmp	r2, r3
 8009240:	d007      	beq.n	8009252 <xTaskCheckForTimeOut+0x82>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	69ba      	ldr	r2, [r7, #24]
 8009248:	429a      	cmp	r2, r3
 800924a:	d302      	bcc.n	8009252 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800924c:	2301      	movs	r3, #1
 800924e:	61fb      	str	r3, [r7, #28]
 8009250:	e015      	b.n	800927e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	697a      	ldr	r2, [r7, #20]
 8009258:	429a      	cmp	r2, r3
 800925a:	d20b      	bcs.n	8009274 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	1ad2      	subs	r2, r2, r3
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f7ff ff9b 	bl	80091a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800926e:	2300      	movs	r3, #0
 8009270:	61fb      	str	r3, [r7, #28]
 8009272:	e004      	b.n	800927e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	2200      	movs	r2, #0
 8009278:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800927a:	2301      	movs	r3, #1
 800927c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800927e:	f000 ffb1 	bl	800a1e4 <vPortExitCritical>

	return xReturn;
 8009282:	69fb      	ldr	r3, [r7, #28]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3720      	adds	r7, #32
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	20003960 	.word	0x20003960
 8009290:	20003974 	.word	0x20003974

08009294 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009294:	b480      	push	{r7}
 8009296:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009298:	4b03      	ldr	r3, [pc, #12]	; (80092a8 <vTaskMissedYield+0x14>)
 800929a:	2201      	movs	r2, #1
 800929c:	601a      	str	r2, [r3, #0]
}
 800929e:	bf00      	nop
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr
 80092a8:	20003970 	.word	0x20003970

080092ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80092b4:	f000 f852 	bl	800935c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80092b8:	4b06      	ldr	r3, [pc, #24]	; (80092d4 <prvIdleTask+0x28>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d9f9      	bls.n	80092b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80092c0:	4b05      	ldr	r3, [pc, #20]	; (80092d8 <prvIdleTask+0x2c>)
 80092c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092c6:	601a      	str	r2, [r3, #0]
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80092d0:	e7f0      	b.n	80092b4 <prvIdleTask+0x8>
 80092d2:	bf00      	nop
 80092d4:	2000348c 	.word	0x2000348c
 80092d8:	e000ed04 	.word	0xe000ed04

080092dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092e2:	2300      	movs	r3, #0
 80092e4:	607b      	str	r3, [r7, #4]
 80092e6:	e00c      	b.n	8009302 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	4613      	mov	r3, r2
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	4413      	add	r3, r2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4a12      	ldr	r2, [pc, #72]	; (800933c <prvInitialiseTaskLists+0x60>)
 80092f4:	4413      	add	r3, r2
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7fe f950 	bl	800759c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	3301      	adds	r3, #1
 8009300:	607b      	str	r3, [r7, #4]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2b37      	cmp	r3, #55	; 0x37
 8009306:	d9ef      	bls.n	80092e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009308:	480d      	ldr	r0, [pc, #52]	; (8009340 <prvInitialiseTaskLists+0x64>)
 800930a:	f7fe f947 	bl	800759c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800930e:	480d      	ldr	r0, [pc, #52]	; (8009344 <prvInitialiseTaskLists+0x68>)
 8009310:	f7fe f944 	bl	800759c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009314:	480c      	ldr	r0, [pc, #48]	; (8009348 <prvInitialiseTaskLists+0x6c>)
 8009316:	f7fe f941 	bl	800759c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800931a:	480c      	ldr	r0, [pc, #48]	; (800934c <prvInitialiseTaskLists+0x70>)
 800931c:	f7fe f93e 	bl	800759c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009320:	480b      	ldr	r0, [pc, #44]	; (8009350 <prvInitialiseTaskLists+0x74>)
 8009322:	f7fe f93b 	bl	800759c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009326:	4b0b      	ldr	r3, [pc, #44]	; (8009354 <prvInitialiseTaskLists+0x78>)
 8009328:	4a05      	ldr	r2, [pc, #20]	; (8009340 <prvInitialiseTaskLists+0x64>)
 800932a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800932c:	4b0a      	ldr	r3, [pc, #40]	; (8009358 <prvInitialiseTaskLists+0x7c>)
 800932e:	4a05      	ldr	r2, [pc, #20]	; (8009344 <prvInitialiseTaskLists+0x68>)
 8009330:	601a      	str	r2, [r3, #0]
}
 8009332:	bf00      	nop
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	2000348c 	.word	0x2000348c
 8009340:	200038ec 	.word	0x200038ec
 8009344:	20003900 	.word	0x20003900
 8009348:	2000391c 	.word	0x2000391c
 800934c:	20003930 	.word	0x20003930
 8009350:	20003948 	.word	0x20003948
 8009354:	20003914 	.word	0x20003914
 8009358:	20003918 	.word	0x20003918

0800935c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009362:	e019      	b.n	8009398 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009364:	f000 ff0e 	bl	800a184 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009368:	4b10      	ldr	r3, [pc, #64]	; (80093ac <prvCheckTasksWaitingTermination+0x50>)
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	3304      	adds	r3, #4
 8009374:	4618      	mov	r0, r3
 8009376:	f7fe f99b 	bl	80076b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800937a:	4b0d      	ldr	r3, [pc, #52]	; (80093b0 <prvCheckTasksWaitingTermination+0x54>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	3b01      	subs	r3, #1
 8009380:	4a0b      	ldr	r2, [pc, #44]	; (80093b0 <prvCheckTasksWaitingTermination+0x54>)
 8009382:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009384:	4b0b      	ldr	r3, [pc, #44]	; (80093b4 <prvCheckTasksWaitingTermination+0x58>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	3b01      	subs	r3, #1
 800938a:	4a0a      	ldr	r2, [pc, #40]	; (80093b4 <prvCheckTasksWaitingTermination+0x58>)
 800938c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800938e:	f000 ff29 	bl	800a1e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f810 	bl	80093b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009398:	4b06      	ldr	r3, [pc, #24]	; (80093b4 <prvCheckTasksWaitingTermination+0x58>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1e1      	bne.n	8009364 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80093a0:	bf00      	nop
 80093a2:	bf00      	nop
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	20003930 	.word	0x20003930
 80093b0:	2000395c 	.word	0x2000395c
 80093b4:	20003944 	.word	0x20003944

080093b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	3354      	adds	r3, #84	; 0x54
 80093c4:	4618      	mov	r0, r3
 80093c6:	f001 facd 	bl	800a964 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d108      	bne.n	80093e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093d8:	4618      	mov	r0, r3
 80093da:	f001 f8c1 	bl	800a560 <vPortFree>
				vPortFree( pxTCB );
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f001 f8be 	bl	800a560 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80093e4:	e018      	b.n	8009418 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d103      	bne.n	80093f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f001 f8b5 	bl	800a560 <vPortFree>
	}
 80093f6:	e00f      	b.n	8009418 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d00a      	beq.n	8009418 <prvDeleteTCB+0x60>
	__asm volatile
 8009402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009406:	f383 8811 	msr	BASEPRI, r3
 800940a:	f3bf 8f6f 	isb	sy
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	60fb      	str	r3, [r7, #12]
}
 8009414:	bf00      	nop
 8009416:	e7fe      	b.n	8009416 <prvDeleteTCB+0x5e>
	}
 8009418:	bf00      	nop
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009426:	4b0c      	ldr	r3, [pc, #48]	; (8009458 <prvResetNextTaskUnblockTime+0x38>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d104      	bne.n	800943a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009430:	4b0a      	ldr	r3, [pc, #40]	; (800945c <prvResetNextTaskUnblockTime+0x3c>)
 8009432:	f04f 32ff 	mov.w	r2, #4294967295
 8009436:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009438:	e008      	b.n	800944c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800943a:	4b07      	ldr	r3, [pc, #28]	; (8009458 <prvResetNextTaskUnblockTime+0x38>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	4a04      	ldr	r2, [pc, #16]	; (800945c <prvResetNextTaskUnblockTime+0x3c>)
 800944a:	6013      	str	r3, [r2, #0]
}
 800944c:	bf00      	nop
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr
 8009458:	20003914 	.word	0x20003914
 800945c:	2000397c 	.word	0x2000397c

08009460 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009466:	4b0b      	ldr	r3, [pc, #44]	; (8009494 <xTaskGetSchedulerState+0x34>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d102      	bne.n	8009474 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800946e:	2301      	movs	r3, #1
 8009470:	607b      	str	r3, [r7, #4]
 8009472:	e008      	b.n	8009486 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009474:	4b08      	ldr	r3, [pc, #32]	; (8009498 <xTaskGetSchedulerState+0x38>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d102      	bne.n	8009482 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800947c:	2302      	movs	r3, #2
 800947e:	607b      	str	r3, [r7, #4]
 8009480:	e001      	b.n	8009486 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009482:	2300      	movs	r3, #0
 8009484:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009486:	687b      	ldr	r3, [r7, #4]
	}
 8009488:	4618      	mov	r0, r3
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr
 8009494:	20003968 	.word	0x20003968
 8009498:	20003984 	.word	0x20003984

0800949c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80094a8:	2300      	movs	r3, #0
 80094aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d051      	beq.n	8009556 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b6:	4b2a      	ldr	r3, [pc, #168]	; (8009560 <xTaskPriorityInherit+0xc4>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094bc:	429a      	cmp	r2, r3
 80094be:	d241      	bcs.n	8009544 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	699b      	ldr	r3, [r3, #24]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	db06      	blt.n	80094d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094c8:	4b25      	ldr	r3, [pc, #148]	; (8009560 <xTaskPriorityInherit+0xc4>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	6959      	ldr	r1, [r3, #20]
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094de:	4613      	mov	r3, r2
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	4413      	add	r3, r2
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	4a1f      	ldr	r2, [pc, #124]	; (8009564 <xTaskPriorityInherit+0xc8>)
 80094e8:	4413      	add	r3, r2
 80094ea:	4299      	cmp	r1, r3
 80094ec:	d122      	bne.n	8009534 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	3304      	adds	r3, #4
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fe f8dc 	bl	80076b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80094f8:	4b19      	ldr	r3, [pc, #100]	; (8009560 <xTaskPriorityInherit+0xc4>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009506:	4b18      	ldr	r3, [pc, #96]	; (8009568 <xTaskPriorityInherit+0xcc>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	429a      	cmp	r2, r3
 800950c:	d903      	bls.n	8009516 <xTaskPriorityInherit+0x7a>
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009512:	4a15      	ldr	r2, [pc, #84]	; (8009568 <xTaskPriorityInherit+0xcc>)
 8009514:	6013      	str	r3, [r2, #0]
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800951a:	4613      	mov	r3, r2
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	4413      	add	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	4a10      	ldr	r2, [pc, #64]	; (8009564 <xTaskPriorityInherit+0xc8>)
 8009524:	441a      	add	r2, r3
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	3304      	adds	r3, #4
 800952a:	4619      	mov	r1, r3
 800952c:	4610      	mov	r0, r2
 800952e:	f7fe f862 	bl	80075f6 <vListInsertEnd>
 8009532:	e004      	b.n	800953e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009534:	4b0a      	ldr	r3, [pc, #40]	; (8009560 <xTaskPriorityInherit+0xc4>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800953e:	2301      	movs	r3, #1
 8009540:	60fb      	str	r3, [r7, #12]
 8009542:	e008      	b.n	8009556 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009548:	4b05      	ldr	r3, [pc, #20]	; (8009560 <xTaskPriorityInherit+0xc4>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800954e:	429a      	cmp	r2, r3
 8009550:	d201      	bcs.n	8009556 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009552:	2301      	movs	r3, #1
 8009554:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009556:	68fb      	ldr	r3, [r7, #12]
	}
 8009558:	4618      	mov	r0, r3
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	20003488 	.word	0x20003488
 8009564:	2000348c 	.word	0x2000348c
 8009568:	20003964 	.word	0x20003964

0800956c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009578:	2300      	movs	r3, #0
 800957a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d056      	beq.n	8009630 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009582:	4b2e      	ldr	r3, [pc, #184]	; (800963c <xTaskPriorityDisinherit+0xd0>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	693a      	ldr	r2, [r7, #16]
 8009588:	429a      	cmp	r2, r3
 800958a:	d00a      	beq.n	80095a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800958c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009590:	f383 8811 	msr	BASEPRI, r3
 8009594:	f3bf 8f6f 	isb	sy
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	60fb      	str	r3, [r7, #12]
}
 800959e:	bf00      	nop
 80095a0:	e7fe      	b.n	80095a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d10a      	bne.n	80095c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80095aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ae:	f383 8811 	msr	BASEPRI, r3
 80095b2:	f3bf 8f6f 	isb	sy
 80095b6:	f3bf 8f4f 	dsb	sy
 80095ba:	60bb      	str	r3, [r7, #8]
}
 80095bc:	bf00      	nop
 80095be:	e7fe      	b.n	80095be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095c4:	1e5a      	subs	r2, r3, #1
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d02c      	beq.n	8009630 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d128      	bne.n	8009630 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	3304      	adds	r3, #4
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fe f864 	bl	80076b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009600:	4b0f      	ldr	r3, [pc, #60]	; (8009640 <xTaskPriorityDisinherit+0xd4>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	429a      	cmp	r2, r3
 8009606:	d903      	bls.n	8009610 <xTaskPriorityDisinherit+0xa4>
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800960c:	4a0c      	ldr	r2, [pc, #48]	; (8009640 <xTaskPriorityDisinherit+0xd4>)
 800960e:	6013      	str	r3, [r2, #0]
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009614:	4613      	mov	r3, r2
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	4413      	add	r3, r2
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	4a09      	ldr	r2, [pc, #36]	; (8009644 <xTaskPriorityDisinherit+0xd8>)
 800961e:	441a      	add	r2, r3
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	3304      	adds	r3, #4
 8009624:	4619      	mov	r1, r3
 8009626:	4610      	mov	r0, r2
 8009628:	f7fd ffe5 	bl	80075f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800962c:	2301      	movs	r3, #1
 800962e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009630:	697b      	ldr	r3, [r7, #20]
	}
 8009632:	4618      	mov	r0, r3
 8009634:	3718      	adds	r7, #24
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	20003488 	.word	0x20003488
 8009640:	20003964 	.word	0x20003964
 8009644:	2000348c 	.word	0x2000348c

08009648 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009648:	b580      	push	{r7, lr}
 800964a:	b088      	sub	sp, #32
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009656:	2301      	movs	r3, #1
 8009658:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d06a      	beq.n	8009736 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009664:	2b00      	cmp	r3, #0
 8009666:	d10a      	bne.n	800967e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966c:	f383 8811 	msr	BASEPRI, r3
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	60fb      	str	r3, [r7, #12]
}
 800967a:	bf00      	nop
 800967c:	e7fe      	b.n	800967c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	429a      	cmp	r2, r3
 8009686:	d902      	bls.n	800968e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	61fb      	str	r3, [r7, #28]
 800968c:	e002      	b.n	8009694 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009692:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009694:	69bb      	ldr	r3, [r7, #24]
 8009696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009698:	69fa      	ldr	r2, [r7, #28]
 800969a:	429a      	cmp	r2, r3
 800969c:	d04b      	beq.n	8009736 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800969e:	69bb      	ldr	r3, [r7, #24]
 80096a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096a2:	697a      	ldr	r2, [r7, #20]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d146      	bne.n	8009736 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80096a8:	4b25      	ldr	r3, [pc, #148]	; (8009740 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	69ba      	ldr	r2, [r7, #24]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d10a      	bne.n	80096c8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80096b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b6:	f383 8811 	msr	BASEPRI, r3
 80096ba:	f3bf 8f6f 	isb	sy
 80096be:	f3bf 8f4f 	dsb	sy
 80096c2:	60bb      	str	r3, [r7, #8]
}
 80096c4:	bf00      	nop
 80096c6:	e7fe      	b.n	80096c6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096cc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	69fa      	ldr	r2, [r7, #28]
 80096d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	699b      	ldr	r3, [r3, #24]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	db04      	blt.n	80096e6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80096e6:	69bb      	ldr	r3, [r7, #24]
 80096e8:	6959      	ldr	r1, [r3, #20]
 80096ea:	693a      	ldr	r2, [r7, #16]
 80096ec:	4613      	mov	r3, r2
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	4413      	add	r3, r2
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	4a13      	ldr	r2, [pc, #76]	; (8009744 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80096f6:	4413      	add	r3, r2
 80096f8:	4299      	cmp	r1, r3
 80096fa:	d11c      	bne.n	8009736 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	3304      	adds	r3, #4
 8009700:	4618      	mov	r0, r3
 8009702:	f7fd ffd5 	bl	80076b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800970a:	4b0f      	ldr	r3, [pc, #60]	; (8009748 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	429a      	cmp	r2, r3
 8009710:	d903      	bls.n	800971a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009716:	4a0c      	ldr	r2, [pc, #48]	; (8009748 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009718:	6013      	str	r3, [r2, #0]
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800971e:	4613      	mov	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	4a07      	ldr	r2, [pc, #28]	; (8009744 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009728:	441a      	add	r2, r3
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	3304      	adds	r3, #4
 800972e:	4619      	mov	r1, r3
 8009730:	4610      	mov	r0, r2
 8009732:	f7fd ff60 	bl	80075f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009736:	bf00      	nop
 8009738:	3720      	adds	r7, #32
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	20003488 	.word	0x20003488
 8009744:	2000348c 	.word	0x2000348c
 8009748:	20003964 	.word	0x20003964

0800974c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8009752:	4b09      	ldr	r3, [pc, #36]	; (8009778 <uxTaskResetEventItemValue+0x2c>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	699b      	ldr	r3, [r3, #24]
 8009758:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800975a:	4b07      	ldr	r3, [pc, #28]	; (8009778 <uxTaskResetEventItemValue+0x2c>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009760:	4b05      	ldr	r3, [pc, #20]	; (8009778 <uxTaskResetEventItemValue+0x2c>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8009768:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800976a:	687b      	ldr	r3, [r7, #4]
}
 800976c:	4618      	mov	r0, r3
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr
 8009778:	20003488 	.word	0x20003488

0800977c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800977c:	b480      	push	{r7}
 800977e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009780:	4b07      	ldr	r3, [pc, #28]	; (80097a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d004      	beq.n	8009792 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009788:	4b05      	ldr	r3, [pc, #20]	; (80097a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800978e:	3201      	adds	r2, #1
 8009790:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009792:	4b03      	ldr	r3, [pc, #12]	; (80097a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8009794:	681b      	ldr	r3, [r3, #0]
	}
 8009796:	4618      	mov	r0, r3
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr
 80097a0:	20003488 	.word	0x20003488

080097a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80097ae:	4b21      	ldr	r3, [pc, #132]	; (8009834 <prvAddCurrentTaskToDelayedList+0x90>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097b4:	4b20      	ldr	r3, [pc, #128]	; (8009838 <prvAddCurrentTaskToDelayedList+0x94>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	3304      	adds	r3, #4
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7fd ff78 	bl	80076b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c6:	d10a      	bne.n	80097de <prvAddCurrentTaskToDelayedList+0x3a>
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d007      	beq.n	80097de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097ce:	4b1a      	ldr	r3, [pc, #104]	; (8009838 <prvAddCurrentTaskToDelayedList+0x94>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	3304      	adds	r3, #4
 80097d4:	4619      	mov	r1, r3
 80097d6:	4819      	ldr	r0, [pc, #100]	; (800983c <prvAddCurrentTaskToDelayedList+0x98>)
 80097d8:	f7fd ff0d 	bl	80075f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80097dc:	e026      	b.n	800982c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4413      	add	r3, r2
 80097e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80097e6:	4b14      	ldr	r3, [pc, #80]	; (8009838 <prvAddCurrentTaskToDelayedList+0x94>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80097ee:	68ba      	ldr	r2, [r7, #8]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d209      	bcs.n	800980a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097f6:	4b12      	ldr	r3, [pc, #72]	; (8009840 <prvAddCurrentTaskToDelayedList+0x9c>)
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	4b0f      	ldr	r3, [pc, #60]	; (8009838 <prvAddCurrentTaskToDelayedList+0x94>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	3304      	adds	r3, #4
 8009800:	4619      	mov	r1, r3
 8009802:	4610      	mov	r0, r2
 8009804:	f7fd ff1b 	bl	800763e <vListInsert>
}
 8009808:	e010      	b.n	800982c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800980a:	4b0e      	ldr	r3, [pc, #56]	; (8009844 <prvAddCurrentTaskToDelayedList+0xa0>)
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	4b0a      	ldr	r3, [pc, #40]	; (8009838 <prvAddCurrentTaskToDelayedList+0x94>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	3304      	adds	r3, #4
 8009814:	4619      	mov	r1, r3
 8009816:	4610      	mov	r0, r2
 8009818:	f7fd ff11 	bl	800763e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800981c:	4b0a      	ldr	r3, [pc, #40]	; (8009848 <prvAddCurrentTaskToDelayedList+0xa4>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68ba      	ldr	r2, [r7, #8]
 8009822:	429a      	cmp	r2, r3
 8009824:	d202      	bcs.n	800982c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009826:	4a08      	ldr	r2, [pc, #32]	; (8009848 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	6013      	str	r3, [r2, #0]
}
 800982c:	bf00      	nop
 800982e:	3710      	adds	r7, #16
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	20003960 	.word	0x20003960
 8009838:	20003488 	.word	0x20003488
 800983c:	20003948 	.word	0x20003948
 8009840:	20003918 	.word	0x20003918
 8009844:	20003914 	.word	0x20003914
 8009848:	2000397c 	.word	0x2000397c

0800984c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b08a      	sub	sp, #40	; 0x28
 8009850:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009852:	2300      	movs	r3, #0
 8009854:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009856:	f000 fb07 	bl	8009e68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800985a:	4b1c      	ldr	r3, [pc, #112]	; (80098cc <xTimerCreateTimerTask+0x80>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d021      	beq.n	80098a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009862:	2300      	movs	r3, #0
 8009864:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009866:	2300      	movs	r3, #0
 8009868:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800986a:	1d3a      	adds	r2, r7, #4
 800986c:	f107 0108 	add.w	r1, r7, #8
 8009870:	f107 030c 	add.w	r3, r7, #12
 8009874:	4618      	mov	r0, r3
 8009876:	f7fd fc89 	bl	800718c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800987a:	6879      	ldr	r1, [r7, #4]
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	68fa      	ldr	r2, [r7, #12]
 8009880:	9202      	str	r2, [sp, #8]
 8009882:	9301      	str	r3, [sp, #4]
 8009884:	2302      	movs	r3, #2
 8009886:	9300      	str	r3, [sp, #0]
 8009888:	2300      	movs	r3, #0
 800988a:	460a      	mov	r2, r1
 800988c:	4910      	ldr	r1, [pc, #64]	; (80098d0 <xTimerCreateTimerTask+0x84>)
 800988e:	4811      	ldr	r0, [pc, #68]	; (80098d4 <xTimerCreateTimerTask+0x88>)
 8009890:	f7fe ff00 	bl	8008694 <xTaskCreateStatic>
 8009894:	4603      	mov	r3, r0
 8009896:	4a10      	ldr	r2, [pc, #64]	; (80098d8 <xTimerCreateTimerTask+0x8c>)
 8009898:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800989a:	4b0f      	ldr	r3, [pc, #60]	; (80098d8 <xTimerCreateTimerTask+0x8c>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d001      	beq.n	80098a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80098a2:	2301      	movs	r3, #1
 80098a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d10a      	bne.n	80098c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80098ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b0:	f383 8811 	msr	BASEPRI, r3
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	613b      	str	r3, [r7, #16]
}
 80098be:	bf00      	nop
 80098c0:	e7fe      	b.n	80098c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80098c2:	697b      	ldr	r3, [r7, #20]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3718      	adds	r7, #24
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	200039b8 	.word	0x200039b8
 80098d0:	0800b250 	.word	0x0800b250
 80098d4:	08009a11 	.word	0x08009a11
 80098d8:	200039bc 	.word	0x200039bc

080098dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b08a      	sub	sp, #40	; 0x28
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	607a      	str	r2, [r7, #4]
 80098e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80098ea:	2300      	movs	r3, #0
 80098ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d10a      	bne.n	800990a <xTimerGenericCommand+0x2e>
	__asm volatile
 80098f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f8:	f383 8811 	msr	BASEPRI, r3
 80098fc:	f3bf 8f6f 	isb	sy
 8009900:	f3bf 8f4f 	dsb	sy
 8009904:	623b      	str	r3, [r7, #32]
}
 8009906:	bf00      	nop
 8009908:	e7fe      	b.n	8009908 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800990a:	4b1a      	ldr	r3, [pc, #104]	; (8009974 <xTimerGenericCommand+0x98>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d02a      	beq.n	8009968 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	2b05      	cmp	r3, #5
 8009922:	dc18      	bgt.n	8009956 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009924:	f7ff fd9c 	bl	8009460 <xTaskGetSchedulerState>
 8009928:	4603      	mov	r3, r0
 800992a:	2b02      	cmp	r3, #2
 800992c:	d109      	bne.n	8009942 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800992e:	4b11      	ldr	r3, [pc, #68]	; (8009974 <xTimerGenericCommand+0x98>)
 8009930:	6818      	ldr	r0, [r3, #0]
 8009932:	f107 0110 	add.w	r1, r7, #16
 8009936:	2300      	movs	r3, #0
 8009938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800993a:	f7fe f857 	bl	80079ec <xQueueGenericSend>
 800993e:	6278      	str	r0, [r7, #36]	; 0x24
 8009940:	e012      	b.n	8009968 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009942:	4b0c      	ldr	r3, [pc, #48]	; (8009974 <xTimerGenericCommand+0x98>)
 8009944:	6818      	ldr	r0, [r3, #0]
 8009946:	f107 0110 	add.w	r1, r7, #16
 800994a:	2300      	movs	r3, #0
 800994c:	2200      	movs	r2, #0
 800994e:	f7fe f84d 	bl	80079ec <xQueueGenericSend>
 8009952:	6278      	str	r0, [r7, #36]	; 0x24
 8009954:	e008      	b.n	8009968 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009956:	4b07      	ldr	r3, [pc, #28]	; (8009974 <xTimerGenericCommand+0x98>)
 8009958:	6818      	ldr	r0, [r3, #0]
 800995a:	f107 0110 	add.w	r1, r7, #16
 800995e:	2300      	movs	r3, #0
 8009960:	683a      	ldr	r2, [r7, #0]
 8009962:	f7fe f941 	bl	8007be8 <xQueueGenericSendFromISR>
 8009966:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800996a:	4618      	mov	r0, r3
 800996c:	3728      	adds	r7, #40	; 0x28
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	200039b8 	.word	0x200039b8

08009978 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b088      	sub	sp, #32
 800997c:	af02      	add	r7, sp, #8
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009982:	4b22      	ldr	r3, [pc, #136]	; (8009a0c <prvProcessExpiredTimer+0x94>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	3304      	adds	r3, #4
 8009990:	4618      	mov	r0, r3
 8009992:	f7fd fe8d 	bl	80076b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800999c:	f003 0304 	and.w	r3, r3, #4
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d022      	beq.n	80099ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	699a      	ldr	r2, [r3, #24]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	18d1      	adds	r1, r2, r3
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	683a      	ldr	r2, [r7, #0]
 80099b0:	6978      	ldr	r0, [r7, #20]
 80099b2:	f000 f8d1 	bl	8009b58 <prvInsertTimerInActiveList>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d01f      	beq.n	80099fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80099bc:	2300      	movs	r3, #0
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	2300      	movs	r3, #0
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	2100      	movs	r1, #0
 80099c6:	6978      	ldr	r0, [r7, #20]
 80099c8:	f7ff ff88 	bl	80098dc <xTimerGenericCommand>
 80099cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d113      	bne.n	80099fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80099d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d8:	f383 8811 	msr	BASEPRI, r3
 80099dc:	f3bf 8f6f 	isb	sy
 80099e0:	f3bf 8f4f 	dsb	sy
 80099e4:	60fb      	str	r3, [r7, #12]
}
 80099e6:	bf00      	nop
 80099e8:	e7fe      	b.n	80099e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099f0:	f023 0301 	bic.w	r3, r3, #1
 80099f4:	b2da      	uxtb	r2, r3
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	6a1b      	ldr	r3, [r3, #32]
 8009a00:	6978      	ldr	r0, [r7, #20]
 8009a02:	4798      	blx	r3
}
 8009a04:	bf00      	nop
 8009a06:	3718      	adds	r7, #24
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	200039b0 	.word	0x200039b0

08009a10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a18:	f107 0308 	add.w	r3, r7, #8
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f000 f857 	bl	8009ad0 <prvGetNextExpireTime>
 8009a22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	4619      	mov	r1, r3
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f000 f803 	bl	8009a34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a2e:	f000 f8d5 	bl	8009bdc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a32:	e7f1      	b.n	8009a18 <prvTimerTask+0x8>

08009a34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009a3e:	f7ff f885 	bl	8008b4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a42:	f107 0308 	add.w	r3, r7, #8
 8009a46:	4618      	mov	r0, r3
 8009a48:	f000 f866 	bl	8009b18 <prvSampleTimeNow>
 8009a4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d130      	bne.n	8009ab6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d10a      	bne.n	8009a70 <prvProcessTimerOrBlockTask+0x3c>
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d806      	bhi.n	8009a70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009a62:	f7ff f881 	bl	8008b68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009a66:	68f9      	ldr	r1, [r7, #12]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f7ff ff85 	bl	8009978 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009a6e:	e024      	b.n	8009aba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d008      	beq.n	8009a88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009a76:	4b13      	ldr	r3, [pc, #76]	; (8009ac4 <prvProcessTimerOrBlockTask+0x90>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d101      	bne.n	8009a84 <prvProcessTimerOrBlockTask+0x50>
 8009a80:	2301      	movs	r3, #1
 8009a82:	e000      	b.n	8009a86 <prvProcessTimerOrBlockTask+0x52>
 8009a84:	2300      	movs	r3, #0
 8009a86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009a88:	4b0f      	ldr	r3, [pc, #60]	; (8009ac8 <prvProcessTimerOrBlockTask+0x94>)
 8009a8a:	6818      	ldr	r0, [r3, #0]
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	1ad3      	subs	r3, r2, r3
 8009a92:	683a      	ldr	r2, [r7, #0]
 8009a94:	4619      	mov	r1, r3
 8009a96:	f7fe fdc9 	bl	800862c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009a9a:	f7ff f865 	bl	8008b68 <xTaskResumeAll>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d10a      	bne.n	8009aba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009aa4:	4b09      	ldr	r3, [pc, #36]	; (8009acc <prvProcessTimerOrBlockTask+0x98>)
 8009aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aaa:	601a      	str	r2, [r3, #0]
 8009aac:	f3bf 8f4f 	dsb	sy
 8009ab0:	f3bf 8f6f 	isb	sy
}
 8009ab4:	e001      	b.n	8009aba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009ab6:	f7ff f857 	bl	8008b68 <xTaskResumeAll>
}
 8009aba:	bf00      	nop
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	200039b4 	.word	0x200039b4
 8009ac8:	200039b8 	.word	0x200039b8
 8009acc:	e000ed04 	.word	0xe000ed04

08009ad0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b085      	sub	sp, #20
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ad8:	4b0e      	ldr	r3, [pc, #56]	; (8009b14 <prvGetNextExpireTime+0x44>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d101      	bne.n	8009ae6 <prvGetNextExpireTime+0x16>
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	e000      	b.n	8009ae8 <prvGetNextExpireTime+0x18>
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d105      	bne.n	8009b00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009af4:	4b07      	ldr	r3, [pc, #28]	; (8009b14 <prvGetNextExpireTime+0x44>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	60fb      	str	r3, [r7, #12]
 8009afe:	e001      	b.n	8009b04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009b00:	2300      	movs	r3, #0
 8009b02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009b04:	68fb      	ldr	r3, [r7, #12]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3714      	adds	r7, #20
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop
 8009b14:	200039b0 	.word	0x200039b0

08009b18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009b20:	f7ff f8c0 	bl	8008ca4 <xTaskGetTickCount>
 8009b24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009b26:	4b0b      	ldr	r3, [pc, #44]	; (8009b54 <prvSampleTimeNow+0x3c>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d205      	bcs.n	8009b3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b30:	f000 f936 	bl	8009da0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	601a      	str	r2, [r3, #0]
 8009b3a:	e002      	b.n	8009b42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009b42:	4a04      	ldr	r2, [pc, #16]	; (8009b54 <prvSampleTimeNow+0x3c>)
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009b48:	68fb      	ldr	r3, [r7, #12]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	200039c0 	.word	0x200039c0

08009b58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b086      	sub	sp, #24
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	607a      	str	r2, [r7, #4]
 8009b64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009b66:	2300      	movs	r3, #0
 8009b68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	68fa      	ldr	r2, [r7, #12]
 8009b74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009b76:	68ba      	ldr	r2, [r7, #8]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d812      	bhi.n	8009ba4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	1ad2      	subs	r2, r2, r3
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	699b      	ldr	r3, [r3, #24]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d302      	bcc.n	8009b92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	617b      	str	r3, [r7, #20]
 8009b90:	e01b      	b.n	8009bca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009b92:	4b10      	ldr	r3, [pc, #64]	; (8009bd4 <prvInsertTimerInActiveList+0x7c>)
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	3304      	adds	r3, #4
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	4610      	mov	r0, r2
 8009b9e:	f7fd fd4e 	bl	800763e <vListInsert>
 8009ba2:	e012      	b.n	8009bca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d206      	bcs.n	8009bba <prvInsertTimerInActiveList+0x62>
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d302      	bcc.n	8009bba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	617b      	str	r3, [r7, #20]
 8009bb8:	e007      	b.n	8009bca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009bba:	4b07      	ldr	r3, [pc, #28]	; (8009bd8 <prvInsertTimerInActiveList+0x80>)
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	3304      	adds	r3, #4
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	f7fd fd3a 	bl	800763e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009bca:	697b      	ldr	r3, [r7, #20]
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3718      	adds	r7, #24
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	200039b4 	.word	0x200039b4
 8009bd8:	200039b0 	.word	0x200039b0

08009bdc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b08e      	sub	sp, #56	; 0x38
 8009be0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009be2:	e0ca      	b.n	8009d7a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	da18      	bge.n	8009c1c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009bea:	1d3b      	adds	r3, r7, #4
 8009bec:	3304      	adds	r3, #4
 8009bee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d10a      	bne.n	8009c0c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfa:	f383 8811 	msr	BASEPRI, r3
 8009bfe:	f3bf 8f6f 	isb	sy
 8009c02:	f3bf 8f4f 	dsb	sy
 8009c06:	61fb      	str	r3, [r7, #28]
}
 8009c08:	bf00      	nop
 8009c0a:	e7fe      	b.n	8009c0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c12:	6850      	ldr	r0, [r2, #4]
 8009c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c16:	6892      	ldr	r2, [r2, #8]
 8009c18:	4611      	mov	r1, r2
 8009c1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f2c0 80aa 	blt.w	8009d78 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2a:	695b      	ldr	r3, [r3, #20]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d004      	beq.n	8009c3a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c32:	3304      	adds	r3, #4
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7fd fd3b 	bl	80076b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c3a:	463b      	mov	r3, r7
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7ff ff6b 	bl	8009b18 <prvSampleTimeNow>
 8009c42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2b09      	cmp	r3, #9
 8009c48:	f200 8097 	bhi.w	8009d7a <prvProcessReceivedCommands+0x19e>
 8009c4c:	a201      	add	r2, pc, #4	; (adr r2, 8009c54 <prvProcessReceivedCommands+0x78>)
 8009c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c52:	bf00      	nop
 8009c54:	08009c7d 	.word	0x08009c7d
 8009c58:	08009c7d 	.word	0x08009c7d
 8009c5c:	08009c7d 	.word	0x08009c7d
 8009c60:	08009cf1 	.word	0x08009cf1
 8009c64:	08009d05 	.word	0x08009d05
 8009c68:	08009d4f 	.word	0x08009d4f
 8009c6c:	08009c7d 	.word	0x08009c7d
 8009c70:	08009c7d 	.word	0x08009c7d
 8009c74:	08009cf1 	.word	0x08009cf1
 8009c78:	08009d05 	.word	0x08009d05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c82:	f043 0301 	orr.w	r3, r3, #1
 8009c86:	b2da      	uxtb	r2, r3
 8009c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c92:	699b      	ldr	r3, [r3, #24]
 8009c94:	18d1      	adds	r1, r2, r3
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c9c:	f7ff ff5c 	bl	8009b58 <prvInsertTimerInActiveList>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d069      	beq.n	8009d7a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca8:	6a1b      	ldr	r3, [r3, #32]
 8009caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cb4:	f003 0304 	and.w	r3, r3, #4
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d05e      	beq.n	8009d7a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009cbc:	68ba      	ldr	r2, [r7, #8]
 8009cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc0:	699b      	ldr	r3, [r3, #24]
 8009cc2:	441a      	add	r2, r3
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	9300      	str	r3, [sp, #0]
 8009cc8:	2300      	movs	r3, #0
 8009cca:	2100      	movs	r1, #0
 8009ccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cce:	f7ff fe05 	bl	80098dc <xTimerGenericCommand>
 8009cd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009cd4:	6a3b      	ldr	r3, [r7, #32]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d14f      	bne.n	8009d7a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cde:	f383 8811 	msr	BASEPRI, r3
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	61bb      	str	r3, [r7, #24]
}
 8009cec:	bf00      	nop
 8009cee:	e7fe      	b.n	8009cee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cf6:	f023 0301 	bic.w	r3, r3, #1
 8009cfa:	b2da      	uxtb	r2, r3
 8009cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009d02:	e03a      	b.n	8009d7a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d0a:	f043 0301 	orr.w	r3, r3, #1
 8009d0e:	b2da      	uxtb	r2, r3
 8009d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009d16:	68ba      	ldr	r2, [r7, #8]
 8009d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1e:	699b      	ldr	r3, [r3, #24]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10a      	bne.n	8009d3a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d28:	f383 8811 	msr	BASEPRI, r3
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	617b      	str	r3, [r7, #20]
}
 8009d36:	bf00      	nop
 8009d38:	e7fe      	b.n	8009d38 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3c:	699a      	ldr	r2, [r3, #24]
 8009d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d40:	18d1      	adds	r1, r2, r3
 8009d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d48:	f7ff ff06 	bl	8009b58 <prvInsertTimerInActiveList>
					break;
 8009d4c:	e015      	b.n	8009d7a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d54:	f003 0302 	and.w	r3, r3, #2
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d103      	bne.n	8009d64 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d5e:	f000 fbff 	bl	800a560 <vPortFree>
 8009d62:	e00a      	b.n	8009d7a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d6a:	f023 0301 	bic.w	r3, r3, #1
 8009d6e:	b2da      	uxtb	r2, r3
 8009d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009d76:	e000      	b.n	8009d7a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009d78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d7a:	4b08      	ldr	r3, [pc, #32]	; (8009d9c <prvProcessReceivedCommands+0x1c0>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	1d39      	adds	r1, r7, #4
 8009d80:	2200      	movs	r2, #0
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7fe f858 	bl	8007e38 <xQueueReceive>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f47f af2a 	bne.w	8009be4 <prvProcessReceivedCommands+0x8>
	}
}
 8009d90:	bf00      	nop
 8009d92:	bf00      	nop
 8009d94:	3730      	adds	r7, #48	; 0x30
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	200039b8 	.word	0x200039b8

08009da0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b088      	sub	sp, #32
 8009da4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009da6:	e048      	b.n	8009e3a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009da8:	4b2d      	ldr	r3, [pc, #180]	; (8009e60 <prvSwitchTimerLists+0xc0>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009db2:	4b2b      	ldr	r3, [pc, #172]	; (8009e60 <prvSwitchTimerLists+0xc0>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	3304      	adds	r3, #4
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7fd fc75 	bl	80076b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6a1b      	ldr	r3, [r3, #32]
 8009dca:	68f8      	ldr	r0, [r7, #12]
 8009dcc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dd4:	f003 0304 	and.w	r3, r3, #4
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d02e      	beq.n	8009e3a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	699b      	ldr	r3, [r3, #24]
 8009de0:	693a      	ldr	r2, [r7, #16]
 8009de2:	4413      	add	r3, r2
 8009de4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009de6:	68ba      	ldr	r2, [r7, #8]
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d90e      	bls.n	8009e0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	68fa      	ldr	r2, [r7, #12]
 8009df8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009dfa:	4b19      	ldr	r3, [pc, #100]	; (8009e60 <prvSwitchTimerLists+0xc0>)
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	3304      	adds	r3, #4
 8009e02:	4619      	mov	r1, r3
 8009e04:	4610      	mov	r0, r2
 8009e06:	f7fd fc1a 	bl	800763e <vListInsert>
 8009e0a:	e016      	b.n	8009e3a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	9300      	str	r3, [sp, #0]
 8009e10:	2300      	movs	r3, #0
 8009e12:	693a      	ldr	r2, [r7, #16]
 8009e14:	2100      	movs	r1, #0
 8009e16:	68f8      	ldr	r0, [r7, #12]
 8009e18:	f7ff fd60 	bl	80098dc <xTimerGenericCommand>
 8009e1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d10a      	bne.n	8009e3a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e28:	f383 8811 	msr	BASEPRI, r3
 8009e2c:	f3bf 8f6f 	isb	sy
 8009e30:	f3bf 8f4f 	dsb	sy
 8009e34:	603b      	str	r3, [r7, #0]
}
 8009e36:	bf00      	nop
 8009e38:	e7fe      	b.n	8009e38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e3a:	4b09      	ldr	r3, [pc, #36]	; (8009e60 <prvSwitchTimerLists+0xc0>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1b1      	bne.n	8009da8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009e44:	4b06      	ldr	r3, [pc, #24]	; (8009e60 <prvSwitchTimerLists+0xc0>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009e4a:	4b06      	ldr	r3, [pc, #24]	; (8009e64 <prvSwitchTimerLists+0xc4>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a04      	ldr	r2, [pc, #16]	; (8009e60 <prvSwitchTimerLists+0xc0>)
 8009e50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009e52:	4a04      	ldr	r2, [pc, #16]	; (8009e64 <prvSwitchTimerLists+0xc4>)
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	6013      	str	r3, [r2, #0]
}
 8009e58:	bf00      	nop
 8009e5a:	3718      	adds	r7, #24
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	200039b0 	.word	0x200039b0
 8009e64:	200039b4 	.word	0x200039b4

08009e68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009e6e:	f000 f989 	bl	800a184 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009e72:	4b15      	ldr	r3, [pc, #84]	; (8009ec8 <prvCheckForValidListAndQueue+0x60>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d120      	bne.n	8009ebc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009e7a:	4814      	ldr	r0, [pc, #80]	; (8009ecc <prvCheckForValidListAndQueue+0x64>)
 8009e7c:	f7fd fb8e 	bl	800759c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009e80:	4813      	ldr	r0, [pc, #76]	; (8009ed0 <prvCheckForValidListAndQueue+0x68>)
 8009e82:	f7fd fb8b 	bl	800759c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009e86:	4b13      	ldr	r3, [pc, #76]	; (8009ed4 <prvCheckForValidListAndQueue+0x6c>)
 8009e88:	4a10      	ldr	r2, [pc, #64]	; (8009ecc <prvCheckForValidListAndQueue+0x64>)
 8009e8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009e8c:	4b12      	ldr	r3, [pc, #72]	; (8009ed8 <prvCheckForValidListAndQueue+0x70>)
 8009e8e:	4a10      	ldr	r2, [pc, #64]	; (8009ed0 <prvCheckForValidListAndQueue+0x68>)
 8009e90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009e92:	2300      	movs	r3, #0
 8009e94:	9300      	str	r3, [sp, #0]
 8009e96:	4b11      	ldr	r3, [pc, #68]	; (8009edc <prvCheckForValidListAndQueue+0x74>)
 8009e98:	4a11      	ldr	r2, [pc, #68]	; (8009ee0 <prvCheckForValidListAndQueue+0x78>)
 8009e9a:	2110      	movs	r1, #16
 8009e9c:	200a      	movs	r0, #10
 8009e9e:	f7fd fc99 	bl	80077d4 <xQueueGenericCreateStatic>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	4a08      	ldr	r2, [pc, #32]	; (8009ec8 <prvCheckForValidListAndQueue+0x60>)
 8009ea6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ea8:	4b07      	ldr	r3, [pc, #28]	; (8009ec8 <prvCheckForValidListAndQueue+0x60>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d005      	beq.n	8009ebc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009eb0:	4b05      	ldr	r3, [pc, #20]	; (8009ec8 <prvCheckForValidListAndQueue+0x60>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	490b      	ldr	r1, [pc, #44]	; (8009ee4 <prvCheckForValidListAndQueue+0x7c>)
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7fe fb8e 	bl	80085d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ebc:	f000 f992 	bl	800a1e4 <vPortExitCritical>
}
 8009ec0:	bf00      	nop
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	200039b8 	.word	0x200039b8
 8009ecc:	20003988 	.word	0x20003988
 8009ed0:	2000399c 	.word	0x2000399c
 8009ed4:	200039b0 	.word	0x200039b0
 8009ed8:	200039b4 	.word	0x200039b4
 8009edc:	20003a64 	.word	0x20003a64
 8009ee0:	200039c4 	.word	0x200039c4
 8009ee4:	0800b258 	.word	0x0800b258

08009ee8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b08a      	sub	sp, #40	; 0x28
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	607a      	str	r2, [r7, #4]
 8009ef4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8009ef6:	f06f 0301 	mvn.w	r3, #1
 8009efa:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009f08:	4b06      	ldr	r3, [pc, #24]	; (8009f24 <xTimerPendFunctionCallFromISR+0x3c>)
 8009f0a:	6818      	ldr	r0, [r3, #0]
 8009f0c:	f107 0114 	add.w	r1, r7, #20
 8009f10:	2300      	movs	r3, #0
 8009f12:	683a      	ldr	r2, [r7, #0]
 8009f14:	f7fd fe68 	bl	8007be8 <xQueueGenericSendFromISR>
 8009f18:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8009f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3728      	adds	r7, #40	; 0x28
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	200039b8 	.word	0x200039b8

08009f28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	3b04      	subs	r3, #4
 8009f38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009f40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	3b04      	subs	r3, #4
 8009f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	f023 0201 	bic.w	r2, r3, #1
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	3b04      	subs	r3, #4
 8009f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f58:	4a0c      	ldr	r2, [pc, #48]	; (8009f8c <pxPortInitialiseStack+0x64>)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	3b14      	subs	r3, #20
 8009f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	3b04      	subs	r3, #4
 8009f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f06f 0202 	mvn.w	r2, #2
 8009f76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	3b20      	subs	r3, #32
 8009f7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3714      	adds	r7, #20
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr
 8009f8c:	08009f91 	.word	0x08009f91

08009f90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009f96:	2300      	movs	r3, #0
 8009f98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f9a:	4b12      	ldr	r3, [pc, #72]	; (8009fe4 <prvTaskExitError+0x54>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa2:	d00a      	beq.n	8009fba <prvTaskExitError+0x2a>
	__asm volatile
 8009fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa8:	f383 8811 	msr	BASEPRI, r3
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	60fb      	str	r3, [r7, #12]
}
 8009fb6:	bf00      	nop
 8009fb8:	e7fe      	b.n	8009fb8 <prvTaskExitError+0x28>
	__asm volatile
 8009fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbe:	f383 8811 	msr	BASEPRI, r3
 8009fc2:	f3bf 8f6f 	isb	sy
 8009fc6:	f3bf 8f4f 	dsb	sy
 8009fca:	60bb      	str	r3, [r7, #8]
}
 8009fcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009fce:	bf00      	nop
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d0fc      	beq.n	8009fd0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009fd6:	bf00      	nop
 8009fd8:	bf00      	nop
 8009fda:	3714      	adds	r7, #20
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr
 8009fe4:	20000010 	.word	0x20000010
	...

08009ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ff0:	4b07      	ldr	r3, [pc, #28]	; (800a010 <pxCurrentTCBConst2>)
 8009ff2:	6819      	ldr	r1, [r3, #0]
 8009ff4:	6808      	ldr	r0, [r1, #0]
 8009ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ffa:	f380 8809 	msr	PSP, r0
 8009ffe:	f3bf 8f6f 	isb	sy
 800a002:	f04f 0000 	mov.w	r0, #0
 800a006:	f380 8811 	msr	BASEPRI, r0
 800a00a:	4770      	bx	lr
 800a00c:	f3af 8000 	nop.w

0800a010 <pxCurrentTCBConst2>:
 800a010:	20003488 	.word	0x20003488
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a014:	bf00      	nop
 800a016:	bf00      	nop

0800a018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a018:	4808      	ldr	r0, [pc, #32]	; (800a03c <prvPortStartFirstTask+0x24>)
 800a01a:	6800      	ldr	r0, [r0, #0]
 800a01c:	6800      	ldr	r0, [r0, #0]
 800a01e:	f380 8808 	msr	MSP, r0
 800a022:	f04f 0000 	mov.w	r0, #0
 800a026:	f380 8814 	msr	CONTROL, r0
 800a02a:	b662      	cpsie	i
 800a02c:	b661      	cpsie	f
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	f3bf 8f6f 	isb	sy
 800a036:	df00      	svc	0
 800a038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a03a:	bf00      	nop
 800a03c:	e000ed08 	.word	0xe000ed08

0800a040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b086      	sub	sp, #24
 800a044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a046:	4b46      	ldr	r3, [pc, #280]	; (800a160 <xPortStartScheduler+0x120>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a46      	ldr	r2, [pc, #280]	; (800a164 <xPortStartScheduler+0x124>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d10a      	bne.n	800a066 <xPortStartScheduler+0x26>
	__asm volatile
 800a050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a054:	f383 8811 	msr	BASEPRI, r3
 800a058:	f3bf 8f6f 	isb	sy
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	613b      	str	r3, [r7, #16]
}
 800a062:	bf00      	nop
 800a064:	e7fe      	b.n	800a064 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a066:	4b3e      	ldr	r3, [pc, #248]	; (800a160 <xPortStartScheduler+0x120>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a3f      	ldr	r2, [pc, #252]	; (800a168 <xPortStartScheduler+0x128>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d10a      	bne.n	800a086 <xPortStartScheduler+0x46>
	__asm volatile
 800a070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	60fb      	str	r3, [r7, #12]
}
 800a082:	bf00      	nop
 800a084:	e7fe      	b.n	800a084 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a086:	4b39      	ldr	r3, [pc, #228]	; (800a16c <xPortStartScheduler+0x12c>)
 800a088:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	22ff      	movs	r2, #255	; 0xff
 800a096:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a0a0:	78fb      	ldrb	r3, [r7, #3]
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a0a8:	b2da      	uxtb	r2, r3
 800a0aa:	4b31      	ldr	r3, [pc, #196]	; (800a170 <xPortStartScheduler+0x130>)
 800a0ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a0ae:	4b31      	ldr	r3, [pc, #196]	; (800a174 <xPortStartScheduler+0x134>)
 800a0b0:	2207      	movs	r2, #7
 800a0b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0b4:	e009      	b.n	800a0ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a0b6:	4b2f      	ldr	r3, [pc, #188]	; (800a174 <xPortStartScheduler+0x134>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	3b01      	subs	r3, #1
 800a0bc:	4a2d      	ldr	r2, [pc, #180]	; (800a174 <xPortStartScheduler+0x134>)
 800a0be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a0c0:	78fb      	ldrb	r3, [r7, #3]
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	005b      	lsls	r3, r3, #1
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0ca:	78fb      	ldrb	r3, [r7, #3]
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0d2:	2b80      	cmp	r3, #128	; 0x80
 800a0d4:	d0ef      	beq.n	800a0b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a0d6:	4b27      	ldr	r3, [pc, #156]	; (800a174 <xPortStartScheduler+0x134>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f1c3 0307 	rsb	r3, r3, #7
 800a0de:	2b04      	cmp	r3, #4
 800a0e0:	d00a      	beq.n	800a0f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e6:	f383 8811 	msr	BASEPRI, r3
 800a0ea:	f3bf 8f6f 	isb	sy
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	60bb      	str	r3, [r7, #8]
}
 800a0f4:	bf00      	nop
 800a0f6:	e7fe      	b.n	800a0f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a0f8:	4b1e      	ldr	r3, [pc, #120]	; (800a174 <xPortStartScheduler+0x134>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	021b      	lsls	r3, r3, #8
 800a0fe:	4a1d      	ldr	r2, [pc, #116]	; (800a174 <xPortStartScheduler+0x134>)
 800a100:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a102:	4b1c      	ldr	r3, [pc, #112]	; (800a174 <xPortStartScheduler+0x134>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a10a:	4a1a      	ldr	r2, [pc, #104]	; (800a174 <xPortStartScheduler+0x134>)
 800a10c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	b2da      	uxtb	r2, r3
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a116:	4b18      	ldr	r3, [pc, #96]	; (800a178 <xPortStartScheduler+0x138>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4a17      	ldr	r2, [pc, #92]	; (800a178 <xPortStartScheduler+0x138>)
 800a11c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a120:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a122:	4b15      	ldr	r3, [pc, #84]	; (800a178 <xPortStartScheduler+0x138>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a14      	ldr	r2, [pc, #80]	; (800a178 <xPortStartScheduler+0x138>)
 800a128:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a12c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a12e:	f000 f8dd 	bl	800a2ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a132:	4b12      	ldr	r3, [pc, #72]	; (800a17c <xPortStartScheduler+0x13c>)
 800a134:	2200      	movs	r2, #0
 800a136:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a138:	f000 f8fc 	bl	800a334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a13c:	4b10      	ldr	r3, [pc, #64]	; (800a180 <xPortStartScheduler+0x140>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a0f      	ldr	r2, [pc, #60]	; (800a180 <xPortStartScheduler+0x140>)
 800a142:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a146:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a148:	f7ff ff66 	bl	800a018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a14c:	f7fe fe74 	bl	8008e38 <vTaskSwitchContext>
	prvTaskExitError();
 800a150:	f7ff ff1e 	bl	8009f90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a154:	2300      	movs	r3, #0
}
 800a156:	4618      	mov	r0, r3
 800a158:	3718      	adds	r7, #24
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	e000ed00 	.word	0xe000ed00
 800a164:	410fc271 	.word	0x410fc271
 800a168:	410fc270 	.word	0x410fc270
 800a16c:	e000e400 	.word	0xe000e400
 800a170:	20003ab4 	.word	0x20003ab4
 800a174:	20003ab8 	.word	0x20003ab8
 800a178:	e000ed20 	.word	0xe000ed20
 800a17c:	20000010 	.word	0x20000010
 800a180:	e000ef34 	.word	0xe000ef34

0800a184 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a184:	b480      	push	{r7}
 800a186:	b083      	sub	sp, #12
 800a188:	af00      	add	r7, sp, #0
	__asm volatile
 800a18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	607b      	str	r3, [r7, #4]
}
 800a19c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a19e:	4b0f      	ldr	r3, [pc, #60]	; (800a1dc <vPortEnterCritical+0x58>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	4a0d      	ldr	r2, [pc, #52]	; (800a1dc <vPortEnterCritical+0x58>)
 800a1a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a1a8:	4b0c      	ldr	r3, [pc, #48]	; (800a1dc <vPortEnterCritical+0x58>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d10f      	bne.n	800a1d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a1b0:	4b0b      	ldr	r3, [pc, #44]	; (800a1e0 <vPortEnterCritical+0x5c>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d00a      	beq.n	800a1d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1be:	f383 8811 	msr	BASEPRI, r3
 800a1c2:	f3bf 8f6f 	isb	sy
 800a1c6:	f3bf 8f4f 	dsb	sy
 800a1ca:	603b      	str	r3, [r7, #0]
}
 800a1cc:	bf00      	nop
 800a1ce:	e7fe      	b.n	800a1ce <vPortEnterCritical+0x4a>
	}
}
 800a1d0:	bf00      	nop
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr
 800a1dc:	20000010 	.word	0x20000010
 800a1e0:	e000ed04 	.word	0xe000ed04

0800a1e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a1ea:	4b12      	ldr	r3, [pc, #72]	; (800a234 <vPortExitCritical+0x50>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d10a      	bne.n	800a208 <vPortExitCritical+0x24>
	__asm volatile
 800a1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f6:	f383 8811 	msr	BASEPRI, r3
 800a1fa:	f3bf 8f6f 	isb	sy
 800a1fe:	f3bf 8f4f 	dsb	sy
 800a202:	607b      	str	r3, [r7, #4]
}
 800a204:	bf00      	nop
 800a206:	e7fe      	b.n	800a206 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a208:	4b0a      	ldr	r3, [pc, #40]	; (800a234 <vPortExitCritical+0x50>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	3b01      	subs	r3, #1
 800a20e:	4a09      	ldr	r2, [pc, #36]	; (800a234 <vPortExitCritical+0x50>)
 800a210:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a212:	4b08      	ldr	r3, [pc, #32]	; (800a234 <vPortExitCritical+0x50>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d105      	bne.n	800a226 <vPortExitCritical+0x42>
 800a21a:	2300      	movs	r3, #0
 800a21c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	f383 8811 	msr	BASEPRI, r3
}
 800a224:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a226:	bf00      	nop
 800a228:	370c      	adds	r7, #12
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	20000010 	.word	0x20000010
	...

0800a240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a240:	f3ef 8009 	mrs	r0, PSP
 800a244:	f3bf 8f6f 	isb	sy
 800a248:	4b15      	ldr	r3, [pc, #84]	; (800a2a0 <pxCurrentTCBConst>)
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	f01e 0f10 	tst.w	lr, #16
 800a250:	bf08      	it	eq
 800a252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a25a:	6010      	str	r0, [r2, #0]
 800a25c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a260:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a264:	f380 8811 	msr	BASEPRI, r0
 800a268:	f3bf 8f4f 	dsb	sy
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	f7fe fde2 	bl	8008e38 <vTaskSwitchContext>
 800a274:	f04f 0000 	mov.w	r0, #0
 800a278:	f380 8811 	msr	BASEPRI, r0
 800a27c:	bc09      	pop	{r0, r3}
 800a27e:	6819      	ldr	r1, [r3, #0]
 800a280:	6808      	ldr	r0, [r1, #0]
 800a282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a286:	f01e 0f10 	tst.w	lr, #16
 800a28a:	bf08      	it	eq
 800a28c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a290:	f380 8809 	msr	PSP, r0
 800a294:	f3bf 8f6f 	isb	sy
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	f3af 8000 	nop.w

0800a2a0 <pxCurrentTCBConst>:
 800a2a0:	20003488 	.word	0x20003488
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a2a4:	bf00      	nop
 800a2a6:	bf00      	nop

0800a2a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b2:	f383 8811 	msr	BASEPRI, r3
 800a2b6:	f3bf 8f6f 	isb	sy
 800a2ba:	f3bf 8f4f 	dsb	sy
 800a2be:	607b      	str	r3, [r7, #4]
}
 800a2c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a2c2:	f7fe fcff 	bl	8008cc4 <xTaskIncrementTick>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d003      	beq.n	800a2d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a2cc:	4b06      	ldr	r3, [pc, #24]	; (800a2e8 <xPortSysTickHandler+0x40>)
 800a2ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2d2:	601a      	str	r2, [r3, #0]
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	f383 8811 	msr	BASEPRI, r3
}
 800a2de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a2e0:	bf00      	nop
 800a2e2:	3708      	adds	r7, #8
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	e000ed04 	.word	0xe000ed04

0800a2ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a2f0:	4b0b      	ldr	r3, [pc, #44]	; (800a320 <vPortSetupTimerInterrupt+0x34>)
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a2f6:	4b0b      	ldr	r3, [pc, #44]	; (800a324 <vPortSetupTimerInterrupt+0x38>)
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a2fc:	4b0a      	ldr	r3, [pc, #40]	; (800a328 <vPortSetupTimerInterrupt+0x3c>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a0a      	ldr	r2, [pc, #40]	; (800a32c <vPortSetupTimerInterrupt+0x40>)
 800a302:	fba2 2303 	umull	r2, r3, r2, r3
 800a306:	099b      	lsrs	r3, r3, #6
 800a308:	4a09      	ldr	r2, [pc, #36]	; (800a330 <vPortSetupTimerInterrupt+0x44>)
 800a30a:	3b01      	subs	r3, #1
 800a30c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a30e:	4b04      	ldr	r3, [pc, #16]	; (800a320 <vPortSetupTimerInterrupt+0x34>)
 800a310:	2207      	movs	r2, #7
 800a312:	601a      	str	r2, [r3, #0]
}
 800a314:	bf00      	nop
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop
 800a320:	e000e010 	.word	0xe000e010
 800a324:	e000e018 	.word	0xe000e018
 800a328:	20000000 	.word	0x20000000
 800a32c:	10624dd3 	.word	0x10624dd3
 800a330:	e000e014 	.word	0xe000e014

0800a334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a334:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a344 <vPortEnableVFP+0x10>
 800a338:	6801      	ldr	r1, [r0, #0]
 800a33a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a33e:	6001      	str	r1, [r0, #0]
 800a340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a342:	bf00      	nop
 800a344:	e000ed88 	.word	0xe000ed88

0800a348 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a34e:	f3ef 8305 	mrs	r3, IPSR
 800a352:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2b0f      	cmp	r3, #15
 800a358:	d914      	bls.n	800a384 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a35a:	4a17      	ldr	r2, [pc, #92]	; (800a3b8 <vPortValidateInterruptPriority+0x70>)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	4413      	add	r3, r2
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a364:	4b15      	ldr	r3, [pc, #84]	; (800a3bc <vPortValidateInterruptPriority+0x74>)
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	7afa      	ldrb	r2, [r7, #11]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d20a      	bcs.n	800a384 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	607b      	str	r3, [r7, #4]
}
 800a380:	bf00      	nop
 800a382:	e7fe      	b.n	800a382 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a384:	4b0e      	ldr	r3, [pc, #56]	; (800a3c0 <vPortValidateInterruptPriority+0x78>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a38c:	4b0d      	ldr	r3, [pc, #52]	; (800a3c4 <vPortValidateInterruptPriority+0x7c>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	429a      	cmp	r2, r3
 800a392:	d90a      	bls.n	800a3aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a398:	f383 8811 	msr	BASEPRI, r3
 800a39c:	f3bf 8f6f 	isb	sy
 800a3a0:	f3bf 8f4f 	dsb	sy
 800a3a4:	603b      	str	r3, [r7, #0]
}
 800a3a6:	bf00      	nop
 800a3a8:	e7fe      	b.n	800a3a8 <vPortValidateInterruptPriority+0x60>
	}
 800a3aa:	bf00      	nop
 800a3ac:	3714      	adds	r7, #20
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop
 800a3b8:	e000e3f0 	.word	0xe000e3f0
 800a3bc:	20003ab4 	.word	0x20003ab4
 800a3c0:	e000ed0c 	.word	0xe000ed0c
 800a3c4:	20003ab8 	.word	0x20003ab8

0800a3c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b08a      	sub	sp, #40	; 0x28
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a3d4:	f7fe fbba 	bl	8008b4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a3d8:	4b5b      	ldr	r3, [pc, #364]	; (800a548 <pvPortMalloc+0x180>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d101      	bne.n	800a3e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a3e0:	f000 f920 	bl	800a624 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a3e4:	4b59      	ldr	r3, [pc, #356]	; (800a54c <pvPortMalloc+0x184>)
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	4013      	ands	r3, r2
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f040 8093 	bne.w	800a518 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d01d      	beq.n	800a434 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a3f8:	2208      	movs	r2, #8
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f003 0307 	and.w	r3, r3, #7
 800a406:	2b00      	cmp	r3, #0
 800a408:	d014      	beq.n	800a434 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f023 0307 	bic.w	r3, r3, #7
 800a410:	3308      	adds	r3, #8
 800a412:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f003 0307 	and.w	r3, r3, #7
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00a      	beq.n	800a434 <pvPortMalloc+0x6c>
	__asm volatile
 800a41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	617b      	str	r3, [r7, #20]
}
 800a430:	bf00      	nop
 800a432:	e7fe      	b.n	800a432 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d06e      	beq.n	800a518 <pvPortMalloc+0x150>
 800a43a:	4b45      	ldr	r3, [pc, #276]	; (800a550 <pvPortMalloc+0x188>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	429a      	cmp	r2, r3
 800a442:	d869      	bhi.n	800a518 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a444:	4b43      	ldr	r3, [pc, #268]	; (800a554 <pvPortMalloc+0x18c>)
 800a446:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a448:	4b42      	ldr	r3, [pc, #264]	; (800a554 <pvPortMalloc+0x18c>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a44e:	e004      	b.n	800a45a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a452:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	429a      	cmp	r2, r3
 800a462:	d903      	bls.n	800a46c <pvPortMalloc+0xa4>
 800a464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d1f1      	bne.n	800a450 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a46c:	4b36      	ldr	r3, [pc, #216]	; (800a548 <pvPortMalloc+0x180>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a472:	429a      	cmp	r2, r3
 800a474:	d050      	beq.n	800a518 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a476:	6a3b      	ldr	r3, [r7, #32]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2208      	movs	r2, #8
 800a47c:	4413      	add	r3, r2
 800a47e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	6a3b      	ldr	r3, [r7, #32]
 800a486:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	1ad2      	subs	r2, r2, r3
 800a490:	2308      	movs	r3, #8
 800a492:	005b      	lsls	r3, r3, #1
 800a494:	429a      	cmp	r2, r3
 800a496:	d91f      	bls.n	800a4d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4413      	add	r3, r2
 800a49e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	f003 0307 	and.w	r3, r3, #7
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d00a      	beq.n	800a4c0 <pvPortMalloc+0xf8>
	__asm volatile
 800a4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ae:	f383 8811 	msr	BASEPRI, r3
 800a4b2:	f3bf 8f6f 	isb	sy
 800a4b6:	f3bf 8f4f 	dsb	sy
 800a4ba:	613b      	str	r3, [r7, #16]
}
 800a4bc:	bf00      	nop
 800a4be:	e7fe      	b.n	800a4be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c2:	685a      	ldr	r2, [r3, #4]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	1ad2      	subs	r2, r2, r3
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a4d2:	69b8      	ldr	r0, [r7, #24]
 800a4d4:	f000 f908 	bl	800a6e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a4d8:	4b1d      	ldr	r3, [pc, #116]	; (800a550 <pvPortMalloc+0x188>)
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	1ad3      	subs	r3, r2, r3
 800a4e2:	4a1b      	ldr	r2, [pc, #108]	; (800a550 <pvPortMalloc+0x188>)
 800a4e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a4e6:	4b1a      	ldr	r3, [pc, #104]	; (800a550 <pvPortMalloc+0x188>)
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	4b1b      	ldr	r3, [pc, #108]	; (800a558 <pvPortMalloc+0x190>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d203      	bcs.n	800a4fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a4f2:	4b17      	ldr	r3, [pc, #92]	; (800a550 <pvPortMalloc+0x188>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4a18      	ldr	r2, [pc, #96]	; (800a558 <pvPortMalloc+0x190>)
 800a4f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fc:	685a      	ldr	r2, [r3, #4]
 800a4fe:	4b13      	ldr	r3, [pc, #76]	; (800a54c <pvPortMalloc+0x184>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	431a      	orrs	r2, r3
 800a504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a506:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50a:	2200      	movs	r2, #0
 800a50c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a50e:	4b13      	ldr	r3, [pc, #76]	; (800a55c <pvPortMalloc+0x194>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	3301      	adds	r3, #1
 800a514:	4a11      	ldr	r2, [pc, #68]	; (800a55c <pvPortMalloc+0x194>)
 800a516:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a518:	f7fe fb26 	bl	8008b68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	f003 0307 	and.w	r3, r3, #7
 800a522:	2b00      	cmp	r3, #0
 800a524:	d00a      	beq.n	800a53c <pvPortMalloc+0x174>
	__asm volatile
 800a526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a52a:	f383 8811 	msr	BASEPRI, r3
 800a52e:	f3bf 8f6f 	isb	sy
 800a532:	f3bf 8f4f 	dsb	sy
 800a536:	60fb      	str	r3, [r7, #12]
}
 800a538:	bf00      	nop
 800a53a:	e7fe      	b.n	800a53a <pvPortMalloc+0x172>
	return pvReturn;
 800a53c:	69fb      	ldr	r3, [r7, #28]
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3728      	adds	r7, #40	; 0x28
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	2000aff4 	.word	0x2000aff4
 800a54c:	2000b008 	.word	0x2000b008
 800a550:	2000aff8 	.word	0x2000aff8
 800a554:	2000afec 	.word	0x2000afec
 800a558:	2000affc 	.word	0x2000affc
 800a55c:	2000b000 	.word	0x2000b000

0800a560 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b086      	sub	sp, #24
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d04d      	beq.n	800a60e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a572:	2308      	movs	r3, #8
 800a574:	425b      	negs	r3, r3
 800a576:	697a      	ldr	r2, [r7, #20]
 800a578:	4413      	add	r3, r2
 800a57a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	685a      	ldr	r2, [r3, #4]
 800a584:	4b24      	ldr	r3, [pc, #144]	; (800a618 <vPortFree+0xb8>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4013      	ands	r3, r2
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d10a      	bne.n	800a5a4 <vPortFree+0x44>
	__asm volatile
 800a58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a592:	f383 8811 	msr	BASEPRI, r3
 800a596:	f3bf 8f6f 	isb	sy
 800a59a:	f3bf 8f4f 	dsb	sy
 800a59e:	60fb      	str	r3, [r7, #12]
}
 800a5a0:	bf00      	nop
 800a5a2:	e7fe      	b.n	800a5a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00a      	beq.n	800a5c2 <vPortFree+0x62>
	__asm volatile
 800a5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b0:	f383 8811 	msr	BASEPRI, r3
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	f3bf 8f4f 	dsb	sy
 800a5bc:	60bb      	str	r3, [r7, #8]
}
 800a5be:	bf00      	nop
 800a5c0:	e7fe      	b.n	800a5c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	685a      	ldr	r2, [r3, #4]
 800a5c6:	4b14      	ldr	r3, [pc, #80]	; (800a618 <vPortFree+0xb8>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4013      	ands	r3, r2
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d01e      	beq.n	800a60e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d11a      	bne.n	800a60e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	685a      	ldr	r2, [r3, #4]
 800a5dc:	4b0e      	ldr	r3, [pc, #56]	; (800a618 <vPortFree+0xb8>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	43db      	mvns	r3, r3
 800a5e2:	401a      	ands	r2, r3
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a5e8:	f7fe fab0 	bl	8008b4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	685a      	ldr	r2, [r3, #4]
 800a5f0:	4b0a      	ldr	r3, [pc, #40]	; (800a61c <vPortFree+0xbc>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	4a09      	ldr	r2, [pc, #36]	; (800a61c <vPortFree+0xbc>)
 800a5f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a5fa:	6938      	ldr	r0, [r7, #16]
 800a5fc:	f000 f874 	bl	800a6e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a600:	4b07      	ldr	r3, [pc, #28]	; (800a620 <vPortFree+0xc0>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	3301      	adds	r3, #1
 800a606:	4a06      	ldr	r2, [pc, #24]	; (800a620 <vPortFree+0xc0>)
 800a608:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a60a:	f7fe faad 	bl	8008b68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a60e:	bf00      	nop
 800a610:	3718      	adds	r7, #24
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	2000b008 	.word	0x2000b008
 800a61c:	2000aff8 	.word	0x2000aff8
 800a620:	2000b004 	.word	0x2000b004

0800a624 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a624:	b480      	push	{r7}
 800a626:	b085      	sub	sp, #20
 800a628:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a62a:	f247 5330 	movw	r3, #30000	; 0x7530
 800a62e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a630:	4b27      	ldr	r3, [pc, #156]	; (800a6d0 <prvHeapInit+0xac>)
 800a632:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f003 0307 	and.w	r3, r3, #7
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d00c      	beq.n	800a658 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	3307      	adds	r3, #7
 800a642:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f023 0307 	bic.w	r3, r3, #7
 800a64a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a64c:	68ba      	ldr	r2, [r7, #8]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	1ad3      	subs	r3, r2, r3
 800a652:	4a1f      	ldr	r2, [pc, #124]	; (800a6d0 <prvHeapInit+0xac>)
 800a654:	4413      	add	r3, r2
 800a656:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a65c:	4a1d      	ldr	r2, [pc, #116]	; (800a6d4 <prvHeapInit+0xb0>)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a662:	4b1c      	ldr	r3, [pc, #112]	; (800a6d4 <prvHeapInit+0xb0>)
 800a664:	2200      	movs	r2, #0
 800a666:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	68ba      	ldr	r2, [r7, #8]
 800a66c:	4413      	add	r3, r2
 800a66e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a670:	2208      	movs	r2, #8
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	1a9b      	subs	r3, r3, r2
 800a676:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f023 0307 	bic.w	r3, r3, #7
 800a67e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	4a15      	ldr	r2, [pc, #84]	; (800a6d8 <prvHeapInit+0xb4>)
 800a684:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a686:	4b14      	ldr	r3, [pc, #80]	; (800a6d8 <prvHeapInit+0xb4>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2200      	movs	r2, #0
 800a68c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a68e:	4b12      	ldr	r3, [pc, #72]	; (800a6d8 <prvHeapInit+0xb4>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	2200      	movs	r2, #0
 800a694:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	1ad2      	subs	r2, r2, r3
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a6a4:	4b0c      	ldr	r3, [pc, #48]	; (800a6d8 <prvHeapInit+0xb4>)
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	4a0a      	ldr	r2, [pc, #40]	; (800a6dc <prvHeapInit+0xb8>)
 800a6b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	4a09      	ldr	r2, [pc, #36]	; (800a6e0 <prvHeapInit+0xbc>)
 800a6ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a6bc:	4b09      	ldr	r3, [pc, #36]	; (800a6e4 <prvHeapInit+0xc0>)
 800a6be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a6c2:	601a      	str	r2, [r3, #0]
}
 800a6c4:	bf00      	nop
 800a6c6:	3714      	adds	r7, #20
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr
 800a6d0:	20003abc 	.word	0x20003abc
 800a6d4:	2000afec 	.word	0x2000afec
 800a6d8:	2000aff4 	.word	0x2000aff4
 800a6dc:	2000affc 	.word	0x2000affc
 800a6e0:	2000aff8 	.word	0x2000aff8
 800a6e4:	2000b008 	.word	0x2000b008

0800a6e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b085      	sub	sp, #20
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a6f0:	4b28      	ldr	r3, [pc, #160]	; (800a794 <prvInsertBlockIntoFreeList+0xac>)
 800a6f2:	60fb      	str	r3, [r7, #12]
 800a6f4:	e002      	b.n	800a6fc <prvInsertBlockIntoFreeList+0x14>
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	60fb      	str	r3, [r7, #12]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	429a      	cmp	r2, r3
 800a704:	d8f7      	bhi.n	800a6f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	68ba      	ldr	r2, [r7, #8]
 800a710:	4413      	add	r3, r2
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	429a      	cmp	r2, r3
 800a716:	d108      	bne.n	800a72a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	685a      	ldr	r2, [r3, #4]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	441a      	add	r2, r3
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	68ba      	ldr	r2, [r7, #8]
 800a734:	441a      	add	r2, r3
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d118      	bne.n	800a770 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	4b15      	ldr	r3, [pc, #84]	; (800a798 <prvInsertBlockIntoFreeList+0xb0>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	429a      	cmp	r2, r3
 800a748:	d00d      	beq.n	800a766 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	685a      	ldr	r2, [r3, #4]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	441a      	add	r2, r3
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	601a      	str	r2, [r3, #0]
 800a764:	e008      	b.n	800a778 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a766:	4b0c      	ldr	r3, [pc, #48]	; (800a798 <prvInsertBlockIntoFreeList+0xb0>)
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	601a      	str	r2, [r3, #0]
 800a76e:	e003      	b.n	800a778 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a778:	68fa      	ldr	r2, [r7, #12]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d002      	beq.n	800a786 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a786:	bf00      	nop
 800a788:	3714      	adds	r7, #20
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	2000afec 	.word	0x2000afec
 800a798:	2000aff4 	.word	0x2000aff4

0800a79c <__errno>:
 800a79c:	4b01      	ldr	r3, [pc, #4]	; (800a7a4 <__errno+0x8>)
 800a79e:	6818      	ldr	r0, [r3, #0]
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop
 800a7a4:	20000014 	.word	0x20000014

0800a7a8 <__libc_init_array>:
 800a7a8:	b570      	push	{r4, r5, r6, lr}
 800a7aa:	4d0d      	ldr	r5, [pc, #52]	; (800a7e0 <__libc_init_array+0x38>)
 800a7ac:	4c0d      	ldr	r4, [pc, #52]	; (800a7e4 <__libc_init_array+0x3c>)
 800a7ae:	1b64      	subs	r4, r4, r5
 800a7b0:	10a4      	asrs	r4, r4, #2
 800a7b2:	2600      	movs	r6, #0
 800a7b4:	42a6      	cmp	r6, r4
 800a7b6:	d109      	bne.n	800a7cc <__libc_init_array+0x24>
 800a7b8:	4d0b      	ldr	r5, [pc, #44]	; (800a7e8 <__libc_init_array+0x40>)
 800a7ba:	4c0c      	ldr	r4, [pc, #48]	; (800a7ec <__libc_init_array+0x44>)
 800a7bc:	f000 fd12 	bl	800b1e4 <_init>
 800a7c0:	1b64      	subs	r4, r4, r5
 800a7c2:	10a4      	asrs	r4, r4, #2
 800a7c4:	2600      	movs	r6, #0
 800a7c6:	42a6      	cmp	r6, r4
 800a7c8:	d105      	bne.n	800a7d6 <__libc_init_array+0x2e>
 800a7ca:	bd70      	pop	{r4, r5, r6, pc}
 800a7cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7d0:	4798      	blx	r3
 800a7d2:	3601      	adds	r6, #1
 800a7d4:	e7ee      	b.n	800a7b4 <__libc_init_array+0xc>
 800a7d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7da:	4798      	blx	r3
 800a7dc:	3601      	adds	r6, #1
 800a7de:	e7f2      	b.n	800a7c6 <__libc_init_array+0x1e>
 800a7e0:	0800b388 	.word	0x0800b388
 800a7e4:	0800b388 	.word	0x0800b388
 800a7e8:	0800b388 	.word	0x0800b388
 800a7ec:	0800b38c 	.word	0x0800b38c

0800a7f0 <__retarget_lock_acquire_recursive>:
 800a7f0:	4770      	bx	lr

0800a7f2 <__retarget_lock_release_recursive>:
 800a7f2:	4770      	bx	lr

0800a7f4 <memcpy>:
 800a7f4:	440a      	add	r2, r1
 800a7f6:	4291      	cmp	r1, r2
 800a7f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7fc:	d100      	bne.n	800a800 <memcpy+0xc>
 800a7fe:	4770      	bx	lr
 800a800:	b510      	push	{r4, lr}
 800a802:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a806:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a80a:	4291      	cmp	r1, r2
 800a80c:	d1f9      	bne.n	800a802 <memcpy+0xe>
 800a80e:	bd10      	pop	{r4, pc}

0800a810 <memset>:
 800a810:	4402      	add	r2, r0
 800a812:	4603      	mov	r3, r0
 800a814:	4293      	cmp	r3, r2
 800a816:	d100      	bne.n	800a81a <memset+0xa>
 800a818:	4770      	bx	lr
 800a81a:	f803 1b01 	strb.w	r1, [r3], #1
 800a81e:	e7f9      	b.n	800a814 <memset+0x4>

0800a820 <sbrk_aligned>:
 800a820:	b570      	push	{r4, r5, r6, lr}
 800a822:	4e0e      	ldr	r6, [pc, #56]	; (800a85c <sbrk_aligned+0x3c>)
 800a824:	460c      	mov	r4, r1
 800a826:	6831      	ldr	r1, [r6, #0]
 800a828:	4605      	mov	r5, r0
 800a82a:	b911      	cbnz	r1, 800a832 <sbrk_aligned+0x12>
 800a82c:	f000 f8f6 	bl	800aa1c <_sbrk_r>
 800a830:	6030      	str	r0, [r6, #0]
 800a832:	4621      	mov	r1, r4
 800a834:	4628      	mov	r0, r5
 800a836:	f000 f8f1 	bl	800aa1c <_sbrk_r>
 800a83a:	1c43      	adds	r3, r0, #1
 800a83c:	d00a      	beq.n	800a854 <sbrk_aligned+0x34>
 800a83e:	1cc4      	adds	r4, r0, #3
 800a840:	f024 0403 	bic.w	r4, r4, #3
 800a844:	42a0      	cmp	r0, r4
 800a846:	d007      	beq.n	800a858 <sbrk_aligned+0x38>
 800a848:	1a21      	subs	r1, r4, r0
 800a84a:	4628      	mov	r0, r5
 800a84c:	f000 f8e6 	bl	800aa1c <_sbrk_r>
 800a850:	3001      	adds	r0, #1
 800a852:	d101      	bne.n	800a858 <sbrk_aligned+0x38>
 800a854:	f04f 34ff 	mov.w	r4, #4294967295
 800a858:	4620      	mov	r0, r4
 800a85a:	bd70      	pop	{r4, r5, r6, pc}
 800a85c:	2000b014 	.word	0x2000b014

0800a860 <_malloc_r>:
 800a860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a864:	1ccd      	adds	r5, r1, #3
 800a866:	f025 0503 	bic.w	r5, r5, #3
 800a86a:	3508      	adds	r5, #8
 800a86c:	2d0c      	cmp	r5, #12
 800a86e:	bf38      	it	cc
 800a870:	250c      	movcc	r5, #12
 800a872:	2d00      	cmp	r5, #0
 800a874:	4607      	mov	r7, r0
 800a876:	db01      	blt.n	800a87c <_malloc_r+0x1c>
 800a878:	42a9      	cmp	r1, r5
 800a87a:	d905      	bls.n	800a888 <_malloc_r+0x28>
 800a87c:	230c      	movs	r3, #12
 800a87e:	603b      	str	r3, [r7, #0]
 800a880:	2600      	movs	r6, #0
 800a882:	4630      	mov	r0, r6
 800a884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a888:	4e2e      	ldr	r6, [pc, #184]	; (800a944 <_malloc_r+0xe4>)
 800a88a:	f000 f911 	bl	800aab0 <__malloc_lock>
 800a88e:	6833      	ldr	r3, [r6, #0]
 800a890:	461c      	mov	r4, r3
 800a892:	bb34      	cbnz	r4, 800a8e2 <_malloc_r+0x82>
 800a894:	4629      	mov	r1, r5
 800a896:	4638      	mov	r0, r7
 800a898:	f7ff ffc2 	bl	800a820 <sbrk_aligned>
 800a89c:	1c43      	adds	r3, r0, #1
 800a89e:	4604      	mov	r4, r0
 800a8a0:	d14d      	bne.n	800a93e <_malloc_r+0xde>
 800a8a2:	6834      	ldr	r4, [r6, #0]
 800a8a4:	4626      	mov	r6, r4
 800a8a6:	2e00      	cmp	r6, #0
 800a8a8:	d140      	bne.n	800a92c <_malloc_r+0xcc>
 800a8aa:	6823      	ldr	r3, [r4, #0]
 800a8ac:	4631      	mov	r1, r6
 800a8ae:	4638      	mov	r0, r7
 800a8b0:	eb04 0803 	add.w	r8, r4, r3
 800a8b4:	f000 f8b2 	bl	800aa1c <_sbrk_r>
 800a8b8:	4580      	cmp	r8, r0
 800a8ba:	d13a      	bne.n	800a932 <_malloc_r+0xd2>
 800a8bc:	6821      	ldr	r1, [r4, #0]
 800a8be:	3503      	adds	r5, #3
 800a8c0:	1a6d      	subs	r5, r5, r1
 800a8c2:	f025 0503 	bic.w	r5, r5, #3
 800a8c6:	3508      	adds	r5, #8
 800a8c8:	2d0c      	cmp	r5, #12
 800a8ca:	bf38      	it	cc
 800a8cc:	250c      	movcc	r5, #12
 800a8ce:	4629      	mov	r1, r5
 800a8d0:	4638      	mov	r0, r7
 800a8d2:	f7ff ffa5 	bl	800a820 <sbrk_aligned>
 800a8d6:	3001      	adds	r0, #1
 800a8d8:	d02b      	beq.n	800a932 <_malloc_r+0xd2>
 800a8da:	6823      	ldr	r3, [r4, #0]
 800a8dc:	442b      	add	r3, r5
 800a8de:	6023      	str	r3, [r4, #0]
 800a8e0:	e00e      	b.n	800a900 <_malloc_r+0xa0>
 800a8e2:	6822      	ldr	r2, [r4, #0]
 800a8e4:	1b52      	subs	r2, r2, r5
 800a8e6:	d41e      	bmi.n	800a926 <_malloc_r+0xc6>
 800a8e8:	2a0b      	cmp	r2, #11
 800a8ea:	d916      	bls.n	800a91a <_malloc_r+0xba>
 800a8ec:	1961      	adds	r1, r4, r5
 800a8ee:	42a3      	cmp	r3, r4
 800a8f0:	6025      	str	r5, [r4, #0]
 800a8f2:	bf18      	it	ne
 800a8f4:	6059      	strne	r1, [r3, #4]
 800a8f6:	6863      	ldr	r3, [r4, #4]
 800a8f8:	bf08      	it	eq
 800a8fa:	6031      	streq	r1, [r6, #0]
 800a8fc:	5162      	str	r2, [r4, r5]
 800a8fe:	604b      	str	r3, [r1, #4]
 800a900:	4638      	mov	r0, r7
 800a902:	f104 060b 	add.w	r6, r4, #11
 800a906:	f000 f8d9 	bl	800aabc <__malloc_unlock>
 800a90a:	f026 0607 	bic.w	r6, r6, #7
 800a90e:	1d23      	adds	r3, r4, #4
 800a910:	1af2      	subs	r2, r6, r3
 800a912:	d0b6      	beq.n	800a882 <_malloc_r+0x22>
 800a914:	1b9b      	subs	r3, r3, r6
 800a916:	50a3      	str	r3, [r4, r2]
 800a918:	e7b3      	b.n	800a882 <_malloc_r+0x22>
 800a91a:	6862      	ldr	r2, [r4, #4]
 800a91c:	42a3      	cmp	r3, r4
 800a91e:	bf0c      	ite	eq
 800a920:	6032      	streq	r2, [r6, #0]
 800a922:	605a      	strne	r2, [r3, #4]
 800a924:	e7ec      	b.n	800a900 <_malloc_r+0xa0>
 800a926:	4623      	mov	r3, r4
 800a928:	6864      	ldr	r4, [r4, #4]
 800a92a:	e7b2      	b.n	800a892 <_malloc_r+0x32>
 800a92c:	4634      	mov	r4, r6
 800a92e:	6876      	ldr	r6, [r6, #4]
 800a930:	e7b9      	b.n	800a8a6 <_malloc_r+0x46>
 800a932:	230c      	movs	r3, #12
 800a934:	603b      	str	r3, [r7, #0]
 800a936:	4638      	mov	r0, r7
 800a938:	f000 f8c0 	bl	800aabc <__malloc_unlock>
 800a93c:	e7a1      	b.n	800a882 <_malloc_r+0x22>
 800a93e:	6025      	str	r5, [r4, #0]
 800a940:	e7de      	b.n	800a900 <_malloc_r+0xa0>
 800a942:	bf00      	nop
 800a944:	2000b010 	.word	0x2000b010

0800a948 <cleanup_glue>:
 800a948:	b538      	push	{r3, r4, r5, lr}
 800a94a:	460c      	mov	r4, r1
 800a94c:	6809      	ldr	r1, [r1, #0]
 800a94e:	4605      	mov	r5, r0
 800a950:	b109      	cbz	r1, 800a956 <cleanup_glue+0xe>
 800a952:	f7ff fff9 	bl	800a948 <cleanup_glue>
 800a956:	4621      	mov	r1, r4
 800a958:	4628      	mov	r0, r5
 800a95a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a95e:	f000 b8b3 	b.w	800aac8 <_free_r>
	...

0800a964 <_reclaim_reent>:
 800a964:	4b2c      	ldr	r3, [pc, #176]	; (800aa18 <_reclaim_reent+0xb4>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4283      	cmp	r3, r0
 800a96a:	b570      	push	{r4, r5, r6, lr}
 800a96c:	4604      	mov	r4, r0
 800a96e:	d051      	beq.n	800aa14 <_reclaim_reent+0xb0>
 800a970:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a972:	b143      	cbz	r3, 800a986 <_reclaim_reent+0x22>
 800a974:	68db      	ldr	r3, [r3, #12]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d14a      	bne.n	800aa10 <_reclaim_reent+0xac>
 800a97a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a97c:	6819      	ldr	r1, [r3, #0]
 800a97e:	b111      	cbz	r1, 800a986 <_reclaim_reent+0x22>
 800a980:	4620      	mov	r0, r4
 800a982:	f000 f8a1 	bl	800aac8 <_free_r>
 800a986:	6961      	ldr	r1, [r4, #20]
 800a988:	b111      	cbz	r1, 800a990 <_reclaim_reent+0x2c>
 800a98a:	4620      	mov	r0, r4
 800a98c:	f000 f89c 	bl	800aac8 <_free_r>
 800a990:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a992:	b111      	cbz	r1, 800a99a <_reclaim_reent+0x36>
 800a994:	4620      	mov	r0, r4
 800a996:	f000 f897 	bl	800aac8 <_free_r>
 800a99a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a99c:	b111      	cbz	r1, 800a9a4 <_reclaim_reent+0x40>
 800a99e:	4620      	mov	r0, r4
 800a9a0:	f000 f892 	bl	800aac8 <_free_r>
 800a9a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a9a6:	b111      	cbz	r1, 800a9ae <_reclaim_reent+0x4a>
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	f000 f88d 	bl	800aac8 <_free_r>
 800a9ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a9b0:	b111      	cbz	r1, 800a9b8 <_reclaim_reent+0x54>
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	f000 f888 	bl	800aac8 <_free_r>
 800a9b8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a9ba:	b111      	cbz	r1, 800a9c2 <_reclaim_reent+0x5e>
 800a9bc:	4620      	mov	r0, r4
 800a9be:	f000 f883 	bl	800aac8 <_free_r>
 800a9c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a9c4:	b111      	cbz	r1, 800a9cc <_reclaim_reent+0x68>
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	f000 f87e 	bl	800aac8 <_free_r>
 800a9cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9ce:	b111      	cbz	r1, 800a9d6 <_reclaim_reent+0x72>
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	f000 f879 	bl	800aac8 <_free_r>
 800a9d6:	69a3      	ldr	r3, [r4, #24]
 800a9d8:	b1e3      	cbz	r3, 800aa14 <_reclaim_reent+0xb0>
 800a9da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a9dc:	4620      	mov	r0, r4
 800a9de:	4798      	blx	r3
 800a9e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a9e2:	b1b9      	cbz	r1, 800aa14 <_reclaim_reent+0xb0>
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a9ea:	f7ff bfad 	b.w	800a948 <cleanup_glue>
 800a9ee:	5949      	ldr	r1, [r1, r5]
 800a9f0:	b941      	cbnz	r1, 800aa04 <_reclaim_reent+0xa0>
 800a9f2:	3504      	adds	r5, #4
 800a9f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9f6:	2d80      	cmp	r5, #128	; 0x80
 800a9f8:	68d9      	ldr	r1, [r3, #12]
 800a9fa:	d1f8      	bne.n	800a9ee <_reclaim_reent+0x8a>
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	f000 f863 	bl	800aac8 <_free_r>
 800aa02:	e7ba      	b.n	800a97a <_reclaim_reent+0x16>
 800aa04:	680e      	ldr	r6, [r1, #0]
 800aa06:	4620      	mov	r0, r4
 800aa08:	f000 f85e 	bl	800aac8 <_free_r>
 800aa0c:	4631      	mov	r1, r6
 800aa0e:	e7ef      	b.n	800a9f0 <_reclaim_reent+0x8c>
 800aa10:	2500      	movs	r5, #0
 800aa12:	e7ef      	b.n	800a9f4 <_reclaim_reent+0x90>
 800aa14:	bd70      	pop	{r4, r5, r6, pc}
 800aa16:	bf00      	nop
 800aa18:	20000014 	.word	0x20000014

0800aa1c <_sbrk_r>:
 800aa1c:	b538      	push	{r3, r4, r5, lr}
 800aa1e:	4d06      	ldr	r5, [pc, #24]	; (800aa38 <_sbrk_r+0x1c>)
 800aa20:	2300      	movs	r3, #0
 800aa22:	4604      	mov	r4, r0
 800aa24:	4608      	mov	r0, r1
 800aa26:	602b      	str	r3, [r5, #0]
 800aa28:	f7f6 fc7a 	bl	8001320 <_sbrk>
 800aa2c:	1c43      	adds	r3, r0, #1
 800aa2e:	d102      	bne.n	800aa36 <_sbrk_r+0x1a>
 800aa30:	682b      	ldr	r3, [r5, #0]
 800aa32:	b103      	cbz	r3, 800aa36 <_sbrk_r+0x1a>
 800aa34:	6023      	str	r3, [r4, #0]
 800aa36:	bd38      	pop	{r3, r4, r5, pc}
 800aa38:	2000b018 	.word	0x2000b018

0800aa3c <_vsniprintf_r>:
 800aa3c:	b530      	push	{r4, r5, lr}
 800aa3e:	4614      	mov	r4, r2
 800aa40:	2c00      	cmp	r4, #0
 800aa42:	b09b      	sub	sp, #108	; 0x6c
 800aa44:	4605      	mov	r5, r0
 800aa46:	461a      	mov	r2, r3
 800aa48:	da05      	bge.n	800aa56 <_vsniprintf_r+0x1a>
 800aa4a:	238b      	movs	r3, #139	; 0x8b
 800aa4c:	6003      	str	r3, [r0, #0]
 800aa4e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa52:	b01b      	add	sp, #108	; 0x6c
 800aa54:	bd30      	pop	{r4, r5, pc}
 800aa56:	f44f 7302 	mov.w	r3, #520	; 0x208
 800aa5a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800aa5e:	bf14      	ite	ne
 800aa60:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aa64:	4623      	moveq	r3, r4
 800aa66:	9302      	str	r3, [sp, #8]
 800aa68:	9305      	str	r3, [sp, #20]
 800aa6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa6e:	9100      	str	r1, [sp, #0]
 800aa70:	9104      	str	r1, [sp, #16]
 800aa72:	f8ad 300e 	strh.w	r3, [sp, #14]
 800aa76:	4669      	mov	r1, sp
 800aa78:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800aa7a:	f000 f8cd 	bl	800ac18 <_svfiprintf_r>
 800aa7e:	1c43      	adds	r3, r0, #1
 800aa80:	bfbc      	itt	lt
 800aa82:	238b      	movlt	r3, #139	; 0x8b
 800aa84:	602b      	strlt	r3, [r5, #0]
 800aa86:	2c00      	cmp	r4, #0
 800aa88:	d0e3      	beq.n	800aa52 <_vsniprintf_r+0x16>
 800aa8a:	9b00      	ldr	r3, [sp, #0]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	701a      	strb	r2, [r3, #0]
 800aa90:	e7df      	b.n	800aa52 <_vsniprintf_r+0x16>
	...

0800aa94 <vsniprintf>:
 800aa94:	b507      	push	{r0, r1, r2, lr}
 800aa96:	9300      	str	r3, [sp, #0]
 800aa98:	4613      	mov	r3, r2
 800aa9a:	460a      	mov	r2, r1
 800aa9c:	4601      	mov	r1, r0
 800aa9e:	4803      	ldr	r0, [pc, #12]	; (800aaac <vsniprintf+0x18>)
 800aaa0:	6800      	ldr	r0, [r0, #0]
 800aaa2:	f7ff ffcb 	bl	800aa3c <_vsniprintf_r>
 800aaa6:	b003      	add	sp, #12
 800aaa8:	f85d fb04 	ldr.w	pc, [sp], #4
 800aaac:	20000014 	.word	0x20000014

0800aab0 <__malloc_lock>:
 800aab0:	4801      	ldr	r0, [pc, #4]	; (800aab8 <__malloc_lock+0x8>)
 800aab2:	f7ff be9d 	b.w	800a7f0 <__retarget_lock_acquire_recursive>
 800aab6:	bf00      	nop
 800aab8:	2000b00c 	.word	0x2000b00c

0800aabc <__malloc_unlock>:
 800aabc:	4801      	ldr	r0, [pc, #4]	; (800aac4 <__malloc_unlock+0x8>)
 800aabe:	f7ff be98 	b.w	800a7f2 <__retarget_lock_release_recursive>
 800aac2:	bf00      	nop
 800aac4:	2000b00c 	.word	0x2000b00c

0800aac8 <_free_r>:
 800aac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aaca:	2900      	cmp	r1, #0
 800aacc:	d044      	beq.n	800ab58 <_free_r+0x90>
 800aace:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aad2:	9001      	str	r0, [sp, #4]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f1a1 0404 	sub.w	r4, r1, #4
 800aada:	bfb8      	it	lt
 800aadc:	18e4      	addlt	r4, r4, r3
 800aade:	f7ff ffe7 	bl	800aab0 <__malloc_lock>
 800aae2:	4a1e      	ldr	r2, [pc, #120]	; (800ab5c <_free_r+0x94>)
 800aae4:	9801      	ldr	r0, [sp, #4]
 800aae6:	6813      	ldr	r3, [r2, #0]
 800aae8:	b933      	cbnz	r3, 800aaf8 <_free_r+0x30>
 800aaea:	6063      	str	r3, [r4, #4]
 800aaec:	6014      	str	r4, [r2, #0]
 800aaee:	b003      	add	sp, #12
 800aaf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aaf4:	f7ff bfe2 	b.w	800aabc <__malloc_unlock>
 800aaf8:	42a3      	cmp	r3, r4
 800aafa:	d908      	bls.n	800ab0e <_free_r+0x46>
 800aafc:	6825      	ldr	r5, [r4, #0]
 800aafe:	1961      	adds	r1, r4, r5
 800ab00:	428b      	cmp	r3, r1
 800ab02:	bf01      	itttt	eq
 800ab04:	6819      	ldreq	r1, [r3, #0]
 800ab06:	685b      	ldreq	r3, [r3, #4]
 800ab08:	1949      	addeq	r1, r1, r5
 800ab0a:	6021      	streq	r1, [r4, #0]
 800ab0c:	e7ed      	b.n	800aaea <_free_r+0x22>
 800ab0e:	461a      	mov	r2, r3
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	b10b      	cbz	r3, 800ab18 <_free_r+0x50>
 800ab14:	42a3      	cmp	r3, r4
 800ab16:	d9fa      	bls.n	800ab0e <_free_r+0x46>
 800ab18:	6811      	ldr	r1, [r2, #0]
 800ab1a:	1855      	adds	r5, r2, r1
 800ab1c:	42a5      	cmp	r5, r4
 800ab1e:	d10b      	bne.n	800ab38 <_free_r+0x70>
 800ab20:	6824      	ldr	r4, [r4, #0]
 800ab22:	4421      	add	r1, r4
 800ab24:	1854      	adds	r4, r2, r1
 800ab26:	42a3      	cmp	r3, r4
 800ab28:	6011      	str	r1, [r2, #0]
 800ab2a:	d1e0      	bne.n	800aaee <_free_r+0x26>
 800ab2c:	681c      	ldr	r4, [r3, #0]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	6053      	str	r3, [r2, #4]
 800ab32:	4421      	add	r1, r4
 800ab34:	6011      	str	r1, [r2, #0]
 800ab36:	e7da      	b.n	800aaee <_free_r+0x26>
 800ab38:	d902      	bls.n	800ab40 <_free_r+0x78>
 800ab3a:	230c      	movs	r3, #12
 800ab3c:	6003      	str	r3, [r0, #0]
 800ab3e:	e7d6      	b.n	800aaee <_free_r+0x26>
 800ab40:	6825      	ldr	r5, [r4, #0]
 800ab42:	1961      	adds	r1, r4, r5
 800ab44:	428b      	cmp	r3, r1
 800ab46:	bf04      	itt	eq
 800ab48:	6819      	ldreq	r1, [r3, #0]
 800ab4a:	685b      	ldreq	r3, [r3, #4]
 800ab4c:	6063      	str	r3, [r4, #4]
 800ab4e:	bf04      	itt	eq
 800ab50:	1949      	addeq	r1, r1, r5
 800ab52:	6021      	streq	r1, [r4, #0]
 800ab54:	6054      	str	r4, [r2, #4]
 800ab56:	e7ca      	b.n	800aaee <_free_r+0x26>
 800ab58:	b003      	add	sp, #12
 800ab5a:	bd30      	pop	{r4, r5, pc}
 800ab5c:	2000b010 	.word	0x2000b010

0800ab60 <__ssputs_r>:
 800ab60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab64:	688e      	ldr	r6, [r1, #8]
 800ab66:	429e      	cmp	r6, r3
 800ab68:	4682      	mov	sl, r0
 800ab6a:	460c      	mov	r4, r1
 800ab6c:	4690      	mov	r8, r2
 800ab6e:	461f      	mov	r7, r3
 800ab70:	d838      	bhi.n	800abe4 <__ssputs_r+0x84>
 800ab72:	898a      	ldrh	r2, [r1, #12]
 800ab74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ab78:	d032      	beq.n	800abe0 <__ssputs_r+0x80>
 800ab7a:	6825      	ldr	r5, [r4, #0]
 800ab7c:	6909      	ldr	r1, [r1, #16]
 800ab7e:	eba5 0901 	sub.w	r9, r5, r1
 800ab82:	6965      	ldr	r5, [r4, #20]
 800ab84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	444b      	add	r3, r9
 800ab90:	106d      	asrs	r5, r5, #1
 800ab92:	429d      	cmp	r5, r3
 800ab94:	bf38      	it	cc
 800ab96:	461d      	movcc	r5, r3
 800ab98:	0553      	lsls	r3, r2, #21
 800ab9a:	d531      	bpl.n	800ac00 <__ssputs_r+0xa0>
 800ab9c:	4629      	mov	r1, r5
 800ab9e:	f7ff fe5f 	bl	800a860 <_malloc_r>
 800aba2:	4606      	mov	r6, r0
 800aba4:	b950      	cbnz	r0, 800abbc <__ssputs_r+0x5c>
 800aba6:	230c      	movs	r3, #12
 800aba8:	f8ca 3000 	str.w	r3, [sl]
 800abac:	89a3      	ldrh	r3, [r4, #12]
 800abae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abb2:	81a3      	strh	r3, [r4, #12]
 800abb4:	f04f 30ff 	mov.w	r0, #4294967295
 800abb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abbc:	6921      	ldr	r1, [r4, #16]
 800abbe:	464a      	mov	r2, r9
 800abc0:	f7ff fe18 	bl	800a7f4 <memcpy>
 800abc4:	89a3      	ldrh	r3, [r4, #12]
 800abc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800abca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abce:	81a3      	strh	r3, [r4, #12]
 800abd0:	6126      	str	r6, [r4, #16]
 800abd2:	6165      	str	r5, [r4, #20]
 800abd4:	444e      	add	r6, r9
 800abd6:	eba5 0509 	sub.w	r5, r5, r9
 800abda:	6026      	str	r6, [r4, #0]
 800abdc:	60a5      	str	r5, [r4, #8]
 800abde:	463e      	mov	r6, r7
 800abe0:	42be      	cmp	r6, r7
 800abe2:	d900      	bls.n	800abe6 <__ssputs_r+0x86>
 800abe4:	463e      	mov	r6, r7
 800abe6:	6820      	ldr	r0, [r4, #0]
 800abe8:	4632      	mov	r2, r6
 800abea:	4641      	mov	r1, r8
 800abec:	f000 faa8 	bl	800b140 <memmove>
 800abf0:	68a3      	ldr	r3, [r4, #8]
 800abf2:	1b9b      	subs	r3, r3, r6
 800abf4:	60a3      	str	r3, [r4, #8]
 800abf6:	6823      	ldr	r3, [r4, #0]
 800abf8:	4433      	add	r3, r6
 800abfa:	6023      	str	r3, [r4, #0]
 800abfc:	2000      	movs	r0, #0
 800abfe:	e7db      	b.n	800abb8 <__ssputs_r+0x58>
 800ac00:	462a      	mov	r2, r5
 800ac02:	f000 fab7 	bl	800b174 <_realloc_r>
 800ac06:	4606      	mov	r6, r0
 800ac08:	2800      	cmp	r0, #0
 800ac0a:	d1e1      	bne.n	800abd0 <__ssputs_r+0x70>
 800ac0c:	6921      	ldr	r1, [r4, #16]
 800ac0e:	4650      	mov	r0, sl
 800ac10:	f7ff ff5a 	bl	800aac8 <_free_r>
 800ac14:	e7c7      	b.n	800aba6 <__ssputs_r+0x46>
	...

0800ac18 <_svfiprintf_r>:
 800ac18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac1c:	4698      	mov	r8, r3
 800ac1e:	898b      	ldrh	r3, [r1, #12]
 800ac20:	061b      	lsls	r3, r3, #24
 800ac22:	b09d      	sub	sp, #116	; 0x74
 800ac24:	4607      	mov	r7, r0
 800ac26:	460d      	mov	r5, r1
 800ac28:	4614      	mov	r4, r2
 800ac2a:	d50e      	bpl.n	800ac4a <_svfiprintf_r+0x32>
 800ac2c:	690b      	ldr	r3, [r1, #16]
 800ac2e:	b963      	cbnz	r3, 800ac4a <_svfiprintf_r+0x32>
 800ac30:	2140      	movs	r1, #64	; 0x40
 800ac32:	f7ff fe15 	bl	800a860 <_malloc_r>
 800ac36:	6028      	str	r0, [r5, #0]
 800ac38:	6128      	str	r0, [r5, #16]
 800ac3a:	b920      	cbnz	r0, 800ac46 <_svfiprintf_r+0x2e>
 800ac3c:	230c      	movs	r3, #12
 800ac3e:	603b      	str	r3, [r7, #0]
 800ac40:	f04f 30ff 	mov.w	r0, #4294967295
 800ac44:	e0d1      	b.n	800adea <_svfiprintf_r+0x1d2>
 800ac46:	2340      	movs	r3, #64	; 0x40
 800ac48:	616b      	str	r3, [r5, #20]
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac4e:	2320      	movs	r3, #32
 800ac50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac54:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac58:	2330      	movs	r3, #48	; 0x30
 800ac5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ae04 <_svfiprintf_r+0x1ec>
 800ac5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac62:	f04f 0901 	mov.w	r9, #1
 800ac66:	4623      	mov	r3, r4
 800ac68:	469a      	mov	sl, r3
 800ac6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac6e:	b10a      	cbz	r2, 800ac74 <_svfiprintf_r+0x5c>
 800ac70:	2a25      	cmp	r2, #37	; 0x25
 800ac72:	d1f9      	bne.n	800ac68 <_svfiprintf_r+0x50>
 800ac74:	ebba 0b04 	subs.w	fp, sl, r4
 800ac78:	d00b      	beq.n	800ac92 <_svfiprintf_r+0x7a>
 800ac7a:	465b      	mov	r3, fp
 800ac7c:	4622      	mov	r2, r4
 800ac7e:	4629      	mov	r1, r5
 800ac80:	4638      	mov	r0, r7
 800ac82:	f7ff ff6d 	bl	800ab60 <__ssputs_r>
 800ac86:	3001      	adds	r0, #1
 800ac88:	f000 80aa 	beq.w	800ade0 <_svfiprintf_r+0x1c8>
 800ac8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac8e:	445a      	add	r2, fp
 800ac90:	9209      	str	r2, [sp, #36]	; 0x24
 800ac92:	f89a 3000 	ldrb.w	r3, [sl]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	f000 80a2 	beq.w	800ade0 <_svfiprintf_r+0x1c8>
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	f04f 32ff 	mov.w	r2, #4294967295
 800aca2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aca6:	f10a 0a01 	add.w	sl, sl, #1
 800acaa:	9304      	str	r3, [sp, #16]
 800acac:	9307      	str	r3, [sp, #28]
 800acae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800acb2:	931a      	str	r3, [sp, #104]	; 0x68
 800acb4:	4654      	mov	r4, sl
 800acb6:	2205      	movs	r2, #5
 800acb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acbc:	4851      	ldr	r0, [pc, #324]	; (800ae04 <_svfiprintf_r+0x1ec>)
 800acbe:	f7f5 faaf 	bl	8000220 <memchr>
 800acc2:	9a04      	ldr	r2, [sp, #16]
 800acc4:	b9d8      	cbnz	r0, 800acfe <_svfiprintf_r+0xe6>
 800acc6:	06d0      	lsls	r0, r2, #27
 800acc8:	bf44      	itt	mi
 800acca:	2320      	movmi	r3, #32
 800accc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acd0:	0711      	lsls	r1, r2, #28
 800acd2:	bf44      	itt	mi
 800acd4:	232b      	movmi	r3, #43	; 0x2b
 800acd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acda:	f89a 3000 	ldrb.w	r3, [sl]
 800acde:	2b2a      	cmp	r3, #42	; 0x2a
 800ace0:	d015      	beq.n	800ad0e <_svfiprintf_r+0xf6>
 800ace2:	9a07      	ldr	r2, [sp, #28]
 800ace4:	4654      	mov	r4, sl
 800ace6:	2000      	movs	r0, #0
 800ace8:	f04f 0c0a 	mov.w	ip, #10
 800acec:	4621      	mov	r1, r4
 800acee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acf2:	3b30      	subs	r3, #48	; 0x30
 800acf4:	2b09      	cmp	r3, #9
 800acf6:	d94e      	bls.n	800ad96 <_svfiprintf_r+0x17e>
 800acf8:	b1b0      	cbz	r0, 800ad28 <_svfiprintf_r+0x110>
 800acfa:	9207      	str	r2, [sp, #28]
 800acfc:	e014      	b.n	800ad28 <_svfiprintf_r+0x110>
 800acfe:	eba0 0308 	sub.w	r3, r0, r8
 800ad02:	fa09 f303 	lsl.w	r3, r9, r3
 800ad06:	4313      	orrs	r3, r2
 800ad08:	9304      	str	r3, [sp, #16]
 800ad0a:	46a2      	mov	sl, r4
 800ad0c:	e7d2      	b.n	800acb4 <_svfiprintf_r+0x9c>
 800ad0e:	9b03      	ldr	r3, [sp, #12]
 800ad10:	1d19      	adds	r1, r3, #4
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	9103      	str	r1, [sp, #12]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	bfbb      	ittet	lt
 800ad1a:	425b      	neglt	r3, r3
 800ad1c:	f042 0202 	orrlt.w	r2, r2, #2
 800ad20:	9307      	strge	r3, [sp, #28]
 800ad22:	9307      	strlt	r3, [sp, #28]
 800ad24:	bfb8      	it	lt
 800ad26:	9204      	strlt	r2, [sp, #16]
 800ad28:	7823      	ldrb	r3, [r4, #0]
 800ad2a:	2b2e      	cmp	r3, #46	; 0x2e
 800ad2c:	d10c      	bne.n	800ad48 <_svfiprintf_r+0x130>
 800ad2e:	7863      	ldrb	r3, [r4, #1]
 800ad30:	2b2a      	cmp	r3, #42	; 0x2a
 800ad32:	d135      	bne.n	800ada0 <_svfiprintf_r+0x188>
 800ad34:	9b03      	ldr	r3, [sp, #12]
 800ad36:	1d1a      	adds	r2, r3, #4
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	9203      	str	r2, [sp, #12]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	bfb8      	it	lt
 800ad40:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad44:	3402      	adds	r4, #2
 800ad46:	9305      	str	r3, [sp, #20]
 800ad48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ae14 <_svfiprintf_r+0x1fc>
 800ad4c:	7821      	ldrb	r1, [r4, #0]
 800ad4e:	2203      	movs	r2, #3
 800ad50:	4650      	mov	r0, sl
 800ad52:	f7f5 fa65 	bl	8000220 <memchr>
 800ad56:	b140      	cbz	r0, 800ad6a <_svfiprintf_r+0x152>
 800ad58:	2340      	movs	r3, #64	; 0x40
 800ad5a:	eba0 000a 	sub.w	r0, r0, sl
 800ad5e:	fa03 f000 	lsl.w	r0, r3, r0
 800ad62:	9b04      	ldr	r3, [sp, #16]
 800ad64:	4303      	orrs	r3, r0
 800ad66:	3401      	adds	r4, #1
 800ad68:	9304      	str	r3, [sp, #16]
 800ad6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad6e:	4826      	ldr	r0, [pc, #152]	; (800ae08 <_svfiprintf_r+0x1f0>)
 800ad70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad74:	2206      	movs	r2, #6
 800ad76:	f7f5 fa53 	bl	8000220 <memchr>
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	d038      	beq.n	800adf0 <_svfiprintf_r+0x1d8>
 800ad7e:	4b23      	ldr	r3, [pc, #140]	; (800ae0c <_svfiprintf_r+0x1f4>)
 800ad80:	bb1b      	cbnz	r3, 800adca <_svfiprintf_r+0x1b2>
 800ad82:	9b03      	ldr	r3, [sp, #12]
 800ad84:	3307      	adds	r3, #7
 800ad86:	f023 0307 	bic.w	r3, r3, #7
 800ad8a:	3308      	adds	r3, #8
 800ad8c:	9303      	str	r3, [sp, #12]
 800ad8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad90:	4433      	add	r3, r6
 800ad92:	9309      	str	r3, [sp, #36]	; 0x24
 800ad94:	e767      	b.n	800ac66 <_svfiprintf_r+0x4e>
 800ad96:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad9a:	460c      	mov	r4, r1
 800ad9c:	2001      	movs	r0, #1
 800ad9e:	e7a5      	b.n	800acec <_svfiprintf_r+0xd4>
 800ada0:	2300      	movs	r3, #0
 800ada2:	3401      	adds	r4, #1
 800ada4:	9305      	str	r3, [sp, #20]
 800ada6:	4619      	mov	r1, r3
 800ada8:	f04f 0c0a 	mov.w	ip, #10
 800adac:	4620      	mov	r0, r4
 800adae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adb2:	3a30      	subs	r2, #48	; 0x30
 800adb4:	2a09      	cmp	r2, #9
 800adb6:	d903      	bls.n	800adc0 <_svfiprintf_r+0x1a8>
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d0c5      	beq.n	800ad48 <_svfiprintf_r+0x130>
 800adbc:	9105      	str	r1, [sp, #20]
 800adbe:	e7c3      	b.n	800ad48 <_svfiprintf_r+0x130>
 800adc0:	fb0c 2101 	mla	r1, ip, r1, r2
 800adc4:	4604      	mov	r4, r0
 800adc6:	2301      	movs	r3, #1
 800adc8:	e7f0      	b.n	800adac <_svfiprintf_r+0x194>
 800adca:	ab03      	add	r3, sp, #12
 800adcc:	9300      	str	r3, [sp, #0]
 800adce:	462a      	mov	r2, r5
 800add0:	4b0f      	ldr	r3, [pc, #60]	; (800ae10 <_svfiprintf_r+0x1f8>)
 800add2:	a904      	add	r1, sp, #16
 800add4:	4638      	mov	r0, r7
 800add6:	f3af 8000 	nop.w
 800adda:	1c42      	adds	r2, r0, #1
 800addc:	4606      	mov	r6, r0
 800adde:	d1d6      	bne.n	800ad8e <_svfiprintf_r+0x176>
 800ade0:	89ab      	ldrh	r3, [r5, #12]
 800ade2:	065b      	lsls	r3, r3, #25
 800ade4:	f53f af2c 	bmi.w	800ac40 <_svfiprintf_r+0x28>
 800ade8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adea:	b01d      	add	sp, #116	; 0x74
 800adec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf0:	ab03      	add	r3, sp, #12
 800adf2:	9300      	str	r3, [sp, #0]
 800adf4:	462a      	mov	r2, r5
 800adf6:	4b06      	ldr	r3, [pc, #24]	; (800ae10 <_svfiprintf_r+0x1f8>)
 800adf8:	a904      	add	r1, sp, #16
 800adfa:	4638      	mov	r0, r7
 800adfc:	f000 f87a 	bl	800aef4 <_printf_i>
 800ae00:	e7eb      	b.n	800adda <_svfiprintf_r+0x1c2>
 800ae02:	bf00      	nop
 800ae04:	0800b34c 	.word	0x0800b34c
 800ae08:	0800b356 	.word	0x0800b356
 800ae0c:	00000000 	.word	0x00000000
 800ae10:	0800ab61 	.word	0x0800ab61
 800ae14:	0800b352 	.word	0x0800b352

0800ae18 <_printf_common>:
 800ae18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae1c:	4616      	mov	r6, r2
 800ae1e:	4699      	mov	r9, r3
 800ae20:	688a      	ldr	r2, [r1, #8]
 800ae22:	690b      	ldr	r3, [r1, #16]
 800ae24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	bfb8      	it	lt
 800ae2c:	4613      	movlt	r3, r2
 800ae2e:	6033      	str	r3, [r6, #0]
 800ae30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae34:	4607      	mov	r7, r0
 800ae36:	460c      	mov	r4, r1
 800ae38:	b10a      	cbz	r2, 800ae3e <_printf_common+0x26>
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	6033      	str	r3, [r6, #0]
 800ae3e:	6823      	ldr	r3, [r4, #0]
 800ae40:	0699      	lsls	r1, r3, #26
 800ae42:	bf42      	ittt	mi
 800ae44:	6833      	ldrmi	r3, [r6, #0]
 800ae46:	3302      	addmi	r3, #2
 800ae48:	6033      	strmi	r3, [r6, #0]
 800ae4a:	6825      	ldr	r5, [r4, #0]
 800ae4c:	f015 0506 	ands.w	r5, r5, #6
 800ae50:	d106      	bne.n	800ae60 <_printf_common+0x48>
 800ae52:	f104 0a19 	add.w	sl, r4, #25
 800ae56:	68e3      	ldr	r3, [r4, #12]
 800ae58:	6832      	ldr	r2, [r6, #0]
 800ae5a:	1a9b      	subs	r3, r3, r2
 800ae5c:	42ab      	cmp	r3, r5
 800ae5e:	dc26      	bgt.n	800aeae <_printf_common+0x96>
 800ae60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae64:	1e13      	subs	r3, r2, #0
 800ae66:	6822      	ldr	r2, [r4, #0]
 800ae68:	bf18      	it	ne
 800ae6a:	2301      	movne	r3, #1
 800ae6c:	0692      	lsls	r2, r2, #26
 800ae6e:	d42b      	bmi.n	800aec8 <_printf_common+0xb0>
 800ae70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae74:	4649      	mov	r1, r9
 800ae76:	4638      	mov	r0, r7
 800ae78:	47c0      	blx	r8
 800ae7a:	3001      	adds	r0, #1
 800ae7c:	d01e      	beq.n	800aebc <_printf_common+0xa4>
 800ae7e:	6823      	ldr	r3, [r4, #0]
 800ae80:	68e5      	ldr	r5, [r4, #12]
 800ae82:	6832      	ldr	r2, [r6, #0]
 800ae84:	f003 0306 	and.w	r3, r3, #6
 800ae88:	2b04      	cmp	r3, #4
 800ae8a:	bf08      	it	eq
 800ae8c:	1aad      	subeq	r5, r5, r2
 800ae8e:	68a3      	ldr	r3, [r4, #8]
 800ae90:	6922      	ldr	r2, [r4, #16]
 800ae92:	bf0c      	ite	eq
 800ae94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae98:	2500      	movne	r5, #0
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	bfc4      	itt	gt
 800ae9e:	1a9b      	subgt	r3, r3, r2
 800aea0:	18ed      	addgt	r5, r5, r3
 800aea2:	2600      	movs	r6, #0
 800aea4:	341a      	adds	r4, #26
 800aea6:	42b5      	cmp	r5, r6
 800aea8:	d11a      	bne.n	800aee0 <_printf_common+0xc8>
 800aeaa:	2000      	movs	r0, #0
 800aeac:	e008      	b.n	800aec0 <_printf_common+0xa8>
 800aeae:	2301      	movs	r3, #1
 800aeb0:	4652      	mov	r2, sl
 800aeb2:	4649      	mov	r1, r9
 800aeb4:	4638      	mov	r0, r7
 800aeb6:	47c0      	blx	r8
 800aeb8:	3001      	adds	r0, #1
 800aeba:	d103      	bne.n	800aec4 <_printf_common+0xac>
 800aebc:	f04f 30ff 	mov.w	r0, #4294967295
 800aec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aec4:	3501      	adds	r5, #1
 800aec6:	e7c6      	b.n	800ae56 <_printf_common+0x3e>
 800aec8:	18e1      	adds	r1, r4, r3
 800aeca:	1c5a      	adds	r2, r3, #1
 800aecc:	2030      	movs	r0, #48	; 0x30
 800aece:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aed2:	4422      	add	r2, r4
 800aed4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aed8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aedc:	3302      	adds	r3, #2
 800aede:	e7c7      	b.n	800ae70 <_printf_common+0x58>
 800aee0:	2301      	movs	r3, #1
 800aee2:	4622      	mov	r2, r4
 800aee4:	4649      	mov	r1, r9
 800aee6:	4638      	mov	r0, r7
 800aee8:	47c0      	blx	r8
 800aeea:	3001      	adds	r0, #1
 800aeec:	d0e6      	beq.n	800aebc <_printf_common+0xa4>
 800aeee:	3601      	adds	r6, #1
 800aef0:	e7d9      	b.n	800aea6 <_printf_common+0x8e>
	...

0800aef4 <_printf_i>:
 800aef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aef8:	7e0f      	ldrb	r7, [r1, #24]
 800aefa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aefc:	2f78      	cmp	r7, #120	; 0x78
 800aefe:	4691      	mov	r9, r2
 800af00:	4680      	mov	r8, r0
 800af02:	460c      	mov	r4, r1
 800af04:	469a      	mov	sl, r3
 800af06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800af0a:	d807      	bhi.n	800af1c <_printf_i+0x28>
 800af0c:	2f62      	cmp	r7, #98	; 0x62
 800af0e:	d80a      	bhi.n	800af26 <_printf_i+0x32>
 800af10:	2f00      	cmp	r7, #0
 800af12:	f000 80d8 	beq.w	800b0c6 <_printf_i+0x1d2>
 800af16:	2f58      	cmp	r7, #88	; 0x58
 800af18:	f000 80a3 	beq.w	800b062 <_printf_i+0x16e>
 800af1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af24:	e03a      	b.n	800af9c <_printf_i+0xa8>
 800af26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af2a:	2b15      	cmp	r3, #21
 800af2c:	d8f6      	bhi.n	800af1c <_printf_i+0x28>
 800af2e:	a101      	add	r1, pc, #4	; (adr r1, 800af34 <_printf_i+0x40>)
 800af30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af34:	0800af8d 	.word	0x0800af8d
 800af38:	0800afa1 	.word	0x0800afa1
 800af3c:	0800af1d 	.word	0x0800af1d
 800af40:	0800af1d 	.word	0x0800af1d
 800af44:	0800af1d 	.word	0x0800af1d
 800af48:	0800af1d 	.word	0x0800af1d
 800af4c:	0800afa1 	.word	0x0800afa1
 800af50:	0800af1d 	.word	0x0800af1d
 800af54:	0800af1d 	.word	0x0800af1d
 800af58:	0800af1d 	.word	0x0800af1d
 800af5c:	0800af1d 	.word	0x0800af1d
 800af60:	0800b0ad 	.word	0x0800b0ad
 800af64:	0800afd1 	.word	0x0800afd1
 800af68:	0800b08f 	.word	0x0800b08f
 800af6c:	0800af1d 	.word	0x0800af1d
 800af70:	0800af1d 	.word	0x0800af1d
 800af74:	0800b0cf 	.word	0x0800b0cf
 800af78:	0800af1d 	.word	0x0800af1d
 800af7c:	0800afd1 	.word	0x0800afd1
 800af80:	0800af1d 	.word	0x0800af1d
 800af84:	0800af1d 	.word	0x0800af1d
 800af88:	0800b097 	.word	0x0800b097
 800af8c:	682b      	ldr	r3, [r5, #0]
 800af8e:	1d1a      	adds	r2, r3, #4
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	602a      	str	r2, [r5, #0]
 800af94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af9c:	2301      	movs	r3, #1
 800af9e:	e0a3      	b.n	800b0e8 <_printf_i+0x1f4>
 800afa0:	6820      	ldr	r0, [r4, #0]
 800afa2:	6829      	ldr	r1, [r5, #0]
 800afa4:	0606      	lsls	r6, r0, #24
 800afa6:	f101 0304 	add.w	r3, r1, #4
 800afaa:	d50a      	bpl.n	800afc2 <_printf_i+0xce>
 800afac:	680e      	ldr	r6, [r1, #0]
 800afae:	602b      	str	r3, [r5, #0]
 800afb0:	2e00      	cmp	r6, #0
 800afb2:	da03      	bge.n	800afbc <_printf_i+0xc8>
 800afb4:	232d      	movs	r3, #45	; 0x2d
 800afb6:	4276      	negs	r6, r6
 800afb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afbc:	485e      	ldr	r0, [pc, #376]	; (800b138 <_printf_i+0x244>)
 800afbe:	230a      	movs	r3, #10
 800afc0:	e019      	b.n	800aff6 <_printf_i+0x102>
 800afc2:	680e      	ldr	r6, [r1, #0]
 800afc4:	602b      	str	r3, [r5, #0]
 800afc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800afca:	bf18      	it	ne
 800afcc:	b236      	sxthne	r6, r6
 800afce:	e7ef      	b.n	800afb0 <_printf_i+0xbc>
 800afd0:	682b      	ldr	r3, [r5, #0]
 800afd2:	6820      	ldr	r0, [r4, #0]
 800afd4:	1d19      	adds	r1, r3, #4
 800afd6:	6029      	str	r1, [r5, #0]
 800afd8:	0601      	lsls	r1, r0, #24
 800afda:	d501      	bpl.n	800afe0 <_printf_i+0xec>
 800afdc:	681e      	ldr	r6, [r3, #0]
 800afde:	e002      	b.n	800afe6 <_printf_i+0xf2>
 800afe0:	0646      	lsls	r6, r0, #25
 800afe2:	d5fb      	bpl.n	800afdc <_printf_i+0xe8>
 800afe4:	881e      	ldrh	r6, [r3, #0]
 800afe6:	4854      	ldr	r0, [pc, #336]	; (800b138 <_printf_i+0x244>)
 800afe8:	2f6f      	cmp	r7, #111	; 0x6f
 800afea:	bf0c      	ite	eq
 800afec:	2308      	moveq	r3, #8
 800afee:	230a      	movne	r3, #10
 800aff0:	2100      	movs	r1, #0
 800aff2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aff6:	6865      	ldr	r5, [r4, #4]
 800aff8:	60a5      	str	r5, [r4, #8]
 800affa:	2d00      	cmp	r5, #0
 800affc:	bfa2      	ittt	ge
 800affe:	6821      	ldrge	r1, [r4, #0]
 800b000:	f021 0104 	bicge.w	r1, r1, #4
 800b004:	6021      	strge	r1, [r4, #0]
 800b006:	b90e      	cbnz	r6, 800b00c <_printf_i+0x118>
 800b008:	2d00      	cmp	r5, #0
 800b00a:	d04d      	beq.n	800b0a8 <_printf_i+0x1b4>
 800b00c:	4615      	mov	r5, r2
 800b00e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b012:	fb03 6711 	mls	r7, r3, r1, r6
 800b016:	5dc7      	ldrb	r7, [r0, r7]
 800b018:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b01c:	4637      	mov	r7, r6
 800b01e:	42bb      	cmp	r3, r7
 800b020:	460e      	mov	r6, r1
 800b022:	d9f4      	bls.n	800b00e <_printf_i+0x11a>
 800b024:	2b08      	cmp	r3, #8
 800b026:	d10b      	bne.n	800b040 <_printf_i+0x14c>
 800b028:	6823      	ldr	r3, [r4, #0]
 800b02a:	07de      	lsls	r6, r3, #31
 800b02c:	d508      	bpl.n	800b040 <_printf_i+0x14c>
 800b02e:	6923      	ldr	r3, [r4, #16]
 800b030:	6861      	ldr	r1, [r4, #4]
 800b032:	4299      	cmp	r1, r3
 800b034:	bfde      	ittt	le
 800b036:	2330      	movle	r3, #48	; 0x30
 800b038:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b03c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b040:	1b52      	subs	r2, r2, r5
 800b042:	6122      	str	r2, [r4, #16]
 800b044:	f8cd a000 	str.w	sl, [sp]
 800b048:	464b      	mov	r3, r9
 800b04a:	aa03      	add	r2, sp, #12
 800b04c:	4621      	mov	r1, r4
 800b04e:	4640      	mov	r0, r8
 800b050:	f7ff fee2 	bl	800ae18 <_printf_common>
 800b054:	3001      	adds	r0, #1
 800b056:	d14c      	bne.n	800b0f2 <_printf_i+0x1fe>
 800b058:	f04f 30ff 	mov.w	r0, #4294967295
 800b05c:	b004      	add	sp, #16
 800b05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b062:	4835      	ldr	r0, [pc, #212]	; (800b138 <_printf_i+0x244>)
 800b064:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b068:	6829      	ldr	r1, [r5, #0]
 800b06a:	6823      	ldr	r3, [r4, #0]
 800b06c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b070:	6029      	str	r1, [r5, #0]
 800b072:	061d      	lsls	r5, r3, #24
 800b074:	d514      	bpl.n	800b0a0 <_printf_i+0x1ac>
 800b076:	07df      	lsls	r7, r3, #31
 800b078:	bf44      	itt	mi
 800b07a:	f043 0320 	orrmi.w	r3, r3, #32
 800b07e:	6023      	strmi	r3, [r4, #0]
 800b080:	b91e      	cbnz	r6, 800b08a <_printf_i+0x196>
 800b082:	6823      	ldr	r3, [r4, #0]
 800b084:	f023 0320 	bic.w	r3, r3, #32
 800b088:	6023      	str	r3, [r4, #0]
 800b08a:	2310      	movs	r3, #16
 800b08c:	e7b0      	b.n	800aff0 <_printf_i+0xfc>
 800b08e:	6823      	ldr	r3, [r4, #0]
 800b090:	f043 0320 	orr.w	r3, r3, #32
 800b094:	6023      	str	r3, [r4, #0]
 800b096:	2378      	movs	r3, #120	; 0x78
 800b098:	4828      	ldr	r0, [pc, #160]	; (800b13c <_printf_i+0x248>)
 800b09a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b09e:	e7e3      	b.n	800b068 <_printf_i+0x174>
 800b0a0:	0659      	lsls	r1, r3, #25
 800b0a2:	bf48      	it	mi
 800b0a4:	b2b6      	uxthmi	r6, r6
 800b0a6:	e7e6      	b.n	800b076 <_printf_i+0x182>
 800b0a8:	4615      	mov	r5, r2
 800b0aa:	e7bb      	b.n	800b024 <_printf_i+0x130>
 800b0ac:	682b      	ldr	r3, [r5, #0]
 800b0ae:	6826      	ldr	r6, [r4, #0]
 800b0b0:	6961      	ldr	r1, [r4, #20]
 800b0b2:	1d18      	adds	r0, r3, #4
 800b0b4:	6028      	str	r0, [r5, #0]
 800b0b6:	0635      	lsls	r5, r6, #24
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	d501      	bpl.n	800b0c0 <_printf_i+0x1cc>
 800b0bc:	6019      	str	r1, [r3, #0]
 800b0be:	e002      	b.n	800b0c6 <_printf_i+0x1d2>
 800b0c0:	0670      	lsls	r0, r6, #25
 800b0c2:	d5fb      	bpl.n	800b0bc <_printf_i+0x1c8>
 800b0c4:	8019      	strh	r1, [r3, #0]
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	6123      	str	r3, [r4, #16]
 800b0ca:	4615      	mov	r5, r2
 800b0cc:	e7ba      	b.n	800b044 <_printf_i+0x150>
 800b0ce:	682b      	ldr	r3, [r5, #0]
 800b0d0:	1d1a      	adds	r2, r3, #4
 800b0d2:	602a      	str	r2, [r5, #0]
 800b0d4:	681d      	ldr	r5, [r3, #0]
 800b0d6:	6862      	ldr	r2, [r4, #4]
 800b0d8:	2100      	movs	r1, #0
 800b0da:	4628      	mov	r0, r5
 800b0dc:	f7f5 f8a0 	bl	8000220 <memchr>
 800b0e0:	b108      	cbz	r0, 800b0e6 <_printf_i+0x1f2>
 800b0e2:	1b40      	subs	r0, r0, r5
 800b0e4:	6060      	str	r0, [r4, #4]
 800b0e6:	6863      	ldr	r3, [r4, #4]
 800b0e8:	6123      	str	r3, [r4, #16]
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0f0:	e7a8      	b.n	800b044 <_printf_i+0x150>
 800b0f2:	6923      	ldr	r3, [r4, #16]
 800b0f4:	462a      	mov	r2, r5
 800b0f6:	4649      	mov	r1, r9
 800b0f8:	4640      	mov	r0, r8
 800b0fa:	47d0      	blx	sl
 800b0fc:	3001      	adds	r0, #1
 800b0fe:	d0ab      	beq.n	800b058 <_printf_i+0x164>
 800b100:	6823      	ldr	r3, [r4, #0]
 800b102:	079b      	lsls	r3, r3, #30
 800b104:	d413      	bmi.n	800b12e <_printf_i+0x23a>
 800b106:	68e0      	ldr	r0, [r4, #12]
 800b108:	9b03      	ldr	r3, [sp, #12]
 800b10a:	4298      	cmp	r0, r3
 800b10c:	bfb8      	it	lt
 800b10e:	4618      	movlt	r0, r3
 800b110:	e7a4      	b.n	800b05c <_printf_i+0x168>
 800b112:	2301      	movs	r3, #1
 800b114:	4632      	mov	r2, r6
 800b116:	4649      	mov	r1, r9
 800b118:	4640      	mov	r0, r8
 800b11a:	47d0      	blx	sl
 800b11c:	3001      	adds	r0, #1
 800b11e:	d09b      	beq.n	800b058 <_printf_i+0x164>
 800b120:	3501      	adds	r5, #1
 800b122:	68e3      	ldr	r3, [r4, #12]
 800b124:	9903      	ldr	r1, [sp, #12]
 800b126:	1a5b      	subs	r3, r3, r1
 800b128:	42ab      	cmp	r3, r5
 800b12a:	dcf2      	bgt.n	800b112 <_printf_i+0x21e>
 800b12c:	e7eb      	b.n	800b106 <_printf_i+0x212>
 800b12e:	2500      	movs	r5, #0
 800b130:	f104 0619 	add.w	r6, r4, #25
 800b134:	e7f5      	b.n	800b122 <_printf_i+0x22e>
 800b136:	bf00      	nop
 800b138:	0800b35d 	.word	0x0800b35d
 800b13c:	0800b36e 	.word	0x0800b36e

0800b140 <memmove>:
 800b140:	4288      	cmp	r0, r1
 800b142:	b510      	push	{r4, lr}
 800b144:	eb01 0402 	add.w	r4, r1, r2
 800b148:	d902      	bls.n	800b150 <memmove+0x10>
 800b14a:	4284      	cmp	r4, r0
 800b14c:	4623      	mov	r3, r4
 800b14e:	d807      	bhi.n	800b160 <memmove+0x20>
 800b150:	1e43      	subs	r3, r0, #1
 800b152:	42a1      	cmp	r1, r4
 800b154:	d008      	beq.n	800b168 <memmove+0x28>
 800b156:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b15a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b15e:	e7f8      	b.n	800b152 <memmove+0x12>
 800b160:	4402      	add	r2, r0
 800b162:	4601      	mov	r1, r0
 800b164:	428a      	cmp	r2, r1
 800b166:	d100      	bne.n	800b16a <memmove+0x2a>
 800b168:	bd10      	pop	{r4, pc}
 800b16a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b16e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b172:	e7f7      	b.n	800b164 <memmove+0x24>

0800b174 <_realloc_r>:
 800b174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b178:	4680      	mov	r8, r0
 800b17a:	4614      	mov	r4, r2
 800b17c:	460e      	mov	r6, r1
 800b17e:	b921      	cbnz	r1, 800b18a <_realloc_r+0x16>
 800b180:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b184:	4611      	mov	r1, r2
 800b186:	f7ff bb6b 	b.w	800a860 <_malloc_r>
 800b18a:	b92a      	cbnz	r2, 800b198 <_realloc_r+0x24>
 800b18c:	f7ff fc9c 	bl	800aac8 <_free_r>
 800b190:	4625      	mov	r5, r4
 800b192:	4628      	mov	r0, r5
 800b194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b198:	f000 f81b 	bl	800b1d2 <_malloc_usable_size_r>
 800b19c:	4284      	cmp	r4, r0
 800b19e:	4607      	mov	r7, r0
 800b1a0:	d802      	bhi.n	800b1a8 <_realloc_r+0x34>
 800b1a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b1a6:	d812      	bhi.n	800b1ce <_realloc_r+0x5a>
 800b1a8:	4621      	mov	r1, r4
 800b1aa:	4640      	mov	r0, r8
 800b1ac:	f7ff fb58 	bl	800a860 <_malloc_r>
 800b1b0:	4605      	mov	r5, r0
 800b1b2:	2800      	cmp	r0, #0
 800b1b4:	d0ed      	beq.n	800b192 <_realloc_r+0x1e>
 800b1b6:	42bc      	cmp	r4, r7
 800b1b8:	4622      	mov	r2, r4
 800b1ba:	4631      	mov	r1, r6
 800b1bc:	bf28      	it	cs
 800b1be:	463a      	movcs	r2, r7
 800b1c0:	f7ff fb18 	bl	800a7f4 <memcpy>
 800b1c4:	4631      	mov	r1, r6
 800b1c6:	4640      	mov	r0, r8
 800b1c8:	f7ff fc7e 	bl	800aac8 <_free_r>
 800b1cc:	e7e1      	b.n	800b192 <_realloc_r+0x1e>
 800b1ce:	4635      	mov	r5, r6
 800b1d0:	e7df      	b.n	800b192 <_realloc_r+0x1e>

0800b1d2 <_malloc_usable_size_r>:
 800b1d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1d6:	1f18      	subs	r0, r3, #4
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	bfbc      	itt	lt
 800b1dc:	580b      	ldrlt	r3, [r1, r0]
 800b1de:	18c0      	addlt	r0, r0, r3
 800b1e0:	4770      	bx	lr
	...

0800b1e4 <_init>:
 800b1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1e6:	bf00      	nop
 800b1e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ea:	bc08      	pop	{r3}
 800b1ec:	469e      	mov	lr, r3
 800b1ee:	4770      	bx	lr

0800b1f0 <_fini>:
 800b1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1f2:	bf00      	nop
 800b1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1f6:	bc08      	pop	{r3}
 800b1f8:	469e      	mov	lr, r3
 800b1fa:	4770      	bx	lr
